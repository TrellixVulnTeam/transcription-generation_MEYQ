Transcription: coding bootcamps are subject of controversy critics of coding bootcamps defend the conventional University system and these critics argue that boot camp graduates do not have enough experience to write quality software but the reality is that some boot camp graduates have found success from this new educational path after graduating high school Kenny Tran attended one coding bootcamp and then spend some time at home absorbed in his own personal projects eventually he went to a second coding bootcamp his form of graduate school during this second boot camp Kenny worked on purify CSS a module that can reduce the size of front end projects by 60% today Kenny works at the groundbreaking Company Mesa sphere completing a career Arc that proves that coding bootcamps are enough of an education to rival traditional University learning if you enjoy today's episode which I know I did please share it on Twitter or Facebook and
your friends about your favorite episode the way that the show grows is through word-of-mouth so it's extremely helpful to me in the podcast if you mention to your friends also you can always send me an email at software engineering daily at gmail.com I'm always looking for new show ideas and feedback I really appreciate you listening so thanks and let's get on with this episode
 I had a crazy idea couple weeks ago it's a photo sharing app that only has pictures of cats when I finish my photo sharing Cat application I will be deploying it to Le no because Leonard is the fastest hosted Lennox provider I don't want to get locked into a proprietary platform it's going to overcharge me as soon as my app gets popular I just want a fast Linux server with simple pricing go to lenovo.com SE daily and get $20 in free credit today plans start at $10 a month so my free $20 will be plenty to watch my cat photo sharing app once I need to scale I can use tools like an ode balancers and backups and Lynyrd has built-in dashboarding and metrics so that I can see the traffic to my linode servers and I can understand how many of my users are posting cat pictures and looking at each other's cat pictures go to anode
 kaam SE daily and get $20 in free credit today if the plans start at $10 a month such a great deal thanks to a note for sponsoring a software engineering Daily Now what's going on to this episode
 Kenny Tran is the author of purify CSS and a contributor to webpack Kenny welcome to software engineering daily opens up a webpage a large mass of code is processed by the browser and this front end code has been compressed to take up less space on the user side and this compression is always done by a front-end web developer who wrote that code and you are one of those front end developers who give me an idea of what you are doing to reduce the size of your front end code when I receive that code as a user on my browser
 right so so in today's world there's a lot of code that is like pre-packaged like Frameworks and stuff and like the benefit of Frameworks is like you get to build things really quickly really fast but one of the downsides to that it is you're going to have a lot of code that is essentially unused so I create a module that that pretty much tries to look for code that is unused and then strips it out of the house which nerve reduces the file size which is really good you know better load times you get to see Facebook quicker before we talk about purifying though there are two steps to to lowering the load speed of a web page that we typically have any industry in these are just
 better known as can cat and Minify you talk about these two steps what do what do can cat and Minify refer to
 Rachel can cat is before but let's say you have like two pages and stuff and like you have a like a login screen and then you have like your feed page where you see all the posts and stuff like that so and each of these Pages would need specific things so you would have to make separate requests for all these things that you need for these different pages so can cat basically combines all of the files so you would just need to make one request a likewise why is that helpful is this is because every single time you make a request there's a lot of overhead that you have to do yet you got to send a lot of like weights back and forth and that slows things down so when you can cat you put all the files together and you only have to do like the travel distance like once
 which reduces the time
 and what about men if and then from it if I now
 now Minify is where you know like we write code to for the computer to like do a certain amount of steps but we also write code for humans to read it so we can work together Minify because we work with other humans so we want to write it in a way that is readable and to do that we had a lot of like we had a lot of like sugar into the code that we write minifying essentially like forgets like makes your coat unreadable but it come packs it so that the computer still understands what's going on and like the cook code is absolutely unreadable but it makes it much much smaller at again this is for that benefit of reducing low time
 your goal is to introduce another step between contact and Minify and you call this step purify what does it mean to purify our CSS and how does it fit into the the two steps of concat and Minify
 okay so so basically you can imagine you have all these CSS files you have like all these thoughts and you combine them all into one so that's can cat and then generally like people would just come cat and then Minify and then like that would be that would be all day do purifying the way I imagined it is like after you can cat all the Styles together you would purify it which is basically looking for the deadweight in those files like the code that doesn't actually do anything for your application nude strip that out
 and then you admit it by it which ultimately reduces the weight of the Bauhaus
 to use the example of bootstrap as something that we don't use all of the code from this is an example where we would get a lot of value out of using purify CSI show explained for those who don't know what bootstrap is I guess just briefly explain I think most people do know what it is but what it is and talk about why purify CSS is useful for projects that are using bootstrap
 yeah so some good shop is something that Twitter created and like I said before it's it's like this CSS framework it's it comes with a lot of pre-packaged code so you can make your your website kind of look good really easily because like all all these classes are given to you
 so you it you know you can just when you want to create like a small app you can just start like running with it and have it styled nicely really quickly so the problem with this is that like I give you all of these classes for you to use but then rarely do you actually use every single one that they give you which means there's a lot of dead weight and that means that I could people who go to your small application that maybe is only using percentage of bootstrap they're loading all of this extra like selectors and it just makes your apps a lot slower to load
 and in order to find out what parts of bootstrap are not being used by a particular project if you ate it if a user is using bootstrap verify CSS would find these parts that are not being used by the project cuz bootstrap is it is a gigantic file you run text analysis on the code for that project in order to find out which modules within bootstrapper actually being used so what kinds of text analysis are you performing on code in order to find out which aspects of bootstrapper not being utilized
 so basically like this is the way that we approached it and some okay so before
 resume let me just back up and like before purifying it was as concept of it was another module called on CSS and what that module would do is like it would look at all your HTML files look at the classes being used and then basically like that's how they would extract information right lagala classes using HTML strip out all the CSS that is like not those classes now this is that's good but it's not good enough for today's world because a lot of our classes come from JavaScript
 so that's where we do the static analysis which is basically we look at your job in script in HTML and we basically just turn it into one huge string generally HTML we can extract classes from there the JavaScript we do interesting things with it like we strip out
 we should about things are not strings and stuff like that but we look at
 like we did when we turn that into one big string and then we look at the words that come up and we essentially
 all the classes that we know for sure aren't being used we can remove and it comes out to that there are classes that there's a potential for its being used that are we still leaving so actually if use PeerFly and use it on a big enough
 because there's so many words there will still be some left over classes that aren't being used that still end up in the final CSS file but then because we try to be safe with it especially we take out the classes that we know for certain that aren't going to be used determinism for how the code loads or is it just that the text analysis thing you have to do to be that comprehensive and that Thoreau is so sophisticated that purify CSS doesn't have that part implemented yet
 well it's because I mean you can create
 because the classes come from JavaScript it becomes really really difficult I mean you can imagine like let's say but you have a class called active right and then in your JavaScript you like create the class active by adding act and then I you know so like we would be really difficult to do supper. And you can imagine other ways JavaScript like the individual characters don't even show up and you know maybe you do some crazy things like you make a request for it and other stuff like that so there's a lot of like limitations that you can do just because we're doing Saginaw houses but the we really ain't for but that's like the .01% used case 99 that you have to be really you know you
 really weird stuff to you hit that we try to aim for like the usual case we're okay you can imagine like button / active okay you know you can imagine combining them so bun shows up active shows up to then we kind of like take that into consideration
 it seems like you would only have to run this purification once when you when you are ready to ship your app so it's not a performance critical aspect of the application and you can really get clever and greedy with the mechanisms that you use to perform the code analysis because you only have to run it once is that accurate
 that that is pretty that is pretty accurate but I mean I mean I remember our first of the implementation ever it was a super naive invitation it was like we just heard your whole application into a string and then we took all of the selectors in your CSS file and then we basically just did like an index of that like on a really sizable application that took around like a hundred seconds even though even though that was just like really dumb invitation we were just trying to see what would happen like if it was even possible so it's like so it's the performance-wise wheat we've actually did have to focus on that because even though it takes let's say it takes like 20 seconds right
 I mean. Still kind of sucks because you're going to want to test that locally you know like yeah sure you use this extra module but you're going to want to test that it works like it says it does so you're going to probably going to run that on like you know on a listener or something is going to happen every single time you save 20 seconds is that that would just suck so we don't we did focus on making it perform better how fast did you get it to that big big protocol jumpstart application we actually we brought down pretty pretty well comes down I mean this is because that's around 2 seconds and that's giving that's like really bad scenarios you know that's you know that's not too bad for if you're listening on Save the two seconds is not that bad
 give me some numbers how how much smaller will my app get if I use purify CSS to reduce the giant prototypical JavaScript application
 so I actually like there's there's a way thanks there's no docks for this which is which is something I need to work on but like there's a there's a way that you can use. Buy that that'll actually make it better but like if you just do it just run it through all your files in there
 it really depends on your application and stuff like that but generally you could reduce it by like 40% 30%
 and 40% of your overall code you're saying yeah overall code it really depends on how like if using a CSS framework I mean if you're using custom if you never use a CSS framework for your application you just wrote all the selectors is actually a good chance that you know you're actually using a high percentage of the selections that you created but if you're using a framework the chance of purify reducing the file sizes even higher and actually interesting ways you can do it like I was saying before it is that you when you pass in the HTML and JavaScript and talk about JavaScript now is that you know you don't really want to pass in files that that you know that pertain to making requests and other stuff like that you only want to pass in the JavaScript that that is focused
 on the views because those are the only files that would actually contain classes like your job scope owls that make requests to api's like they wouldn't really contain CSS classes so if you don't pass those in who's going to be the last false positives so if you do really well at least introduce an even further got it yeah it's super efficient so most people who are building JavaScript applications front facing job applications what purify CSS most likely and you built plug-ins for Grunt and gulp that allow people to easily add purify CSS their projects for people who are not very familiar with front-end development explain why these build tools are important what are the purposes of Grunt and gulp
 yes Aggron go up like they make it really easy for you to do like tasks like before we were talking about cat and Minify Grand galop they allow you to create like this can cat task. You know you can run a commands you can run One commands in your terminal or whatever and then it would can cat it for you then you can set it up so that it would Minify it for you after that and I mean you can do a whole lot of things with who is basically like moving your files around do whatever you need to do to go from development mode to production mode
 and rainy also need basically so it's just the way for you to run tasks and we created plug-ins for for Brandon Belt so that you can basically you know do what we wanted which was the cat and then purify and then Minify that's why we pray the plug-in what is involved in writing a plug-in for grunter gulp cigar on Granville they actually actually one of my friends did the Run go plugins but they have pretty pretty good documentation on how to actually write it but like you know they they expose some functions now there's a lot examples that you can look at it how to create the plugins and yeah like you basically just hook into the big run like cycle essentially
 okay well after building plug-ins for Grunt and gulp you and your team were going to write a plug-in for webpack which is another one of these build tools and things got interesting when you started to work on that plug-in what happened when you decided to start building that plug in for webpack so we can do your hair like alright you guys are going to create the Groton dump and then you know I'll do the web pack plug in and I. That sounds cool cuz like I thought my back was pretty cool so I would work on the web pack plug in and then it turns out that the web there's there's no documentation to create webpack plugins say so then the only thing you could really go off of was
 like what pack has these internal plugins that it itself uses so you have these like plug-in examples for you to go off of I mean even today I'm not even confident that you know I have Cradle by pack plug-in just like straight up but because there's just not enough documentation I think that's that's a good General theme with with like with webpack is you know like the creator of it he's not really
 he's really time constraints so doesn't have like the most docks in the world but but yeah we basically just look at example plugins and we had to read a lot of code and we actually like we I had to dive into so much of the source code that actually made contributions to see what pack that's how that's how that started that. That's how I started getting into webpack code and stuff like that actually frequency and it was like I don't know the history was packed with whoever then the person is that started it has the vast majority of it is so much more than the second purse I think you were the second per second or third and you just kind of unusual for a popular open-source will usually you know the open
 Search tool is used by a lot of people of usually committed to buy a lot of people but webpack seems to be an exception yeah really and I guess what you're saying is a canonical lesson for some people that if you don't have documentation it's pretty hard to contribute webpack issue that that basically says like the code is too hard to follow like clean up the code thank God that was a good have an issue I remember reading that but yeah what the webpack yeah it's really weird it's interesting project how is it take it cuz it might understand I'm not deep into the community with my nursing is a web packet has I guess gotten more popularity than grunter go by I don't know how these different build systems relate to one another with my name is webpack is a little more popular movies and give me some history on how these different build systems have evolved in
 different different trajectories webpack is definitely like become popular really if you if you just look at the mpm downloads for webpack it's insane it's the growth is really insane it's actually recent to when I when I first started you know when we created this thing for webpack like it was the growth wasn't even as quick as it is now if you look at it now it's insane but I would definitely say it's like the more popular one out of
 but yeah I think the first one ever that came onto the scene was Grunts and then and then don't came along basically dope tried to make it like more readable and then easier to use and Run Golf and I think the big thing with the web pack
 what does a big thing with what I was like you can do code sledding and slike if we go back to the example now so I can go before it's like you having like this login screen and then you have this feed page and I think one of the original reasons why webpack was made was because if you if you go to the Lions green you can actually give me go to login screen you load you make one request and you get everything that you need but only for that login screen
 so if you go back to what I was saying about can cat before like they they combine all the code for basically the login screen and the feed page so you would make one request to get all that and then it was then later on you would you would think like okay well why why would I get the code for the feed page if I'm just going to the login page like now it becomes another problem where and webpack fix that by allowing you to split your code into just a login page and then just the feed page so like this is different from the original problem that can cat was fixing because it like that problem was you're making too many requests but you're making too many requests on the same page where as the what webpack allows you to do is you make one request for each page basically
 is like the best solution
 go back to the discussion of building a plug-in for webpack though how how was it that this that this was so hard to do had nobody written plug-ins for webpack before people actually like it was there it was there but you really had to realize source code the source code exactly exactly it wasn't super easy for you to lie cramp up but it did it did actually exist actually one of those of the way that we gotten to purify
 is that like originally we just wanted to create a web page plugin like we never wanted you to do like the grunt and go up and all that stuff we did we didn't even want to do like a stand-alone purify all we want we were looking through the issues for webpack and we just wanted to make a contribution to webpack and one of the issues and actually that issues still up today is that like somebody wanted a webpack plugin for on CSS on CSS is like the the the module I was talking about before where it looks like your HTML pulls out classes
 basically there was an issue on webpack for somebody to create a plug-in for that and then that's actually how that's all you wanted to do pretty much we we just wanted to create a plug-in for a pack and then once we started looking at on CSS more we just like it just wasn't good enough because it only looked at the HTML I mean there were some ways for you to pull classes out of JavaScript but it was not even it wasn't even riposte robust enough it wasn't even close to what it should be so that's how we got into creating plug-ins for for webpack that was our original goal in the beginning
 before you even start workout sure if I see it before we even started working on CSS and and then it's really funny like you just you just saw a way to make it better we did it
 and then we we posted it on to Hacker News and it just took off and it was it was crazy
 Shopper Engineers are always looking to automate their work software automation let us get more done with the same number of resources investment automation works the same way wealthfront is an automated investment service that relies solely on software to acquire and manage client accounts traditional Investment Services have many humans in the loop advise clients and taking fees the problem with these older advisory Services is that the advice that the services are applying is often so systemic that a computer could give the same answer or an even better answer wealthfront takes a new approach with software-driven automated investment that provides better returns through software engineering Go to wellsfargo.com / SE daily to get a special offer for our listeners $15,000 managed for free when you open your account don't pay commissions and account fees maximum
 your games with wealthfront set-it-and-forget-it investment automation check out well front.com SE daily it would support software engineering daily and it would also introduce you to the world of automated investment so you can see if you like it or not wealthfront.com SE daily thanks to wealthfront for sponsoring the show you've been a loyal sponsor we really appreciate it now let's get on with the show
 I want to get some more contacts to your for what was going on when you went through this experience of trying to make a web pack plug in and then eventually stumbling onto this. Pricey SSID and building that what was going on in your life when you and your team start working on this project so it's like me and my team we were we were part of a coding bootcamp mirror near called hack reactor it's really really great we were in our project and busy the project faces they give you time to create something to pretty much
 play glad you a job essentially like after after the coding bootcamp is done and it's like supposed to be all of your learning distilled into one project and yeah I want to touch a little more cuz this is a really interesting background you've you've actually attended two different coding bootcamps can you tell me about that of what is your educational background do you go to college or did you did you just graduate high school and go to coding bootcamps I graduated high school I knew that I didn't
 but I never went to college and it wasn't it wasn't a decision where it was like oh I'm not going to go to college because I'm going to go to a coding bootcamp actually like I just didn't go to college I had like no like backup camera to scam because I knew let's let's let's take it as far as we can't I mean I mean let's listen to this show kind of know my perspective on that I I went to college but it it's kind of impossible for me to say is a complete scam cuz I'm happy with how I turned out looking at it objectively it's a scam
 what was it from your perspective like why did you come to that conclusion it's just because I never really like school I never really did well in school so I just to me I just felt like the internet had like a lot of that you can learn so much more on the internet my original goal was to pretty much try all these different things you know I can probably learn how to code just from the internet and then and then that's how I and then I feel really lucky like that's that's when coding bootcamps started taking off then and then I found that and that that really like jump-started it like it really like was a catalyst essentially but it's really interesting that you said that because recently on hacking news don't know if you saw it but it was this thing where it's from triplebyte by post compared compared with
 large sample size and it's pretty crazy like the Practical programming was essentially on the same level that almond the guy that wrote he says he said that like actually it seems like people from coding bootcamp to do really well in interviews and also people who went to University do really well in interviews and they do well on disjoint things they each have their own strengths and when I read that I was like is he just being diplomatic like is he being is he being truthful or is he being diplomatic if you're a company you just want the coding bootcamp person everyday you don't want that the academically educate I mean maybe you do and on occasion but like I don't know why did you get that impression or did you did seem like they're really
 is some strong attributes that you get out of the University education that you don't get from a coding bootcamp education like one of the best things that you get from you you know what it feels like when you're learning quickly I could just get that memory of okay this is what it feels like when you're learning really really quickly letting you know if you go to the university in town I spread out across years basically the protracted you know make that money every year
 yeah they are they have a great irr at at the University show okay so not too I guess harp on that too much it's hard when a little more so you went to one coding bootcamp and then you ended up going to another with this like your graduate school like University and in graduate school or what like what was that process like I was in the second ever like the second ever cohort I mean really it was the first cuz the first one was for iOS and then I was for the first one for real
 and then after that I remember after that like I was the only one in the cohort I think that like that didn't go for a job like everybody else in a cohort went and got a job I think I just wanted to work on my own projects and stuff like that because like. That was kind of like the whole reason why I wanted to code it was for just build my own personal projects basically and sews after that I took I think it was like 2 years
 cheers just went home
 and just worked on the project that I wanted to work on really and why so you just like move back in with your parents and just worked on your coding projects I I love that experience I like I think I learned so much like without without doing that and then they taking the next couldn't we can't cuz I wanted to learn JavaScript and like without that experience I wouldn't have done such a like outlandish kind of project or at the end of hack reactor the second one because in a project face 90% of the people 90% of people just do apps right because you know you want to play say if you want to do something that just shows like I know I know how to cut like I know what I'm doing but let's say purify CSS right if you looked at the source code of beer if i c s s
 probably a thousand lives and you're not using react you're not using angular like it's just a thousand lines of JavaScript like let's say purify bombs right
 it went nowhere we be going into the job search with like okay I have like this 1000 Lime Street or JavaScript thing I like most you know I'm in the good company still do this for like there's a lot of companies that are just like okay show me your experience with XYZ framework me so I know that you can contribute so that it was It was kind of you but I mean what I'm trying to say because terrible cookie cutter job hunt processes like let's I mean
 like if your if I say yes I didn't didn't take off the way it did I don't think it would have I don't think it would have really liked helps me as much for the good companies to like anything in the bong the long run I think this is what some people Miss is that the real important part is to understand how to force yourself to like have an insight about the will for sure have an inside about something and it is to force yourself to take action on that insight and build a project around it and believe throughout the process that it's a worthwhile project to work on whether or not you're taking like the probabilistic approach of the probabilistic assessment that like maybe this will work out maybe it won't you essentially just say hey this is an inside I'm having an I don't care if you believe it I'm going to follow through with it and work on the project and overcoming that fear is actually like anal
 long run that is going to serve you much better than any sort of conventionality that that maybe helps you navigate the the the herd mentality job market a little better in the near-term number one goal in life was like be employed like that would be the strategy that you take obviously like you're actually when you go to the account like your vision can be really really short term like damn I really want to get a job after if you like it maybe looking at it from the perspective of like like things to work on like definitely you should do you should definitely think about doing things that aren't that would actually be be useful whether it's an app or some random module you know and it's like how much can you learn
 it's actually I think one of the benefits of working on something like this is like you almost like wet while I was working on purify it like I almost got that that feeling is like okay I think this is like something here I think this could this can actually be used by a lot of other people and he almost like remember that feeling you always want to get that feeling every time you want to work on a personal project right that momentum The Devil's Advocate approach for a little bit so
 the university this is where Apache spark came out of this is where Apache mesos came out of you work at Mesa severe now will get into that but
 and you know I find your story about purify CSS interesting because it's the first instance I've heard of a really useful open source tool coming out of a coding bootcamp and maybe it's not the first occurrence but it's the first time I've heard of it and so the question is like our can more advanced and more advanced tools come out of this coding bootcamp environment can something on the scale and scope of Apache spark Apache mesos these things that took a long time to marinate in the minds of the researchers who were working at Berkeley you know in this University environment that we've lauded for so long can this level of of Ingenuity and long-term projects taking Candice come out of a coding bootcamp also
 well she is really tough because one of the like the coding bootcamps priority is like get you a job like they want to have that stat words like 99% of the students Scott like you know hundred K salary or something like that it's like that's there that's their priority I think if you really wanted to create some organization we're like it really Fosters like you know like really risky things and tell me that you just you just cannot have that priority I think we were kind of like an edge case where we can we didn't go down the app route but actually some credit here because like the way they do the project. Is
 we we are not the only ones who did something crazy like a dude if you look at the history of hack reactor like more than any other boot camp I believe is like there are a lot of these like hard technical projects that are taken during the project. So and hack reactor kind of did that by
 letting you pick your project like you essentially pick your project be the kind of encourage it to the kind Courage the risk-taking wear as a frappe Academy they had essentially like one goal it was like you know build something don't do anything crazy just build something that demonstrates your skills so just that difference like you can have some you can foster some you know like Parts I can go project but if you if you have that priority of getting your students job you just can't have that short-term thing so it's going to be really tough coding bootcamp Market is going to ship out I mean it's it's it's a very interesting result that you know you you are the first person who I've heard of who's done two different coding bootcamps I'm sure there are others but
 you did too high quality coding bootcamps I've heard I have heard of these people who go to these low quality coding bootcamps and they're like well that sucked and then they go to App Academy or hack reactor after that but you went to App Academy just high quality and then you went to you would to hack reactor which is high quality and then you know you could go to another coding bootcamp in the future maybe if they make a super sophisticated 8-month by 8 week bootcamp and it's going to be some replacement for for University where you have like a ala carte coding coding bootcamp sequence that you can seek out or how do you see that evolve in overtime like it's just it's just insane the value that you got
 with a with a coding bootcamp like let's say how to write like the tuition is at H&K like the likelihood of get you getting job is really high and I think it's like 99% and then since you're going to pay that off within like the first couple months several months of your first job and then not only do you pay it back but like now you have like this insane skill that you didn't have before so like the boot camps value-wise it's just insane now there's like data science bootcamp coming out now like
 do you think that's that's the way that it's going to move towards something interesting though is that I've noticed that there's just like bootcamps right that take that pretty much make you good enough to get a job and then there's this whole other section sector which is basically like a boot camp to get into a boot camp it's like the pre boot camp so I think that's an interesting trajectory is like the barriers like moving lower it's like like this boot into bootcamp and then this is going to keep moving down like the barriers is going to be to come solo for you to just start picking something up so I think that's really interesting can this be replicated for other
 skills and stuff like that I don't know because because programming make the demand is like really high I don't know if you can just do this for like something else that's going to be hard cuz yeah I'll be concerned if there's like a surgery boot camp that starts soon
 I like that at the stat for surgery would be like 98% of our doctors didn't kill somebody today you work at Mesa spear you work on front end development at Macy's fear we think of mazos as a back-end technology it is this data center operating system listeners may have heard episodes about kubernetes or other other scheduler type of tools like Mesa biggest tell me give me an overview of what maysa does from your perspective and what the Company Mesa secure does and what you're working on there
 so basically like the best analogy that I that I heard that describes what all this does is like you know on your computer you have multiple cores right I like whatever you launch an application like if you open up Chrome and you have 4 cars that you like you don't have to pick like what you what core you want to run it on like you just open the application and in the background it just kind of distributes the work however you know however it should I think you can think of like every node as a kind of core and you can run applications on all of these nodes you don't have to worry about it like any of the notes you can just treat it as one huge computer
 so I think that's what maysles is trying to do
 is it what kind of work do you do what would what kind of problems are there on the front end what does a front end of meso spear provide we work on the DCU is the UI for dcos which is data center operating system and
 basically like the second you I fall for you to run applications that like you can see all of your cores and you can just run your applications and like that suck your interface to do that so that that's what I work on these different schedule or technology with the kubernetes I think of kubernetes has and meso spear as competitors whether or not I mean some people don't or some people say they're synergistic her and maybe that's the case but from my surveying the technology landscape it seems like they're in competition and one of the accys where competition is really really important between the two is this usability layer this front end interfacing layer that almost guides how
 how easily it is for somebody to onboard with these highly complex Technologies do you agree with that assessment
 so so I can one of the you're saying one of the places where it's really going to matter is like basically the usability of it you I it plays a key role in the usability and I'm wondering I guess if you agree with that entire thesis like how important is the usability or is there some is there some technical Advantage between kubernetes arm Asos that I'm missing here or do these mostly seem like somewhat redundant Technologies where the usability layer is is really one of the defining characteristics of the usability layers definitely going to be one of the defining characteristics characteristics like no matter what like you just want to the barrier to using the products to be super low like you just press couple buttons and you're basically doing all of this work that they used to take
 Specialists to do so I can make sure she has been it's actually I'm impressed like their focus on design has been really huge acquired a good design studio in the past they're still here they really care about making it really easy to use
 so yeah so I mean that it definitely is going to be one of the defining characteristics on the front end of May this year which is a company that you know we would you typically think of it as a back-end company but as you point out you know they require Design Studio they obviously are concerned with the front end but in any case because you work at the front end of a back-end company exposure to all levels of the modern application stack so I'm very curious what is your holistic view for how application development is evolve and how is this going to look from end-to-end you know going into the future
 well like the amount of resources that's going to be available
 like to you as a developer is going to be crazy cuz like you're going to be able to create these applications that can that can utilize all of these nodes and it'll be super simple for you to do and I think that's something that has been working on we kind of have this concept of universe where it's kind of like the app store for distributed system applications you can just install you can install it you can use it it's almost like you're basically using an app on your on your Mac or on your phone accepts it's using the whole data center so I think
 I need the name of the way that they put it was like there was like the operating system for your computer and does an operating system for your phone and now we're going to bring that to the data center where you can create these programs that can run on top of that just like just like uber the app runs on your phone you can create other applications that would run on the Datacenter that you can use all the resources such a bright future and I'm curious have you thought about what those apps might be and we always have this thing where your we can see what we should build in order to give give the next generation of programmers the tools that they need but often times we can't anticipate what they're going to build the one thing I can't I can see that people would really be utilizing once destroy a computer becomes a lot easier as you know my machine learning framework like tensorflow they could take it YouTube
 that much more easily with if you if he can just click a button install tensorflow on your into your app and quickly begin utilizing a what kinds of things do you think we're going to be utilizing I think like the only thing I'm sure of is that like it's going to be unexpected like that because I mean nobody could have predicted Uber and sanction and how quickly it just took over you know like our habits and stuff like that so it's for sure it's going to be unexpected I think it's Shelby unforeseeable to be honest like but then it's going to be interesting because you have this new this new level that you can build things on and like
 like the possibilities you're going to be really interesting but I have no idea what's going to be coming
 what we talked about CSS we talked about coding bootcamps and now we have ended with talking about the data center operating system and the future Computing so this is been a great conversation we've covered basically everything we talked a surgical boot camp starting surgery boot camp
 okay well thanks for coming the Showcase has been great conversation
