Transcription: the web comic XKCD taught me everything I know about physics XKCD proved that web cartoons can be simultaneously educational and informative Lynn Clark is our guest today and she talks to us about code cartoons a series of cartoons that explain Facebook's open source projects like flocks and relay with the same elegance and creativity that XKCD exhibits at the 2016 O'Reilly fluent conference Lynn Clark will be speaking about code cartoons and the technologies that have sprung up around react JS we are giving away a free ticket to fluence 2016 which is March 8th thru 10th in San Francisco if you want to be entered into win this free ticket send us a tweet about your favorite episode of software engineering daily in today's episode I talked to Lynn Clark about why cartoons can be effective in communicating difficult
steps like flux and Redux and while in focused on react as the first set of Technologies to cover with code cartoons but first a word from the sponsors if they keep the lights on it software engineering daily
 Engineers love Automation and well front automate your investing as a software engineer at there are certain processes do you want to execute no matter what like integration tests during a bill you would execute integration tests manually you would use a continuous integration tool like code ship or Jenkins to automate your integration tests well front is a tool to automate investing just like a continuous integration tool runs your test automatically wealthfront can you reinvest your dividends automatically and performance tax-loss harvesting automatically to get your first $15,000 managed by wealthfront for free go to wealthfront.com se daily and get started with wealthfront Slayer of automation on top of your portfolio wealthfront.com SE daily check it out it would support software engineering daily and you will get $15,000 in manage for free if you sign up
 automate your investing get back to the things that you can't on me like writing code
 Lynn Clark is a senior developer tools engineer and Mozilla and she's also the creator of code cartoons a series of posts explaining Concepts around programming using cartoons Lynn welcome to software engineering daily a series of cartoons explaining programming Concepts called code cartoons and this is on code - cartoons.com so far these cartoons all have to do with react and other Facebook Technologies you start with the Facebook stack well I actually started the project that idea for code cartoons actually came out of my involvement my early involvement with the community I had been asked to speak at react rally and I went to speak there and I just really enjoyed my time there for me A lot of times the programming
 you need to get involved with is kind of because I like the people in the way they think and then I start looking into the cone I like the coat so I had been hanging out with a lot of the people that were working with reacting working on react and wanted to dive in more so I started learning about phlox
 and once I started learning about flocks I thought that to the docs
 yeah they were clear once I understood what Flex actually did I could understand what that diagram was showing me but I actually had to really dig in before I understood it and that stuff when your developer having to actually fully learn something before you can see the use case and understand how it's different than other Technologies and where the pros and cons are so that's where I actually had the idea for code cartoons what was starting with locks and so once that one was very very popular I thought yeah this actually might be a technique brg the cartoon about flocks and I showed it to people and people thought that it really explained it very well until I thought this might be a technique that works for other things and so I start applying at other things in react because that's why I was learning at the time yeah I think it's a very effective way of teaching this is sort of like next level documentation entertaining
 documentation different ways of explaining things I know when I learn a programming I don't just go to the doc's I go to YouTube videos or perhaps Rita SlideShare or something like code cartoons is certainly very compelling him and I read through your code cartoons I found them really helpful so what does it take to write an effective code cartoon so it takes a lot a lot of work so I will watch a lot of the videos because those do tend to give you more of the comparison that you need with other Technologies I'll watch you a lot of presentations from conferences and stuff like that I'll read the doc's I'll read the specs and then I'll step through the code many many times over so for this relay cartoon I just I'm releasing a four-part series on relay I probably stepped through relay doing the same sequence of actions
 at least a hundred times so I know like every bit of the code to how it was a good learning exercise for me but then I have to spend a lot of time figuring out how to isolate the different parts yeah which comes first and that takes a long time so it is a very time-intensive process but I hope that it by spending this time doing it myself and learning these things myself that I actually significantly reduce the amount of time that other people have to spend being confused about about the framework absolutely so let's start this conversation with flux you know at the O'Reilly fluid conference you know you really talking about data handling it react and I think a good place to start with this discussion is phlox describe the canonical problem between models and Views that exists in an architecture prior to flux before we had flux how did we handle
 this model and view relationship actually side-by-side with react as a way of handling a specific problem that Facebook was seeing with the the model of you set up that they had I don't actually know if it was traditional MVC the way they describe it it sounds like it might not have been but the models and Views that they had they had me all models that were holding the data pushing the data down to the fuse which run during the day that now that's pretty straightforward so you could have Neil one model communicating to multiple views one View getting data from multiple models but that's all pretty straightforward and of course cuz the views presenting this user interface to the user
 the user will be feeding data backup to the model the usual be entering things into the views and that dated would need to then get stored in the bottle so the fuse are pushing to get back up some models and sometimes you have models that are connected to other models you know you update one and it really means that you need to update data and a different model so you had model to model communication to and so the way I described as soon as it's kind of like an epic game of ping-pong you know you have this ball bouncing all over the place game of pong rather you have this this ball bouncing all over the place and it's really hard to figure out where this change is going to end up all of different things is going to have to touch when you send this change back up to the models you know where it's going to land in all the things that's going to have changed so how does flux solve this problem solve this problem is by creating was called a unidirectional data flow
 save a change that happens on the user interface and instead of having your views know exactly what they need to change in the models you have this kind of coupling between the view and the model love you just create this object that represents whatever change happened and maybe something like message creates now it will have a type that that says exactly what this change is supposed to be and then all of the data that goes along with that change so you're creating a message OB the title the user that created it the body that kind of stuff so it doesn't actually know where the student needs to go in the bottle how does Jaden needs to be changed on the model it just knows that there's a change that happened and it says this object that represents this change off through What's called the dispatcher it sends it to the dispatcher and then the dispatcher will send it to the store so those are the things that hold the data
 which of the flux architecture you describe phlox in terms of a cast of characters and in your code cartoons of these characters are drawn with a personification of the different responsibilities that they have so the first character that you draw is the action Creator what are the responsibilities of the action Creator Creator is the thing that crease that action office I was talking about you this object that represents whatever change needs to happen and so this action Creator I like to think of it as a telegraph operator basically it knows when when the view comes to it with a change the new Tappan the few doesn't know what the format needs to be for the rest of the system to understand what's going on but the the action Creator kind of like a telegraph operator it knows exactly how to put that message into a format that the rest of the system can understand what aspects of an application we want to Define as an action basically anytime
 you have a state change with flex is really need yeah once you define all of your state changes so any user interaction that will change the data that's in the app if you define he's all as actions then it's really easy for a new developer who comes on your team to look at all of the actions that basically crates are really clear API an action for each single type of thing that can happen so that is anytime you would have a change that the user could make her any any other private system connected to data you want to have an action definitely so the next character that you describe is the dispatcher and like you said the dispatcher is comprable to a telephone operator at a phone switchboard you have some nice drawings of this I really encourage people to check out code - cartoons.com to see these depictions of the different characters involved in this flux personify
 Haitian so the dispatcher keeps this big registry of callbacks describe the interaction between the action correct action Creator and the dispatcher and explain explain what the dispatcher needs to do well the action Creator will go ahead and send off message to the dispatcher and dispatcher especially doesn't have to do too much this battery actually just has this list of all of the stores that need to be notified of any actions and in other architectures sometimes the dispatcher will know okay this sets of stores will be notified when a particular type of action comes in this other set will be notified of a different type of action comes in that's not the case for phlox influx the dispatcher just knows I need to notify all of these stores and so it will just send out the notification or the reaction to
 you store it will do it synchronously it won't send it all out send it out to the stores all at once cuz then you can have issues of yeah the same game so it will actually send this action out
 it in sequence and then the stores will be the ones that take it from there so as you said the next store how do you think about the store I think of the store as an over-controlling bureaucrat this is the one of the things that kind of sets flux apart is that a lot of see the control it is centralized in the store so the store basically tells the rest of the system you can't touch any of the data the only way that you can make a change to the data is to go through the appropriate channels to go through this action pipeline you some other architectures will have Setters on the stores so that nailed of you could come in and call us that are on the store and indirectly manipulative but the store is very no touchy you know it really wants you to go through the official bureaucratic Channel
 how should we think about the idea of a store relative to the idea of a database
 so
 the store it doesn't actually necessarily you know it it doesn't actually store the data to disk or anything like that it just is an in a memory store when you start talking about databases there isn't really a particular way in Flex to do that kind of data persistence you can add it in but there's no really specified way to do it what Facebook has done since introducing the flex architecture is actually build another system called relay which they use for a lot of their apps to manage that communication between the data that's in the browser and the day that's in the cloud in the database absolutely and we will get into relay later on but you talking about just phlox when the state of the store has
 change it emits a change of it and this notifies the controller view that the state has changed and the controller view you described as like this middle manager there between the store and the view and the store then tells the controller of you when the state has changed and it collects the new state and it passes that updated state to all of the views that are under it so with all of these different characters of the flux architecture in mind could you explain how they interact from a high-level just explain the flux architecture in from a holistic perspective from the description the change it just goes around in a circle it goes from The View that you actually captures the change coming from the user and then
 how is it formatted by the action crater the action Creator sent it to dispatcher the dispatcher sent it to the store and the store then update the data Let The View know that is changed and then the view is the one that renders it out of unit now doesn't make the change itself it goes to this pipeline that's a circle so that's why people call it a unidirectional dataflow perfect so looks going to talk about a Redux reductions in architecture that solves the same problems as flux plus some additional ones and the first problem is that the code for stores can't be reloaded without wiping out the state so influx the store contains two things the state change logic as well as the current state itself what is the problem with keeping both of these things in the store
 so this kind of comes from the way that Dan abramov the guy who wrote redox was approaching a problem he he wanted to be able to do something called hot module reloading and what hot module reloading is is this idea that when you make a change to your code you can just hit save and it doesn't even reload your browser it just goes into the JavaScript in using websockets basically swaps out whatever you were
 saving the object that you hit save on and it just swaps it out rather than reloading your browser until the nice thing about that is that if you have any state changes that if you've actually gone through and have started trying to debug and if you added a bunch of things to the state then they're still in your browser you can still be debugging in the same spot even though you've made this change your code
 and so the issue you can already do this with a lot of components as long as the component you know if you could do with CSS you could do it with a lot of parts of your code it didn't have state but anytime you were working with an object see if you want to make a change the store which held on to the state then you would be reloading that whole object and so that would get rid of that state so you have to go anytime you want to debug something in your store you're going to have to go through much longer process so that is what redox does it basically makes it so that your store doesn't hold on 10 East your producer is what it's called in redox be part of the code that has the logic doesn't hold on to any state it just received States and the store would you don't actually even code and and Redux the store is provided by the library itself that holds onto the state and passes it to the reducer so you also describe
 this problem of likes estate being Rewritten with every action so I mean what it what are the trade-offs between between rewriting the state with every action and the Redux solution which is the copy each state whenever a change occurs so yes we're getting into the concept of immutability here so that's one of the things that Redux does push you towards is having your state basically be immutable in and I saw a really interesting thing on Twitter this week somebody was teaching a student about immutability and the way that this student described it was something that's mutable is basically like save something that is immutable like save as I save a copy so the nice thing about having your seat be immutable and creating a new object anytime the sea
 this changed is that you can actually do this thing called time travel to fucking
 it means that you can if you make a change in your application and it turns out that change there's a bug somewhere in the transition went between the old saying that you can actually take a step backwards in your account so you can basically do an application Level undo in the state and you can keep trying it back and forth and back and forth and back and forth until you get back with the problem is there are also other benefits to mutability it can make things easier to reason about even if you don't have time probably bugging but that's where the idea for it came when Dan was creating the Redux architecture
 cloudinary is the image back-end for web and mobile development as web and mobile development have become more about images you might have found yourself frustrated manipulating images uploading images trying to optimize their delivery in your website or your mobile app cloudinary makes software development with images simple by combining the speed of a CDN with an API for tasks such as image manipulation uploading storing facial recognition and of course fast delivery for any device software engineering daily loves showcasing products like Cloud because it is so focused it provides a great experience both for developers and the end users of those developers products you can try cloudinary image manipulation easily by going to Cloud mary.com you can upload an image of a cat for example and resize it by simply changing the URL now that is a rich image API
 cloudinary is used by companies like Dropbox Gizmodo Fiverr eBay Lifehacker many more these companies obviously have tons of images and high demand for how they want to manipulate and serve their images is also a proud sponsor of O'Reilly's 2016 fluent conference which is March 8th through 10th in San Francisco and software engineering daily is giving away a free ticket to fluent to be entered into a drawing for this ticket tweet at software underscored daily about your favorite episode or tell us why you love cloudinary thanks again the cloudinary we are proud to have you as our newest sponsor the third problem that reduct solves is that there are no good places for 3rd party plugins to jump in how does Redux solve this problem
 so the way that the store is structured helps with a lot now I'm Flex like I said there could be multiple stores and these stores are just sending off notifications whenever they're done anything I subscribe to them that gives you nothing that makes you don't have a single points to capture all of these notifications what the structure does is it centralizes all of this it basically there's a single store and so you can use what's called middleware to jump in into the process and before the store sends the action down to the reducers you can you can jump in so this is really good for things like a log in if you need to send off a promise to update data we were talking about persisting data this is the place that Redux gives you to do
 is a middleware
 perfect so we've kind of backed into the the finer points of Redux let's talk about the new characters that you introduced in your cartoons to represent Redux relative to phlox what are these new characters that you introduce and maybe you could illustrate how the data flow in redox works for us sure will so you start off with the view still and the view does talk to me action Creed are still so that Telegraph operator but instead of the action Creator sending off the message the dispatcher
 the view of past in I will get the reaction back
 and so the view is going to be the one that sounds off that action and it's going to send it directly to the store the store is kind of done this little power grab and has become the dispatcher chill so if you send the action of the action Creator is created off to the store and then the store is going to send that to the reducer and I think of the reducer as kind of a department of cuz you can actually hat you have a roo producer who's in charge of this department of producers and then you have all of the reducers under at that take care of changing little bits of the state so they recover reducer that just takes care of message you know that the messages that you create a few building Facebook and another reducer that just takes care of event invitations so they break up the work between themselves
 and each reduce or when it gets the data cuz the store is sent the data down to the root reducer the the state when the producers get that data the little part that they care about their going to make a copy of it you're there really concerned about not screwing things up so they're going to make a copy of it make any changes and then passed that cop be back up to the root reducer who will combine them all together to create the new state object so then the store the other reducer gives that back to the store the store has whatever the new state objects should be
 and it lets this new character which is a reactive basically the view binding layer is what it's called it's I like in it too and it Department that's in charge of making sure that the data is available for the UI so this it Department I Jude is Maurice Moss from The IT Crowd in the cartoon the lot of people got a kick out of that the States from the store and automatically provides it to all of the components in the system so that's kind of meat because it cuts down on the boilerplate that code that you need to have in your views and your UI
 show talk more about the advantages of Redux relative to flux because you know when Rita came out it was kind of slow but well. That's all I guess but there was a pretty quick I guess I'll take of Redux as kind of this is the way that you should do phlox so what
 what were the lessons from Redux that people appreciated so much about it that caused it to become the kind of de-facto flux implementation one of the things is that it it can be more predictable because with the way that it works you know these producers are all doing the work the store doesn't send out any notifications until all of the reducers are done with their homework so you just have one notification coming out of the store as opposed to innflux you have a bunch of different notifications coming out from different stores which can be harder to see what's going on I think also the fact that it gives you that single extension point that for middleware to extend that means that other developers can build on Redux in a way that you can't in flocks no flex isn't really much about this not really a library it's just a pattern and so it's harder for people to collab
 great on these extensions so we talked about flocks and Redux which are data handling patterns to keep your user interface in sink but there's still the question of how we get that data from a component to a server or or for trying to get data from a server to a component and this is made possible with graphql and relay it show in your cartoon you draw a graph ql as a librarian could you explain how graph ql works and and why is analogous to a librarian sure thing so grouchy well you can kind of think of it it is like SQL on the way you know it's a way of clearing data but unlike SQL it doesn't actually store the data your graphql API
 just provides a mapping between whatever does store your date might be SQL and might be a bunch of other web API is it might be mongodb it just gives a front tooth in front end. Your code in the browser can talk to you so grouchy well basically if you asked graphql send me the user and the first 10 of their friends and all of the events that those 10 people are going to be going to and the next month Rascal knows how to turn that the grass Trail Surfer knows how to turn that into whatever. It needs to to get the date out of your database and so you actually need to write the code for Rockwell Surfer that we have does mapping between whatever queries coming in from the client and whatever different databases you have on your back end
 show relay makes the connection between the grass you have in a cloud and the grass that the user is interacting with on the page and in your cartoon version of relay you have relay as a as a bike messenger so explain why relay is a bike messenger and relay I like into a bike messenger because I think of bike Messengers is being really obsessed with no speed and efficiency and that's what the query system in relay is really prioritizing so relay
 one of the many things about it is because you've describes the graph that all of the components needed you know in relay you do you build up these things called fragments and so each component knows which fragment it needs which which part of a graph that needs what little bit of data it needs from the cloud and because you know this because you have this declarative description of the David that's needed for each component it makes it really easy to optimize the queries so when it comes and it goes they got some from DUI to the store and the store tells the query system okay I need to stay there the query system does a double check basically doesn't want to spend too much energy so it will go back to the store and say hey do you actually have any of this data if you have it we don't need to get it so the store in the Quarry system will work together to see what data the
 your house and the Furious will take that out of the query and then the query system will also look at any pending requests it has you know if somebody else is already asked for ya part of the graph it will take that part of the graph out of the query as well cuz it knows that part of the graph is going to be coming in soon and so that's why I think of it as a bike messenger because basically is doing all it can to reduce the amount of work it does and then it's going to go back and forth between the parts of the system that actually interact with the server in the store is going to fear Idina between those two if relay is the bike messenger and graph ql is the library and how did these characters interact and and why is that analogous to the real world
 I have a force Parts in the series is coming out on Wednesday which is going to go into exactly this how all of these different parts of the system work together because one of the things I notice in at work Cartoon is that the cast of characters and really have kind of exploded there are so many more parts of the system that's because really it really is a framework where is flex and redox some are patterns relay gives you a lot of functionality it does a lot of things for you it doesn't tell you how to do things and so the relays actually the criticisms only part if there's also a mutation system which I like into an architect and a contractor and there are a few other parts
 that what you'll see in the fourth car shown can you give us a preview sure so one of my favorite Parts is the network layer and that's the tile I cannot chew the operator from The Matrix cuz its job is to get queries into the cloud and get them out of the cloud and so that's the one that actually is going to be working with this librarian the network layer is going to be the one that's the sending request to the craft well server in the back so you can really think of a librarian is kind of like an oracle type picture I guess but what really does is not exactly analogous to it Flexin and redox do people call it basically a react for data
 and that is I think I much closer description then the comparison to Fox and redox make things simple for the user by making things more complex within the framework
 are people adopting the other guy here I hear a lot about a lot of adoption of Redux and react I hear
 slower adoption of graphql and and relay I think it's just because there's a lot of stuff to take up I don't think it's any criticism of them but our are people aggressively adopting these Technologies for a lot of use cases Redux is actually a better solution relay does have a lot of adoption cost that go along with it seems like building up your grass Trail server and
 if you have the kind of application that Facebook has that's worth it most applications are not Facebook though so unless you have a lot of API calls you have a very chatty application that has to make a lot of calls back and forth from the server and you have these big graphs odata you're probably better off or something like Redux so I think that's probably why you aren't seeing so much. Shyn of aggression relay in there also just newer so I think that's a part of it to go there hasn't been too much documentation they done a good job of documenting it but I think that the ecosystem means to do more filling in the details would you contrast relay and Redux a little bit more I'm maybe I'm still not quite getting the difference is between the two sure so
 Redux
 which relay one of the things that it does is it will take the data comes in from the server and we'll actually merge it into a graph structure if you were doing this with Redux you have to actually write this code yourself it actually figures out okay I got these three new things from the cloud and these three new fields on things that I already have and we'll figure out how to actually handle this operation of merging in that data
 and then it was the store automatically starts up observers so it knows when it gets this new data from the cloud it knows that it needs to update certain parts of the front end so it doesn't necessarily need to go through a full rerender it will actually notify certain sub trees and those sub trees Lori render but I'd say it's more just like it it's creating this mapping between the grass in the cloud and the graph in your browser which Redux just doesn't even know about her care about so you know you're talking about relay as a solution for for perhaps products on the scale of Facebook is there a an easy migration path from somebody who starts on redox and and you know like scales to a giant scale application where they would want to go to relay
 well what is a nice things is that there is a thread that ties them all together and that's the idea that you have these actions that are representing your state changes that you have in your system all your interactions with your user and so those you can keep so a lot of that kind of stuff can easily just go straight from redox to relay the the major change that you'll have is one in
 these things called containers you have to write containers that have the query that you need for each component and to you need to write your graphql API so this would be the two things that you need to change if you're going from a redox back solution to a relay back solution but there's a lot that you can keep as you discussed going to be speaking at O'Reilly's fluent conference and give me a talk called a cartoon Guide to the Wilds of data handling in react so we've discussed these different components of the react data handling stack what are the high-level themes that we should keep in mind as we are developing our own data handling flows within react
 so I would say if you're building your own of course one of the things lyric Community is this open-mindedness to new Solutions so course if you see if you have a new solution and give it a shot but I personally think don't reinvent the wheel use one of the established Solutions in your production apps for sure is this is my opinion one thing I should be clear about his these are not the only establish Solutions there's also things like Falcor wish I didn't actually Johnny cartoons about but people do use like Netflix uses but it's red with all of these is this idea of declaring instead of having imperative changes imperative interactions basically making all of the interactions with the system declarative that's one of the nice things that react has brought to front end development is a
 emphasis on doing things declaratively so I think if you're going to be building
 any anything that requires data handling having your actions actually be objects that represent that action is a really good thing what are the common misconceptions that people have about the Facebook stack of technologies that I really was doing with cartoons as addressing these misunderstandings I think because it was people were so it's enthusiastic about it so quickly a lot of people have gotten either yay or nay and I've got really excited or really down on it without actually digging into the details of what things do actually I worked at a place where I was working with some very prominent people and JavaScript and I'm one of the people was really down on Virtual. Even though he didn't know the difference between the virtual Dom and Shadow Dom and I was thinking
 if it's really nice to have people really dig into the details before giving a critique of of different Technologies so I think that that's one of the things that I'd like to do is basically clear up misunderstandings I think that these misunderstandings are in every part of the system though because so much writing about tech is
 is cheerleading as is a really being enthusiastic and throwing around words that don't necessarily mean the things that people think they mean so yes either cheerleading or it's like a serbic overly hostile exactly to scism exactly exactly it's hard to find the measured forms of analysis unless you look to cartoons that I can help with and hopefully it's something that people see is a viable way of talking about things is just looking at them and not necessarily having strongly-worded feces about why they're wonderful are horrible and you're working on a book for I think it's at the title of it so I can covering react JS with these code cartoons what's it what's the title of book a cartoon guide to react
 okay can include things like slacks Redux relay
 so what is the overall scope of the book how how is it is interesting cuz when I talk to people who create educational material sometimes they find like they don't know how early in the program in the world of programming to start like overnight low cartoon guy to react JS you could start with MVC or you could start even earlier and then it's like how deep do you go to you start thinking about like what could potentially happen in the future what is the scope of your book I'm going to try to follow the same kind of passed that a lot of intra books would cover at the LA code intro books but not get into the codes for the code cartoons books I really want to keep it at a higher level where you're looking at the architecture you're looking at the con
 Taps and not actually how you implement them and code it's more of a supplement to things like you video tutorials and any other things I would show you exactly how to implement things I plan to cover in the first Parts things like components just the general idea of components in the virtual Dom how the virtual Dom works and then I'll probably also cover things like react-router generally how you would test racks applications how you would handle CSS and then the last part of the book will be dedicated to these data handling Frameworks on and patterns books have been so successful in their there they're perfect coffee table books they're perfect books to read before you go to bed and there's not a it's not a bevy of these types of books for
 programming Concepts that's true I actually part of the inspiration for this was a series of books that I read when I was a kid called the cartoon history of the universe and I would read those just meow over and over again right before bed and then stuff like that cuz it was fun it wasn't I was learning there was also really really fun to read them and so I ended up having a really good understanding of History I actually there were a couple of questions on the AP exam my senior year of high school that I knew because I have been reading these cartoon guy said that cartoon history of the universe so
 I am hoping that these cartoon books basically gives people the same thing with Cody has something that they even kids maybe I'll teenagers could be reading and it's not taxing but you're learning a lot so you work at Mozilla and Mozilla is of course this this revered open source business obviously but but you know so much open source has come out of Mozilla
 so from that point of view of being at Mozilla and understanding the open-source perspective of Mozilla what is it like to engage with the react Community that's also obviously an open source Community coming from a fairly different place obviously a very positive incredible project but sort of a contrasting open source environment I imagine
 I'd have to say if it was one of the big differences is that react has figured out how to use GitHub for their projects Facebook in Mozilla actually use Mercurial as there are Version Control for the for their their software but he has figured out how to
 manage having both material on their internal stuff and merging things from the Peter using GitHub there isn't actually as much difference between the two as one might think I think that a lot of the Facebook open source stuff isn't necessarily
 it's not as influenced by its affiliation with Facebook as you might think of course it does affect their prioritization of things but I'd say that you have the same thing with Mozilla you know you have prioritization based on on what we what are goals are so I think they're actually they're more similar than they are different yeah I did a show with the Ruby on Rails Creator recently and he was contrasting rails with the Linux Community which sounded starkly different so that was kind of the you know where I was coming from with that question was thinking about but it's but it's interesting it sounds like the there's more overlap
 so what do you see as the future of react
 so you know what I actually I don't know it's so hard to tell cuz things do change so abruptly in front end I think that the future of react is probably in the concepts it's introduced to the front end Community has popularized I think that those concepts of using having the UI be a function of the states instead of
 having things that are so imperative it and so couples I think that that is going to be what what last and the framework of react may or may not fascinating well Lynn Clark thanks for coming out of software engineering daily it's it's been great talking to you I love code cartoons and everyone should check it out code - cartoons.com and I'll see you at the O'Reilly fluent conference and I'll have a shirt for you thank you very much
