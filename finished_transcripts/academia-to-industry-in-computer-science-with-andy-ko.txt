Transcription: University Research produces numerous papers about software engineering unfortunately many of the problems explored by the software engineering research papers have no actual application in the real world these papers fall into the black hole of software engineering research and Eco is an associate professor at the University of Washington when he worked as CTO of answerdash he experiment it with some of the software engineering research coming out of Academia and Industry today on software engineering daily we discuss Andy results our conversation spans the topic of Education big companies and startups but first a quick word from the sponsors that keep software engineering daily alive
as a software engineer you have tremendous leverage in the employment Market every company need software engineers and these companies are all competing for you the engineer a scarce resource but as an individual engineer you don't have much insight into this incredibly opaque Market that's where hired.com comes in her.com assigned you a talent Advocate who works to understand your needs and works to find you the perfect job go to hire.com se daily to try out the platform today and get a $2,000 bonus if you find a job the companies on hired compete for you the engineer and then make bids to win your talent these are companies like Facebook and Uber companies that we know are on The Cutting Edge of engineering because they've come on software engineering daily to talk about their text back I've used hired personally and I've experienced firsthand of the ease of finding a well-paid enjoyable
this was way better than replying to LinkedIn messages from uninformed recruiters and was also certainly better than using a job search engine to find a great job and support software engineering daily go to hired.com se daily and get a $2,000 bonus upon finding a job check it out it would support the show now let's get on with the show
indeeco is an associate professor at the University of Washington he was the CTO of answered as a company that enables online businesses to provide instant answers in their applications and e-commerce stores Andy remains involved with answer dashboard has shifted his Focus back to Academia Andy welcome to software engineering Daily Beast recently called the black hole of software engineering research this post was motivated in part by your work as CTO of a startup answer - tell me about answer Dash and your responsibilities as CTO there yeah sure so I started about something that came out of research and so this was a project that was funded by the National Science Foundation and I had a PhD student that I was killed by thing with one of my colleagues Jake will rock also here if you never
did Washington and when we decided to spin out the company that's about the time that those rolls got decided I was really the hacker Jake was really more of the charismatic CEO type so we just decided to put ourselves in those buckets and go off end and build-out are roles and so we spent a good solid your fundraising selling on some potatoes that I've written and eventually venture-capital so when I when I was the CTO really during the formative years a big company it men's pretty much the full range of the things that have to happen in a small startup I was not only building the 1.0 products hiring Engineers managing the team developing are a stack of worrying about what should the company culture would be like in culture be like you too of course because when your three or four people starting a business there's nobody else to deal with laptops in hardware and networking and WiFi so every single thing that was technical in nature was my response to
I was a big change for me coming from Academia what were the biggest engineering challenges that you were encountering it answer - they are actually saw it quite a bit about this I went into the business not only deep diving in as a CTO and as it as sort of engineering manager and and lead engineer but also was a scientist in every single day and spend about a thousand words worth of reflection at the end of every day trying to think about what was hard about today what was difficult what were the biggest challenges and it really surprise anything to me about all of those reflections of the gun back and read them over the past couple of months is that very few of them were technical challenges challenges were challenges that were interpersonal in nature or are they were they were. Coordination or they were about decision making so an example is when you're thinking about engineering from a product respect it what should we built what order should we do
what are we building at 4 why are we building at these are not things that that there are certain answers to you might have a little bit of data you might have some insights from sales conversations and and these are the types of things that you're dealing with a little bit of tiny data and a whole bunch of opinions and a lot of very opinionated people how do you work through those decisions how do you come to some conclusion about that and that's not just a matter of actually having logic and reason to decide these things Bud principles and and gut instincts and hopefully some sort of hierarchy inside of your company so when you can't come to agreement as a group there's somebody to just make the decision for me to make the call and move forward so those types of things early on and it can be very very challenging
and in your work as a CDL you tried to bring Shopper engineering Research into practice taking some of your experience and Academia into the industrial realm what kind of research were you trying to bring to answer - yeah that's a good question it's sort of begs the question what kind of research exist and software engineering research and so it's missing a couple things about that since the 1960s when the National Science Foundation started funding research on software engineering a lot of the big questions were about I'm tools and tools and process how do we build the right tools in the right programming languages and the right infrastructure to make project succeed and as that has revolved sort of time in line with some of my experiences is CTO dancer - which is it's not just about tools it's also a lot about how you structure a team by instructure the communication between engineer's on a team
are you facilitate decision making all of those things and so those are really the two categories of research that exist in Academia now it's a lot of invention for new technologies new languages new structure and platforms for solving technical problems in Suffern gineering but also a lot of social science about what does it mean for a teen to be productive what kind of communication has to happen how do you align the technical dependencies in some architecture with the communication dependencies that exist on your team so one of these really interesting studies for example that directly buried upon how we structured are working answer. She was a study that was done by Tina Microsoft research over in Redmond and they were asking the question what is the relationship between the distance between Engineers really sort of are they sitting next to each other in a room all the way to are they in completely different countries and time zones so what is the relationship between is that kind of distance and the defect density of the components that they work on does it matter
Microsoft invest a lot of money and having a bunch of buildings were people are really close to each other or should they just say screw that it doesn't matter there's no effect on on defects and we should just distributed probably as we can find out where the best Engineers are and make it work through remote communication Technologies detox but that was because in many cases a lot of the strategies that the engineers have used more compensating for the lack of proximity right so they work extra careful when they were working with people remotely because I knew they had to be so they were really smart feedback loops that Engineers how to create to do that and so when I brought that that line of work and they're sort of dozens of study about that question I'll probably hundreds by now when I brought that into the end and we were trying to make a decision about do we allow Engineers to work from home and how frequently and how regularly and what are the consequences going to be
detox that we release on that those are the types of findings that I thought were we're really highly relevant to informing some of our our policy and and really the bugs that we were shipping show when you're accessing This research and you're thinking about what you want to bring into practice what is the Delta there like how do you how do you look at a paper in and then figure out how to implement it and what were the the challenges of actually implementing something that you read about in a software engineering research paper really good question there are many challenges in using research I'm even research that's really well done really rigorous really directly applicable to questions like this in practice you know an example is when you do an experiment and research on experiment will often be like an ad test will tell you should we go this way or that way
problem with a research paper that just tells you which way to go A or B left or right is it doesn't really tell you why and if you don't know why you can't really generalize from whatever place setting that paper was studying to your sitter then we were taking that paper about I'm cool location and distance and a defect you know it was up to my engineering team in myself and everybody in the company to really think about what makes us anything like Microsoft here we are you know 10 employees 5 Engineers that's nothing like 10,000 Engineers across the lake spread across 120 buildings so is there anything we can learn from that and so so the only way to really make any of that researchers to really have theoretical explanations for why it would be the distance matters and only then once you have that really deep explanation of of the mechanism by which distant matters then you can start reasoning about well if that's the mechanism that mechanism
Microsoft is going to apply here so we can make a prediction about what effect would have in the small setting even though it was explored in a larger setting and hearing because they don't have these social science backgrounds haven't gotten to the point yet where they really are developing these deeper your medical explanations for the findings that they're they're seeing the black hole of software engineering research what does that black hole refer to
it's really that sings can't escape the cat escaped Academia and it's examples like that so when I brought that paper to my team I'm talking about distance I was essentially to take this evidence and saying I'm going to make a policy recommendation based on this evidence I'm going to say that that for this team collocation matters because a lot of our Engineers don't have a lot of experience working remotely with people you're not going to be able to develop those strategies for compensating for distance so we should work together get to know each other first and as we develop some of the strategies slowly build up some expertise on working remotely before we just flip a switch and having have everybody do it all at once that the black hole part of that is is was really that Gap so I got questions and push back from from everybody things like it doesn't that mean that we're going to lose our Engineers because still feel like we haven't given them enough work-life flexibility how do we really know that these findings have any impact on us right Microsoft is not
like I said apples and oranges this study is useless there's no way for us to interpret these results for our case and so it's between these these findings that are very much looking at particular settings and try to generalize from them and somebody in a company trying to figure out what relationship is that has to their work and so that black hole is really that distance between those two things okay so I want to get into the the elements of this paper or this post you write that many of our engineering problems simply aren't the problems that software engineering researchers are investigating this makes sense to me that this would be the case in in Academia and I definitely want to hear your thoughts on that but I'm more curious about is you know somewhere like Microsoft why is there a disparity between what Microsoft is looking at
and what actual engineering problems there are cuz you would think Microsoft is an engineering organization it's got a bevy of of engineering problems to choose from and it's got close proximity to actual people doing software engineering so it seems someone different than an academic research yeah and it seems like a completely reasonable expectation that there be a closer alignment there and they're actually a lot of mechanisms that Microsoft research uses to do that I was an intern for about 3 months at Microsoft research back when I was a graduate student and a lot of what I did was actually just leverage the fact that I had a Microsoft badge to spend a lot of time in a lot of Engineers offices I did a whole field study going out and and doing direct observations of the work they were doing and I could only do that because I had a batch I couldn't do that as an academic couldn't do that as a researcher so there are things there that many of the researchers have leveraged examples are things like
some of the seminal work on non formal methods and applying it to the device driver on validity checks so Tomball that a lot of this work at a bunch of really fundamental work to try to prove that drivers weren't going to crash and found a way to apply that to think it was Windows 2000 and so that became part of the device driver a verification process so there it's a lot easier for them to take some some basic invention and find an application for it because there's a massive number of engineering teams in one of them is likely to have that problem and they can go and find a way of spending it out so it wouldn't their model is his don't go and take a year off for Microsoft research and get it into product so that does actually happen quite quite a bit when I say that that a lot of the problems that engineering summer engineering researchers are working on don't have as much relevance to to practice I'm really speaking more broadly about the culture
software engineering research as a computer science research discipline there's a certain type of research that is viewed as valuable and most of that is invention create a new language create a new tool find a better way of detecting security vulnerabilities these are the types of things that computer science professors are valued for you and that's something and that's what gets you a research topic ation that's what gets you tenure that's what helps your students get untenured positions in Academia and in computer science there's not as much as value placed on understanding the social dynamics of work for example discovery on that space and I talked in the post that as well about you know it's mostly a training thing to computer science researchers generally don't know how to answer those questions they don't get background and how you would go investigate some of the coordination and communication challenges that happen in teams so
even if they're interested they don't always have the skill set to apply research methods to get answers to those questions and there's not really anybody else that is that has those skills and is also interested in software engineering I'm with a few exceptions myself included in a small set of us maybe I would say 1520 researchers in the world like myself once we're going off and looking at some of those questions thinking about the the roots of what you see is his problem you write that college courses don't teach many classes on software engineering why aren't there many classes about software engineering and how does this lead to the types of affect or impact that you are describing this post
that's a great question to I think that computer science curriculum really across not only the United States but across the world is still very much in development it's not something that is a lot of agreements on there there are bodies like the association for computing Machinery the ACM just a professional Society for for computer science that have put together I'm curriculum and standardized it in some sense most computer science departments don't necessarily follow those standards they do exist as a sort of a target for a lot of departments to reach but it's very slow in getting there and so things like that curriculum standard have pretty substantial portions of software engineering in in there but they really are just a small little pieces are not programs that are designed to train engineer is primarily one of the metaphors that I left on use when I'm talking to students about this is yes I kind of think about the difference between let's say sizzix and
engineering right you're a physicist physics major not going to learn how to build engines you're not going to learn how to build Machinery you're going to learn how to do the types of things a mechanical engineer does you learn about the fundamentals of the series behind all that engineering but not interrupt me there like this is so this is how I think about a lot this idea of like Fury versus practice and her first hearing about this dichotomy a lot in computer science classes and what I don't understand is after spending some time you know in an industry after getting my degree what it seems like to me is that in computer computer science is kind of the field where there's not much of a dichotomy between theory and practice because all of the theory don't the way the computer side to structure
and how widely computer science principles are used their there really is very little difference between theory and practice stuff that is theoretically relevant instantly gets implemented into something practical would you say that's accurate
 some interesting claim I got to think about whether or not I believe that it's actually that fast will so what are the areas of computer science that seem more explicitly theoretical such that it would be disjoint with with what is considered practice of an algorithm or add data structure or a way of computing something and the packaging of that in a useful form so examples so I wrote a paper that was trying to look for a fundamental algorithm that allows us to take all of the verbal natural language on the web about things that people are encountering with software so these Exeter encountering usability problems discussion forums or tweet for people are saying like I just click this button on Firefox then it exploded right
 start to aggregated so that you can get these nice data streams of every single problem people are in a countering because in most cases people that report these problems as bug reports you can't find out about them taking all their natural language and trying to synthesize it aggregated into these really useful data streams right so I'm thinking about products one of those really critical needs that we had for analytics back-end for a customer's anything on their social media and try to give them that same sort of understanding so here I was in this moment as a practitioner trying to decide can I use this research that I myself have invented right I know exactly how it works I know how to rebuild it I know every single part of it I don't even have to read the research paper to do it cuz it's all still in my head it's fresh and I sat down for about an hour and try to figure out what's this Gap what do I have to do to be able to make this work in our product
 and there were so many little tiny questions things like scalability concerns I haven't investigated which NLT stack would I use to actually process all of that natural language text which ones actually had a robust maintains community that we're going to develop further open in LT saying am I going to do I know TK where where is the investment being made in unity and what I ended up with several hundred questions that had no answers I realize that yeah the basic research was really really directly applicable in this situation but without all of those other smaller practical details figured out and packaged up and something I could just drop into our product I couldn't do it it just I couldn't justify the risk as as the product lead deciding to invest in answering all those questions because there was too much to know
 so you mentioned the term basic research and I hear about this a lot when it comes to biology or chemistry as much about computer science and maybe this will help us come to a more concrete conclusion of the theory versus practice what what defines basic science research in the domain of computer science
 when I think about that it's awesome comes down to questions of generalizability much of the knowledge that we produce in practice in software companies anyway questions that we answer for example how can I make this API scale for this this product that I'm really sick the answers to those questions are relevant to that moment to that company for that Technology stock maybe for the next year maybe for the next year or two and it's not the only one is answering questions that don't have answers I don't have answers it's just a question of whether out the answers are true and relevant for a period of time usually it's the practitioners are answering questions that are relevant to them in that moment for a short time Horizon 6 months to a year maybe a couple of years but it's going to change the questions going to change academics like myself doing basic computer science research
 things about Computing that are going to be relevant ideally forever and I have answers that are true for ever and that necessarily means that we have to strip away all of the Practical details all of the context of today and try to sign the sentimental part of that? Really is relevant forever and the fundamental answers that are really true forever
 do you think that really possible that cuz there's so many moving Parts in computer science and software drink like there are some fundamentals but it seems so hard to pick those apart like for example you know you I think in your in your your post the black hole of software engineering research you talked about an article about remote work for example and I think about remote work 3 years ago versus remote work today it's dramatically different even just something like slack completely changes that the mathematics in the fundamentals and I don't know maybe it maybe this is maybe that's maybe that's a commentary on the half life of that specific research paper rather than the the Entire Computer Science research realm as a whole
 yeah there's a tree it's really a question of a distraction ironically right so if somebody we didn't go do a research study computer science looking at something like slack and looking at the particular foreign citizen features and capabilities at something likes like has it wouldn't be relevant in 5 years right maybe something else what we try to do as researchers his take those questions that we might have about slack and generalize them to a point that they aren't about slack but they're about something that's fundamental & More broad than just the affordances of slacks one example is what is a question about slack that is equally relevant to a question about IRC or other types of groups group chat mechanisms it existed for decades that people have been using to support software engineering I mean I don't know
 still question might be something like what is it what are the mechanisms that are afforded by broadcasting to a channel as opposed to what sort of having a craft a message that is directed towards a specific set of people how does that change the Dynamics of communication in a software engineering team that's not specific to slack that's not specific Tire see but it is something that's true both of them and will be true for whatever is invented after slack that has slightly different features yeah that's a really good approach to finding a Timeless topic to approach if you're doing some sort of research
 Engineers are always looking to simplify 2 simplify testing and deployment Engineers turn to code ship could ship is continuous integration and delivery is a service with codeship your tester execute against your code automatically whenever you push to GitHub or bitbucket on software engineering daily we've done several shows about devops and continuous deployment is key to devops it's a great way to break down the wall of confusion between development and operations managing your own testing infrastructure is painful that's why you want a service like code ship to do it for you if you have a huge number of test you can use code ships parallel CI to run all your tests in parallel coachable spin up containers on their own infrastructure to run your test in parallel if the code passes your test coachup will deploy it automatically to your users companies like product hunt are already using coach up to speed up and simplify development to sign up for free and start shipping today
 go to code ship.com or to try out code ships new Docker platform go to coachup.com Docker read this post that you wrote and I read some of the responses e security and he was saying that there actually is a lot of research that is relevant cuz how you say you're just basically that a lot of the software engineering research in Academia and I guess otherwise you can place like Microsoft research perhaps is is not not as relevant and Nick p security was saying that there's actually a lot of research that is relevant but it's behind paywall actually inhibits the information flow from percolating out what do you think of this hypothesis yeah I know I think there's there even papers in Suffern engineering research that have
 that's irrelevant it's a great one you serve ate a bunch of Engineers and and taught them the results and discoveries of papers and kind of assess how relevant those discoveries Warren actually found that there was this broad set of things that were directly relevant to their work indirect ways and then sometimes abstract ways but always useful so it's not the case I think there's nothing out there is plenty of work that's that's greatly applicable I'm just not always accessible like Nicholas pointing out with with the table issue and it's a it's a big debate in in Academia now not just in computer science research but much more broadly about how did we resource and fund sort of the economic structure of making this material available is not free to put something on the Internet it costs money there's bad with issues there's editorial issues there's all of the volunteer time that we give as academics
 where to edit and organize and Kool-Aid all of this material and put it out online to make it accessible I mention ACM before they are professional Society they have a message to digital library for ACM who pays for all of the stuff to make the hundreds of thousands of research papers accessible so maybe a terrible idea for how to pay for that but there has to be some alternatives to it to resources is it a tax that we put on the public so that you know they're paying for it. We increase the budget of the National Science Foundation in the National Institute for health so that they can pay for it and they're giving a grant every year to all of these journals and digital libraries to pay for that staff it is not a free sink so it has to come from someone that's that's really my view on it so okay so let me ask you a kind of
 tangential question so you know I feel like I've gotten so okay the value that I've gotten from academic research papers tends to be on the side of like very very concrete yo paxos I don't know something like big table that's on sale Google paper but you know the academic like but the stuff like that's like rooted in cultural or practical stuff like here's some work we did on working remotely I think that the the valuable information that I've gotten has been more out of like blog posts and medium posts and and you no comments on and discussions online it is it is it possible that that type of material is more relevant for people to read rather than these for dry white papers yeah I think there's a
 really open debate now happening about what the right form for disseminating some of this stuff is because we know something intended for the broad topic to read I write them to my peers to develop and build knowledge and it when I write to the public and disseminate some of that knowledge it is in the form of blog posts it is in the form of tweets it's something that I put you know maybe in a video on YouTube somewhere and it's that type of material that I think really distills and summarize synthesizes these things into really consumable pieces of knowledge that really summarize everything that we've known for the past 15 years of efforts that we've done PDF stand are white papers and other things that we Britain to ourselves I do think that's the right the right channel for the cemetery yet there are other structural issues and quit with the fact that you know my my job is a tenured professor is
 research teaching and service but it's not dissemination I don't get it paid to disseminate I do that voluntarily I do that you know on top of all of my other duties and so when I go off and when I'm talking to you right now this is not something I'm being paid to do this is something I do on top of all of my other job responsibilities and until I can really decides to incentivize that 4th activity of really taking the work that we've done and signing a way of disseminating it to the world I don't think we're going to make a lot of progress on this because it's going to take a lot of really intrinsic volunteer work for us to do that
 so tell me more about the kind of responses that you got from the community after writing this post
 yeah I got got many more responses you know in person and also back channels on Facebook then I did published in public on the blog because people are always feel safe talking about some of these things because I was very critical and self-critical of the field of work that I work in so some people took it personally right some people thought that I I didn't barely treat the the efforts in in tenths of a lot of the work that's happening in the field other people took it very constructive way and thought about what can we do. Actually improve some of these things and so there are really concrete things that have come out of it things like how do I change my software engineering class to be more relevant and drive on this work in more ways than Apple is a lot of the classes that academics teaching software engineering really are surveys of research tools and inventions that have been created how can we brought in those glasses to cover the
 starter set of knowledge that we have so that students were taking those classes learn about everything that we know as opposed to just once tiny sliver of what we know in those classes so traditional Channel how do we get this into courses a lot more of us now or teaching massive open online courses mooc song things like her Sarah and Udacity so getting that same material into those large-scale courses probably broadens the reach of it quite a bit so I think that's where a lot of the impact is going to to go is finding these channels through through Academia maturing and developing a new and interesting ways and trying to get the knowledge that we already have out through those channels
 I love to talk a bit more about answer Dash and some of the lessons that that you've discussed from from your the post that you wrote I put put it in more direct contact to talk in more detail about what answer Dash is the hopper to so answer - started with this this fundamental observation that when people are browsing on around on the web using a web application or they're going to be Commerce store there are the number of questions that people have about their experience just how to use a UI of an application your heart how to answer some questions about a product that they might want to buy and maybe you go post a question and some technical support Forum maybe you go browse through 10,000 knowledge base articles on the Google Help Center what happens in most cases is that tech-savvy users
 Google for an answer and and if you go Google for an answer usually find the answer in the seventh search results in the 72nd post you know I've always had this experience is finding out that was the right answer to my question I'm I'm set now users would never go to that extent to find that answer so we were trying to sell this problem getting people answers in context right when they have them with his little effort as possible so that the research started off with trying to answer this basic question of how do we get people to express the need that they have without having to actually verbalize I need the house because the fundamental problem with verbalizing the problem that you have is the vocabulary problem and that is that for any particular saying in the user interface or any particular part of content that somebody tries to describe there are so many different words and synonyms and phrases and descriptions
 people use that the chances that the one they chose happened to be the same one that's index for a set of documents are extremely small even if you choose the best one the best you can do is something like 10% of people are actually going to find that content so what we were looking for was a way of doing that without having to have people Express their need with words and instead of spread came up with was instead of having people type of query to search a collection of Articles we would just have something in the interface and use the interface itself as a form of control vocabulary what we found is that for any given problem that somebody had there was usually one or two things on the screen that they would choose to represent that need and that they wouldn't choose for other kids so it was a way of segregating all of the content across the UI of the screen and it turned out to work really well we launched this on a bunch of internal websites at the University
 we got some great results people get users left-handed companies loved it because their support tickets went down and we started telling a story through a lot of Serial entrepreneurs around the city like okay for this house that sounds great so that was the pitch that we made to a lot of the local Venture capitalists and and we started the building of the business out of that so now that the product is at a point now where it's not even just the sort of point to get help feature but we do Dynamic popular questions on a page level so anywhere you are on a site we can tell you exactly which questions you are likely to need answers to without ever having to express in and you just click on our Tab and see all of that content we do I obviously traditional text search most people don't use it it doesn't work very well as we knew going into the company because it's not likely that people choose the right words and a variety of other kinds of search technologies that we have now
 and all kinds of businesses big and small we see all kinds of wonderful effects like cutting support tickets by I buy large percentages even increasing conversion rates on things like e-commerce stores where the barrier to somebody making a purchase with some knowledge they didn't have about a product or some anxiety they had about a return policy and by exposing those answers in contacts without having to have them navigate somewhere else to get the answer are much more likely to buy the product that you developed was based on Research that you did in the University so what that put into context of the of the rest of the conversation we had you know we've talked about the elements that make
 research Timeless enough to to have an impact beyond the immediate scope of the immediate temporal scope of of When It Was Written what you know when you are doing the research within UW that the led to the the product ization of answer - what were you thinking about that research that was Timeless that that that allowed it to to escape the black hole of of software engineering research so when we first started we were strictly interested in that in that information retrieval question so how do we take something somebody has pointed to the other user interface and retrieves relevant content and that's really something that should be a fundamentally useful answer whether it's a webstac whether it's user now
 you're not going anywhere there's always going to be something that somebody's looking at even if it's VR even if it's a three-dimensional spherical you are still give me something people can point to and the question is what kind of context we grab from that to relevant retrieval of documents so that's that was the basic research question when it came down to turning that into a business and a product you know obviously they were a vast number of questions that we still had to answer not the least of which was in what side from this being useful for end-users is this something that that software teams and end product teams would actually adopt what would be the barriers to adoption how much do they have to change about their user interface implementation to adopt it it turned out that the way that we built it just by chance to change anything it's just a third party to figure out what's on the screen and allow people to stuff
 but they were all kinds of other challenges and trying to build a business around us who would pay who has a severe enough support ticket volume and scaling problem that they would actually feel enough pain to give us a bunch of money to reduce the support ticket for him who believes in the idea that giving answers to people where they have the question would actually increase conversion rates on an e-commerce site it turns out that a lot of e-commerce digital marketers don't believe that hypothesis they believe that the best way to get people to buy something is to have a beautiful product page to have the all of the information on the page itself rather than in some widget that exposes additional information building a business is really about trying to answer all of these questions that are very much about the market the police that that potential customers in that market have the barriers that there are
 to getting somebody to adopt something it turns out that the product as it is right now as we envisioned it way back when we started the research actually isn't that different from the inventions in the prototypes that we made in the research project the only difference is that we have all of this knowledge now of what state of the market right now how do people think about support how they think about conversion rights what beliefs do they have about what causes people to buy or not buy and do we have marketing messaging that convinces them that are new technologies is a better way of solving that problem then some of the traditional Tools in their toolbox
 why did you transition out of your role as CTO an answer - back to Academia full time transition so when Jake and I we were both The Faculty that the transition to do it when we are Dean at the information school and I'll colleagues in the information school as well and try to talk to them about you know what what should this look like we actually don't want to disappear forever we didn't want to give up tenure to to do this we eventually wanted to come back for academic jobs and then we started talking to venture capitalist difficult conversations but it's much more consequential way right there's a timeline we're going to be here for to make this work and so we had to find
 comfortable with the idea of the two of us really being the ones that nailed product customer fit and then handed it over to more seasoned Executives the scale of the business and so really need a way that we frame that holds first round of investment was going to go off and figure out what the product needs to be cigarette for the customers are figure out how to sell that to them and once we've done that we're going to go and spine people who know how to take this from a 15-person business to 50% business from a 15 customer business 250 customer business so just keep on ratcheting up those those orders of magnitude just having a few months ago that we were out for 3 years that's about how long it took for us to figure all of those things out and get a product that we can sell the customer successfully and end at scale
 sampling the world outside of Academia the industry world and building a business was there ever a time where you were like oh this is just better than Academia I'm just going to stay here for the rest of my life
 in small ways and I don't think that that's an answer that can apply universally to everybody and it's really very personal thing what what you enjoy as a person what kind of work environment you enjoy what kind of problems do you like to solve an individual human being and I think that I personally had a pretty strong sense that I would enjoy it a little bit less than Academia and I was surprised to find some things that I did like about it I loves having a team I love having everybody focused on the same trajectory in Academia all of us are moving in different directions and so it doesn't feel like much of a team right where I working together on the same things in all cases I love them gauging with customers and really learning about what their problems were and how we could help solve them I think this is just really interesting for me to see all of these Dynamics customer needs are
 difficult it is to find some common pattern of them but when it came down to it for me personally I mentioned this difference before between questions and answers that have short Housewives versus long ones I'm just a lot more engaged and curious about the questions that matter forever and the answers that matter forever then I am about the ones that matter in the short-term about the research at companies like Google and Facebook and Microsoft it seems like they're increasingly or we're just have always done this type of research that is increasingly long-term focused and it looks something like basic science why would you choose to go back to University Academia rather than like Google research or something yeah I think that's a great question to it's really almost a third type of research that starting to emerge
 DARPA director of the Department of Defense research agency Grand challenges with very specific problems that had so many unanswered questions that research would be in an editable byproduct of trying to answer them so classic example is a lot of the driverless car stuff that was happening back in the late 90s and early 2000s that eventually led to people like Sebastian thrun leaving Sanford and going joining Google and snorting driverless car projects that was when she left DARPA and join Google and started Google X that's the one of the forms of research Labs that they have now a complex problems bring a bunch of smart people together and have them try to answer them over the couple a couple of years and see if products come out of them as a very different kind of works
 research and places like IBM research too much less publication focused much more problem oriented and it has because of that different features so one of the features is that it does much more productively lead to product because it's aimed towards a particular application what it doesn't do is lead to knowledge so I'm a friend Johnny Lee who's been a Google for several years now he was at Microsoft before working on connect together and and he was much more excited about the idea of working on specific problems in an R&D sense though so I'm just love being at places like Google where he can tell a big specific problem have a team of driving towards solving it and not have to spend the time to write about what they discovered in the process now you know that's good for society in the sense that maybe it leads to transformational change in certain industries new products that we get to use all of those things
 I never get to read what they discovered
 you don't get to read what they discovered we never get to learn about what they know now that knowledge is going to be embedded in those people and in those products and in those teams and possibly never be disseminated outside of that company and never will be hot by anybody else that knowledge in that product doesn't work somebody's probably going to have questions all over again which to me is in the very efficient use of that scares intellectual Capital that we have in humanity so it really is a huge sort of trade off in how do you structure that knowledge production right you ain't it towards product and then hope that that product survives and thrives in the world and that knowledge somehow leaks out from it
 disrupt your things in a way that leads to the explicit sharing of knowledge at the sacrifice of product and impact to very very different Visions want to start pulling to the close of this conversation I want to talk about some Computer Science Education Concepts because you're somebody who has had a toe in the water of of Academia also an industry and it seems like you have a fairly measured approach about the stuff what are the the ongoing seems we've talked about on software engineering daily is the the coding bootcamps and the idea of what is the value of a computer science degree from University what is it what is the value of spending four years in an academic institution versus spending 6 to 12 months doing
 bootcamp-style education so is the high cost of a computer science degree from a college still worth it
 yeah that's a very relevant question now I know for hundreds of thousands of people probably Millions you are really entertaining some of these are we just had a death in color I'm president is Coursera here speaking on campus yesterday and a computer science department in a lot of their revenue in a lot of their students coming in they are taking those courses in the same way that people are taking bootcamps to skill-up tived start a new career and find a job as a data scientist as a developer you know whatever it is that the skills will help them and she inserts definitely
 highly pertinent saying it's happening in the world today you know whether or not I can give her science degree is worse that I think actually in my experience on both ends of practice and and and teaching is actually a question about who should do the training because explain this when I was hiring Engineers I had a choice between those two times that it's one that had a classic computer science training one that had done a boot camp for 6 months and maybe an internship
 and we'll both of them could code and both of them could produce software efficiently and effectively
 I spend a substantial amount of my time and so did my other Engineers is computer science backgrounds training those bootcamp trained Engineers on the things that the boot camps in teach them a lot of time teaching fundamentals about Steve ability and complexity I spent a lot of time teaching basic concepts and software engineering and architecture like components and encapsulation type Siri I had to teach them about things like free conditions imposed conditions on functions and why you would want to write those and hopefully have some tool to verify them for you in your source code what does the advantages of static types are instead of type checking systems are in a lot of those things that you would only ever really get in a longer exposure Cheetos fundamentals in computer science and yes they are going to learn them on the job but it's essentially saying we're going to shift all of that training to Industry
 instead of Education
 is industry good at teaching people not really the correct bertice I mean as a teacher I enjoy teaching my engineers and I spend a lot of time teaching them and so did my other Engineers but well really hard and very rare and he gets really really well measured but the the thing that I really like about the food stamps is that you see such a density of information conveyance between the teachers and students and
 these teachers are particularly credentialed other than that they've done want to hacking it done a lot of work and they understand it seem to understand stuff really well and the college I feel rest on this presumption that credentials mean something and so I don't know the whole situation seems still very fraught to me I can appreciate that there are elements of boot camps that their elements of of University Computer Science that are not taught by boot camps I totally get that but I see this like huge did this huge gradient between academic computer science and the boot camp world and it's like an unexplored gradient of different types of course working and stuff we could do and I think it's getting explored but I guess I'll close with this question which is what do you wish that you could change about
 University education system in grateful for the existence of boot camps and the liberation of other ways that people can learn about Computing including things like Coursera Udacity another online courses and even some of the things that researchers have created my friends at University of Rochester the online python tutor some of the work that we've done for teaching Computing online for programming games this massive diversity of alternatives to University education what is doing is its incentivizing us me to actually do better a teacher and teach not only things that are more relevant and and more directly applicable but actually teach in a way that's more effective than all of those other forms can write think about what are the what are the privilege things that we have at it at a university that we can do that those other places can't do we have a cat
 attention of a cohort of people who are all really engaged in trying to understand the fundamentals of of computing that's not a contact that happens in a lot of other places it doesn't happen I'm online is easily it doesn't happen in a boot camp as easily which is a very targeted kind of training what are the types of things we can do with our space center expertise that we just haven't leverage dinner teaching at because we haven't had any Market competition to do that so I think this is going to be one of those sort of raises all boats types of situations writer when boot camps nailer instruction and and they are incredibly valuable and useful and sort of their operating at Peak efficiency that's going to bring up University education and and those different types of knowledge that that students getting those two different settings are still going to be different but I think that it's going to raise the quality of what we do in Academia in the same way that they Coursera has been a lot of that as well so having on University
 go and teach of course on Coursera breaks a lot of the assumptions about what has to happen in the college classroom in a lot of those professors go back to their institutions after they've taught those online courses to 100,000 people and they resync everything they've done that question every assumption they've made about what a lecture is whether they have to do one why why choose any of those particular pedagogics so I think I'm going to see you in the next 10 or 15 years really a transformation amongst professors like myself in how we think about what happens in our classrooms and how we use that time. Space and all of that student attention to really profoundly changed how people think about and use Computing and they're working daily Lots
 that's a great place to close off Andy thanks for coming out of software engineering daily suspended super interesting conversation I appreciate your blog post through Chase appreciate your work thanks appreciate it yeah I really enjoyed it thanks a lot for having me on
