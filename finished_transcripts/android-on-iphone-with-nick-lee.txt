Transcription: the Android operating system has been put on an iPhone and today's guest is Nick Lee who accomplished that strange feet in the past Nick has put Windows 95 on an Apple Watch as well why would you do something like this but more importantly how do you do it in today's interview with Nick we talk about the technical challenges of bringing Knicks bizarre sense of technological irony into reality with the Android operating system being put on an iPhone but before we get to this episode some quick announcements the software engineering daily Community has started working on a project called software daily we are building an open-source news and information site about software and if you're a web developer whether you're working with react JS or flux architecture or nodejs you might want to check out the software daily repo at software daily.com and if you want to contribute to software engineering daily in a different way you can also find out how to become a host
for software engineering daily you can find the links to the slack Channel I can find links to my Twitter account in my email and these will be on software engineering at daily.com can also sign up for the newsletter on software engineering daily.com which features the content that the software engineering daily team is checking out on a weekly basis and with that let's get to this episode about Android on iPhone after a quick message from our sponsors
 I had a crazy idea couple weeks ago it's a photo sharing app that only has pictures of cats when I finish my photo sharing Cat application I will be deploying it to linode because Leonard is the fastest hosted Lennox provider I don't want to get locked into a proprietary platform it's going to overcharge me as soon as my LPS popular I just want a fast Linux server with simple pricing go to lenovo.com SE daily and get $20 in free credit today plans start at $10 a month so my free $20 will be plenty to launch my cat photo sharing app once I need to scale I can use tools like a node balancers and backups and the note has built-in dashboarding and metrics so that I can see the traffic to my linode servers and I can understand how many of my users are posting cat pictures and looking at each other's cat pictures
 go to lenovo.com SE daily and get $20 in free credit today that the plans start at $10 a month such a great deal thanks to linode for sponsoring a software engineering Daily Now what's going on to this episode
 nickel is the CTO at 10 Digi Nick welcome to software engineering daily one thing on another and by that I mean you put Android on an iPhone and you also put Windows 95 on Apple watch so I want to talk about these things as well as just the overall ethos of why you do this type of stuff so let's start with the Android on iPhone you put Android on an iPhone why would you do this okay so this is kind of the overarching theme of all the all the YouTube comments I've received all the hate mail I've gotten has pretty much been the kind of the The Motif has been Y and the main reason is that there I don't think there's ever been to platforms at least in my lifetime that I've had such polarized audiences that with such animosity for each other as Android and iOS so it just seemed kind of natural to
 smash them together as hard as possible
 okay so it's natural maybe from a ideological standpoint but does it have any technological usage that's that actually would be practical I suppose does I mean you know one of the attributes of Android that that Campo is pushes is that it's open and you can do anything with it and you don't have to you know there's no app store approval process of the same kind of magnitude that Apple's is so you know the ability to kind of run whatever software you want to do things like tethering you know that there are actual practical applications to having Android available on your iPhone I level how do you do this how do you get Android on an iPhone okay so my initial plan was to try to figure out some way to actually run it on the iPhones Hardware directly obviously that would have been the end of the
 because of the most ideal situation because you wouldn't have to deal with the big bulky case that needs its own battery and its own Electronics but that ended up being initial look into the beginning to do that would have been really complicated you know all of apples everything end-to-end with the iPhone is pretty much closed source as far as like being at the bootloader the colonel it's all it's all kept very tightly Under Wraps by Apple but I still wanted to make it happen so the next route I pursued basically was dead for all intents and purposes constructing a headless Android phone that sits in a little case underneath the iPhone and just you know she has a network connection basically to a host application.
 so to clarify you have the iPhone sitting in this case and the case within it has a board that is running Android the Android board is connected via USB to the proprietary Apple cord and plug into the to the iPhone and especially to running Android and it's virtualizing the I guess it is virtualizing the Android experience on the iPhone and the iPhone is still reading it touch events and translating those two Android is that accurate and it's reading the video frames back and it's just like you know DNC or your Microsoft Remote Desktop it it's that principle okay so what's the name of this is a useful project done this sooner
 that's a good question I think you know the first reason as to do something like this like if you were to actually do it in production and not just like a quick-and-dirty hack like I did you basically have to become a mobile phone manufacturer and that's obviously a non-trivial exercise and that's the reason we really haven't thought about it just because it's such a large undertaking to develop a piece of Hardware this complexity and also unit was as far as you know why more hobbyist haven't done it what kind of Fairly involved deconstruction of the Android operating system like I wasn't able to use any off-the-shelf Android ROMs I have to build the operating system Source myself I had to do a lot of digging into a kind of the graphics architecture to be able to grab the frames fast enough that they could be transmitted over USB so that I could read them like there was a decent
 stackable complexity which for something that isn't going to go into production would probably turn some people off
 you did end up making yourself into an Android manufacturer essentially and we should get into that so the project was made possible by the fact that the entire Android operating system is open-source why is the fact that Android is open source so important to this project yeah so the that I would call that Androids killer app almost as the fact that it's open source and what that lets you do is that lets you modify the operating system on its absolute core levels so you know to to grab kind of the raw video frames that are being displayed on the screen you have to get pretty close to the metal if you want to do that and some some kind of performance way and without without being able to modify the operating system's internals I really wouldn't be any way to do that similarly to talk to the iPhone there's actually great open source project out there called the USB mux d
 I wish I read about the blog post little bit
 and basically what that does is that that's an open-source Damon that communicates to the iPhone using Apple's proprietary protocols and because that's open source and it's used to using Linux USB drivers it was pretty easy to port to Android and because the Android operating system is open source it was easy to include it into my bill
 so we'll get into some more of the software internals but talking more about the the ecosystem should I called the open handset Alliance which maintains the open source Android project give me an overview of the Android open source ecosystem and what the open handset Alliance does sure so I'm I'm not I'm certainly not the most well-versed on that topic but you're my understanding is that the open handset Alliance is basically a a partnership between some open source developers Google and set manufacturers and buy my guess is probably software manufacturers as well and it's it's it's I would call it something of a standards organization where they all agree about you know what they're going to support what interfaces they're going to deal with and it allows you know Android to be somewhat standardized uniform manufacturer to manufacturer obviously it's not the same level
 you know there's more fragmentation then you'd get with with a company like apple where they control everything but it did get some closer to kind of homogeneous experience
 okay so you tested this project by prototyping on a Nexus 5 why is an Android device an adequate Target to test something that you were trying to build for an Apple device well if you really think about it I wish I was still building for an Android device most of the software development that I had to do was actually for the board that sits in the case which is basically for all intensive purposes I had put Android phone before I head that bored I started with a Nexus 5 because it was you know it wasn't an apps at the absolute latest model phone you never had specks that are not considered state-of-the-art anymore so I assumed it would be at kind of a good Baseline Target to develop for and then once I kind of had a proof-of-concept that you know you could remotely control Android phone over USB from an iPhone then I I moved into making
 custom Arbor that term headless Android explain what that means okay that mean that basically means you know it most Android phones you know they have a motherboard they have a battery in the night they have a touch screen since the iPhone in this case is providing the touch screen that isn't a necessary part of the hardware so obviously that yeah that cuts down
 things like battery consumption because down new drivers you have to write so what I ended up going with was an Android development board that that only has video out it doesn't have a built-in about the touch screen and nobody had done this before not not to my knowledge it's possible that somebody's figured it out somewhere but I certainly they haven't leveraged the media the way I did Android TVs and other kinds of objects that don't really have the same I guess it's an Android TV it's not really happy it's not headless cuz you have this Steve monitor your word yeah I mean the board I used it is specifically designed to be an Android it's designed for people who are working on the operating system so it's kind of Google's reference Hardware that you're supposed to Target before you start going individual thoughts
 okay so there are several components that you had to port for Android and I want to go through these the first is libimobiledevice which lets you communicate natively with iOS devices describe what libimobiledevice does it how would that fits into this project so it's just really bye bye says yeah iPhone iPod touch iPod yes and it basically you know in developing the sinking mechanism for all those devices Apple created a bunch of proprietary protocols that they use and they all talk over USB pretty much and then we buy mobile device is basically a series of libraries that
 that either that emulate those native protocols and their and they're open source so you can Port them to whatever you need to run them up so show Apple publishes maybe yes or an interface for Apple doesn't publish any of that as far as I can tell the other goodbye mobile device developers had to reverse-engineer most of that from either no sniffing packets cross the wire or disassembling Apples by no reason and kind of seeing how those protocols work because Apple doesn't make any of the stuff out book
 okay so are there are there bugs in that and that protocol look like how how how well how thoroughly can you reverse engineer something like that it's hard to know for sure because but like I said apple has a really documented it so it's really hard to tell but it in my testing it's been around for awhile the project they kept up with the you know with updates are apples made it to introduce new hardware and it's it seem to be pretty reliable to me this question is there an entire culture around hacking in decomposing these types of proprietary Apple products they're absolutely is and it's it's to some extent of subset of the iPhone jailbreaking Community there's a lot of overlap between this stuff and and and those people and the reason why is because one of the features of this live by mobile device series wife
 this is that it has components that let you browse the file system on iOS because there's actually a Apple has an interface that lets you do that so you know things like that are useful to jailbreak it all her so sometimes they don't contribute to these projects and vice versa
 okay so another component of this Android version that you built is USB Max-D you mentioned this a little earlier in this allows you to use a USB cable to effectively communicate between Android and iPhone so explain what you had to do to get a TCP connection between Android and iPhone church so so USB mics D the real USB much d'ye is actually a demon that ships with Mac OS 10 that is used to communicate with Apple's idevices and basically what it does is it will the say you have on your iPhone there's processes listening to TCP ports you know running in the background one of those processes might be responsible for sinking your eyes your iTunes library one of them might be responsible for installing applications
 can you run them from xcode another one might be I don't know responsible for sinking your calendar what USB XD does is it allows you to turn the USB connection
 between your computer and the iPhone into a basically a multiplex network connection so you can communicate directly with those processes but the interface is kind of all hidden from you all you know is you're writing to a socket and it's ending up in the iPhone on the other side and part of my mobile device is actually an open-source clone of of USB mics T which which does the same thing but obviously since it's open source and design for linux-based operating systems it was it was portable to Android and that's really what enabled this because you know USB is much faster than pretty much any WiFi in the latency is much lower as well
 okay and in order to get the the actual iPhone screen to display the contents of Android which are being sent to it over TCP you wrote a Damon call the screen streamer what does screen streamer do so that process sits on the Android side and pretty much what that does is it it connects to an Android API on the operating system level called surfaceflinger and what it does is it reads full video frames off of out of service Slinger and it sends them out over over the USB cable to the iPhone it doesn't do any compression or anything like that it didn't it didn't seem to be necessary the resolution is running at the USB is 480 megabits per second which was more than enough to get a to get those video frames over
 what's green steamer also does is it reads in over that over that USB connection touch events and it emulates them
 am I a person is that the screen while having I guess I could have looked this up beforehand but the screen size is not identical on the iPhone and the Nexus is that accurate actually is on the Nexus it is at least for the iPhone 6 Plus which I have I believe they both have native resolution of 1920 by 1080 but there were no translation she's there when I was using the Nexus know however when I started using the dev board I believe there's a there's a known issue with it some with this is something in the bootloader or something in the video Hardware I don't remember that prevents it from running at that resolution so it's actually running I think at 800 by 600 which is why you see the letterboxing in the video
 letterboxing yeah you can see the there's there's black lines on both the top and the bottom of the the screen if you look at the video that that was on YouTube and everywhere okay so how responsive are the touch of bats when you have Android up and running on the iPhone and you touch something like is there noticeable latency relative to how it is on your iPhone running iPhone it's not too bad it's about I'd say we got about 15 to 20 frames per second and yeah it's it's it's totally usable it's not as fast obviously is an Android phone would be you. You were just using our laundry done but speaking
 okay so once you got the iPhone displaying and communicating with the Android Nexus 5 what did you do next
 after that you know once I had a proof-of-concept that demonstrated that this could be done that I could control an Android phone or something running Android from IOS The Next Step was to build build custom Hardware that could fit into a case on the back of the phone and that's what I started researching different boards that could run Android and that's when I came across the board I ended up using which is called the high key and that's from a company called Lee maker and like I was telling you before that's the official as far as I can tell the official reference board that Google suggest When developing the Android operating system
 okay so you want to get this iPhone compatible with an Android board what were some of the challenges that you encounter trying to extrapolate from the Prototype version of the Android Nexus 5 versus the Android board
 we think there were some Honestly by the time I made it to the by the time I made it to the reference board I had had most of the most of the challenging aspects of it worked out the biggest one
 think there's is it was awhile ago now we can edit this out to totally delete the Android board running and cooked and the iPhone and it was actually running you actually had Android running on an iPhone so you want to build an enclosure to house the Android Borden actually make this sort of a usable device rather than a board and iPhone they would both have to carry around so how did you build the enclosure for that Android board so before I got into kind of the world of 3D printing I wanted to see if there was a way to have it manufactured for me because at the time I knew nothing about 3D printing or Caterpie designer anything and the more I looked into it the more I discovered that it it's to get something like that produced you know just for her low-volume meaning one or two of them
 it was really kind of prohibitively expensive for just a you know quick hacky project like this and as a result that kind of forced me into the world of 3D printing so you know one day I decided I went to B&H store in Manhattan I picked up the one of the cheapest 3D printers they had I set up Google SketchUp and you know a couple days later after you know taking some measurements and learning how to use SketchUp which is Catfish program I was younger I was printing prototype enclosures and I I just started playing with the measurements until I can go as small as I could
 so what you had this enclosure belt you had an iPhone running Android in this was sitting in a big bulky case you had accomplished your goal did you start using it as your default phone did you start testing it and like walking around with it and seeing if it would function like you needed it to ya to a certain extent I mean I still carry it around from time to time it was a lot of fun it was the story broke right before WWDC which is Apple's kind of annual International developers conference that they hold in San Francisco the fun part was that I had been all over the media for the couple days prior WABC so I was walking around with it there and you know everybody knew it was said it was and I met some cool people and it was it was fun to talk to people about it but but yeah I can I carry it around sometimes I honestly I didn't really build this because I needed to have it I built it because I want
 she said it was possible so yeah it's not like there was some some need I had that required me to carry it
 what is product was certainly a typical for a mobile developer that you engaged with both Android and iPhone on this project and you really got to taste the internals of these operating systems up close how do you feel that the two platforms differ as a developer menu mentioned for example this one protocol had to be reverse-engineered in order to actually make it usable and you also mention that Android is a cat the killer feature is that the code is open-source is the killer feature of iPhone at the the code is not open source is that somehow equivalent asset to the platform
 I would say yes I think I'm on the iPhone kind of the advantage is that it's a closed ecosystem and the Apple controls it end to end and as a result you know they're able to and there's a very small selection of Hardware that it runs on and as a result there be able to insure a relatively consistent experience for pretty much everybody obviously the downside is you can't do much customization and the converse is this is true an eye on Android you know you can you can customize it all you want and you can you can use it for all sorts of applications it was never intended for you could build a point-of-sale system on Android as people have with just one call Clover you could build an industrial automation system that runs Android it's not open but obviously it's downside is that you know there's more it but things go wrong if there's more maintenance you have to do and the odds that you were problem cases the same somebody else's are lower since there's a
 possibility for deviation from the norm
 wealthfront is an automated investing service that saves you time as an engineer your time is valuable if you want to invest but you don't want to spend significant time evaluating your portfolio and allocating assets take a look at wealthfront go to wealthfront.com se daily to open an account today and get a special offer for software engineering daily listeners $15,000 manage for free when you open your account with traditional Investment Services there are many humans in the loop that are doing things that well front automate away when you pay the commission's an account fees of these traditional Investment Services you're paying for work that could be done by a computer so don't pay commissions and account fees maximize your games with wealthfront set-it-and-forget-it investment automation check out well front.com SE daily it would support software engineering daily
 I would introduce you to the world of automated investing wealthfront.com SE daily thanks to wealthfront for being a continue to sponsor of the show now it let's get on with the show
 chode you are talking to him about the consistent experience among iOS devices my impression is that the experience is actually not that consisted you have it you have a consistent experience among all of the high-end highest-end Apple devices at a given time but over time that consistency degrades and Mike Springs with the Android that high-end Android devices is that it's that's essentially the same is that if you have the highest and a Nexus device you're going to have a top-quality experience despite the fact that it is an open an open ecosystem and if you have an older iPhone you're going to have a great experience given told her next device you can have integrated experience can you give me give me a little more of your of your impression of what you mean by this consistency of experience I think that's true I think one
 Tire Factory that that impacts things on the Android side though is that if you look at the the overall Android user base and I have mostly statistics in a while so please feel free to correct me if I'm wrong but a much smaller percentage of users are running these latest phones and there's so many other phones to support compared to you know when when Apple releases a new phone there's there's one new phone that's the flagship one that has features you can take advantage of on Android you know there's maybe 15 different manufacturers all releasing top-of-the-line phones all with different specs all with different Hardware features so it it's harder to get that same consistency what you said is true though obviously you know as Apple releases new phones with new features you know software features become deprecated software doesn't support old phone software requires features that are new phones so yeah you still got that but I think overall it ends up being more consistent and also I think Apple
 users if you look at the numbers Apple users are a little bit better about upgrading to the latest both hardware and software
 so it sounds like you're saying that the cultural the cultural aspects of the iPhone Community are driven by that closed ecosystem and the weather whether or not this is a fundamental technological
 causation cause a causal relationship on the Apple side the end result is that more Apple users end up with a high quality experience whether or not the weather they've been strong-armed into buying the latest Apple devices or or not is a different question but more Apple users end up with a high-quality consistent experience yeah I think that's the net effect of the of the way the ecosystem works at as as you know as someone who has developed relatively extensively for both platforms and ship software for seeing a lot of clients that had bought a new experiences on both platforms you know it's a lot easier it's a lot easier to do it on iOS because of the fragmentation
 do you have a history of putting strange operating systems on Apple Hardware back in April you put Windows 95 on an Apple Watch so I guess you the same question I asked about Android on iPhone why would you do that even less sense I do not have just I have been doing some research into reverse engineering the way of the watch operating system works and there's actually an excellent blog post by the esteemed iOS Developer Steven trutein Smith where he did some poking around as well and you know about the watch OS and apples watch kit SDK but you're extremely limited with what you can do with it and what I mean by that is the things that you did find trivial almost other platforms like building a custom
 interface control or you know getting the location of the user's finger you can't do out of the box with watch kit apple pretty much gives you their controls and they that's what you can use
 so basically the weekend of the kernel of inspiration that that got me to be reporting an emulator to the watch was the discovery that you can actually modify the applications xcode generates for the watch before installing them and actually inject your own user interface I want I discovered that that that got me really excited and I wanted to see what outrageous thing I could do with it and it wasn't 5 on Apple watch so you just basically wanted to test some sort of duet or some sort of different interface on their you decide to throw up Windows 95 it's Hyatt I have such a sense of nostalgia about Windows 95 at as do I you know where does 95 came out 2 years after I was born and it was the first offer
 system I ever used so yeah I agree with you and I remember one of my family we got our Gateway 2000 it showed up in a big no Cal colored box yeah we set it up but I saw it when I was probably 5 years old I saw the Windows 95 logo on a screen so yeah it has a has a personal nostalgic significance to me as well
 yeah and before the show you know we were talking a little bit and you mentioned something called it hit Clips player which was another nostalgic piece of technology if anybody doesn't know it hit Clips are you should look them up it's pretty hilarious but there are all these Technologies of the 90s maybe even early early two-thousands that are so fun to look at in retrospect because they just make sure you're totally right from Radio Shack reader that plugs into your between your keyboard and you're on the PS2 port on your computer and the idea was that like every catalog every food product would have this like special barcode on it that you can read what this thing and like Radio Shack would give him out for free I must have 50 of them and my parents house like it's crazy
 beats these technologies that weird nostalgic about I feel like there's also an internet subculture around these you know probably at least as large as the internet subculture around around reverse engineering proprietary iPhone protocols is pretty funny too I think there's lots of like Tumblr blogs about these things are there. How does the hardware on an Apple Watch compared to that of a desktop computer in the 90s when Windows 95 was prominent as an actual usable operating system well it's if you were to look at it kind of the wrong numbers it it's quite favorable as far as RAM goes the Apple watch has 512 megabytes of RAM on board which is the size of some hard drives in the 90s
 a gigs of storage which is you know which would have been very expensive in a desktop computer at the time
 also the the processor I think I don't remember exactly but I think it's around somewhere the 500 megahertz range which 195 came out was involved at night and I don't think servers Raven that fast but yeah I remember now back to my parents Gateway 2000 that they bought that was 300 megahertz I think it had 256 Megs of RAM on a 10 gig hard drive and that was a $3,500 computer so you know if you were to look at the Ross specs the Apple watches which is sitting on your wrist is is way more powerful than even did Flagship desktop computers at the time amazing
 so we don't need to walk through the Windows 95 on Apple watch technical details in as much depth as we did with Android on iPhone but at a high-level what were the steps that you took to run Windows 95 on the watch OS so there was really just one but it was a big step and that was taking the Box spelled b o c h s x86 computer emulator which is open source and importing it to watch OS and that there wasn't really that much involves there because somebody had already reported it to the iPhone so it was really just a matter of taking the iOS port and massaging a little bit so it would run on the watch
 okay so you emulated Windows 95 it but I read the blog post and emulation is different than virtualization key explain the difference yeah I mean in layman's terms virtualization usually you're dealing with the same processor architecture of the virtualized operating system as well as the host Hardware so say you have a new Mac and you want to run Windows and VMware or Parallels because both of those you know Target Intel processors both OS 10 and and windows and the computer is an Intel processors well you know you there's no translation that needs to happen the instructions that Windows is expecting can be run your directly on the post computer processor emulation on the other hand as is the case of the Apple watch the Apple watch has an arm processor which is which has a totally different instruction set then
 the Windows computers are IBM compatible computers the 90 Saturn so what has to happen with emulation is that software has to actually translate the instructions that the windows is expecting into the instructions that the watches processors expecting and it also has to have to translate the other way as well once he gets the results back and obviously that because that's the software that that introduces a lot of a lot of CPU overhead in a lot of latency into the mix
 okay so before you did the Windows 95 on Apple watch project project will you got an older version of Mac OS running on the watch Mac OS operating system that ran on Apple Computers in the 90s how did the engineering of Windows 95 on the watch compared to Mac OS on the watch it was it was a lot more difficult mainly because I think Mac OS was difficult was more difficult and I think because it as funny as it is to say Windows 95 actually requires a much more powerful system Vanna os10 at 10 7.5 did at a time
 so you know getting it to testing it was a much more drawn-out process since it required more power and therefore the emulation was slower I took longer to boot never reading that in the blog post where you were rooting it up and it just took like an hour to and I figured out the reason why I actually this year wbdc because if you were just doing if you if you were doing the math and you can if you worked out you know what the kind of CPU instruction translations added in theory it shouldn't shouldn't take anywhere near that want to actually posted responses on YouTube to my video where they they found arm-based in a Chromebook some things that had similar specs for the Apple watch and showed Windows 95 booting a couple of minutes and they were like Nick is wrong you know they must have done something wrong and I eventually discovered that the reason it's so slow is because Apple
 in an effort to conserve battery life on the watch actually throttles the amount of CPU your each individual process can use that's why it takes an hour
 wow huh WWDC it makes me wonder what is the response from the Apple people when you talk to them about this. I think they've been told not to have a response and I have a kind of a long story history of mutual reflexive aggression but but I think they were and they find a truly and they otherwise she's not to acknowledge it but yeah I've gotten word from from several Apple employees either either it's you know you're horrible why have you done such an awful thing and this is really cool
 they made me think you're horrible why we don't you think so there really are these fanatical apple purists and and vice versa like for the Android thing as well like you know there were people who were like why would you run such a great OS on such terrible hardware and yeah any publicity is good publicity as far as I'm concerned
 how big is a contingent oh of fanatic
 okay we will see what's up with some kind of discusses the Android vs iOS in the Paradigm of the phone what about in the Paradigm at the watch
 you're talking about an Android Wear watch OS yeah like in terms of both developer ergonomics and end-user consume ability so I haven't spent I don't spend too much time with Android Wear I would like to because as far as I as far as I'm aware I look at the developer documentation a little bit it looks like you have a lot more options as far as the things you can develop for for it or they give you I take a lot more access to the hardware they give you access to things like Wi-Fi which on on the Apple watch you don't really get into transparent way that you know they give you access to like Mike the microphone directly the speaker directly which Apple starting to do but I think it in terms of treating how to reach experiences that are more than just a heads up informational I think Android wear it gives you a lot more opportunities there
 so you just said that the Apple despite despite that fact that the Apple watch has much more adoption than any of the any of the Android watches if you see any numbers you know about adoption
 I I really haven't unfortunately Android once in awhile and they're always like they're always like the IT guy with a calculator watch that I actually I was shocked the other day I was in I was in New Jersey and I was at our kind of a random Deli somewhere by the Tappan Zee Bridge and I saw somebody walk in with an $17,000 Apple Watch Edition that was shocking to me the gold one wow
 New Jersey person who probably commutes to an investment banking job in New York or something for this type of stuff like I consider myself a software engineer I would have nowhere no idea where to begin I mean like there's no this is not like a react JS type of thing where I can just read it tutorial and figure out how to do this how do you why are you a reverse engineer like this that's in question I think it is certainly an aspect of my personality For Better or For Worse but
 I don't know I I I I enjoyed taking things that are a very nicely to get put together and Polished and often somewhat closed and finding ways of either making them worse or making the Practical or somehow taking them apart and her are such a great candidate for that because so many people have them so many people know what they are you know if you write a headline that you know talks about doing something on the Apple product everyone's going to pick it up because everyone's interested so that's pretty much the motivation behind it is that it is it something a lot of people find interesting as far as actually doing it goes it's it's really just a matter of you know looking at what you got you know okay what happens gives you whether it's a it's a binary that you made an ex code that you want to see how it's been assembled and what it you know what it links to and what you can do you know how to link to his dad
 or whatever it is just a matter of time analyzing what you have seen what you recognize and what you have and kind of following things from there
 be pendulum has swung between open and closed ecosystems over time and this is Iconic in the Apple versus Android debate the time Horizon of when we've always had this closed vs. open ecosystem debate it's not even that long it's like maybe 20 or 30 years there's not necessarily an immutable Trend do you think that this is going to continue for time in memoriam like
 closed versus open or are we going to eventually have entirely open like a much more open predominance I'm sorry you just cut out a little bit in the middle of that question. So the closed vs. open pendulum has swung back and forth for the longest time but we haven't even had computers for an extremely long time so do you think that the closed vs. open paradigms going to continue to shift back and forth or are we going to eventually settle on having what one of the other going to have more open that serve or more clothes Ness that's a good question I don't know how do you follow it was probably the best example of kind of mainstream proprietary closed stuff you know platforms for consumers obviously Microsoft has a long history of that as well but a lot of their stuff is in the Enterprise I think if you
 I don't know how close you call WC this year but it seems like things are moving in the direction even proprietary products are moving in the direction of being more open if you look at what they're doing with with apps that never had any extension points before your apples opening up the messages app they're opening up notifications there they're opening up even their development environment on iOS 10 with your body right extensions for that so I mean it depends how it depends how you define open you know you 50 Define open is as open-source you know I think as long
 as long as people are creating software we're knocking at if you know some of its going to be closed source of proprietary and that's fine but I think there is an overall trend in allowing people to to customize things for their applications regardless of whether or not the source code is actually fell asleep I feel like apple could open source so much more of this and it would not injure their bottom line at all because the bottom line is not really about the ecosystem being closed it's about the ecosystem being really really well supported and really well invested and really well thought about and if they don't open it up more than the you know the one thing I think about is like the whole machine learning stuff like I remember reading a while ago like note there are no machine learning researcher that want to go work at Apple because they can't publish anything they can't really interact with anybody in the outside
 Beauty and the Machine learning communities moving so fast and it's such a big crowd holistically intertwined a community that that should reach beyond the borders of the company but
 get an immediate a couple different conversations but yeah I mean I don't know it's hard to say okay this is Cason at TechCrunch style podcast what you are doing so what is 10 Digi day today we are we are mobile design and development studio so we build for our clients typically native mobile applications though we also do a fair amount of web development on Fairmount Hardware prototyping and we work with all sorts of different kinds of clients you know where small is client is one guy at his apartment San Francisco are largest client is Viacom so you know I lost it all projects of all shapes and sizes clients ball shaped all shapes and sizes and challenges of all shapes and sizes Hardware prototyping landscape is getting really really really easy and really democratize is that true
 yes certainly a lot more than it was a few years ago you know for simple Hardware you have all sorts of open open products that you can use like arduinos that lady Prototype all sorts of kind of basic Electronics mad if you want to get more involved with than that there's there's a lot of more there's a lot more powerful Boards out there that let you print out all sorts of stuff and tells got a few of them all the one I use free Android projects one of them there's obviously raspberry pies in a hardware prototyping is is really moving fast
 when you're taking a prototyping is that chill like the model for going from a Prototype 2 show me the movie mass-produced could you just send the prototype to somebody inch engine and say hey make a million of these having consulted a couple clients on that process it's never that easy it's usually if there's a fair amount of work that needs to happen between you know a prototype you built with some off-the-shelf microcontrollers and something that can be mass-produced but it's you know compared to how I used to be where you actually needed to get the manufacturer to do the prototype for you as well you know it's a lot easier to get started in the process so I guess last question how does the the type of work that you do on the side like throwing Windows 95 on Apple Watcher Android
 nios how does that dovetail with your work at 10-digit does it help you think more creatively or or did you just totally unrelated it's it's more later than you think it would be it certainly it kind of Foster's in Eternal culture of a packing of exploring new technologies of pushing the boundaries you know a culture culture of R&D internally and you know whatever we we do one of these these projects with your try to do you know once a month or so obviously you know getting it all over the news gets a lot of eyeballs on the brand and gets lot of interesting people calling us who might not have known about us otherwise
 Freckle okay well Nick I want to thank you for taking the time to do this interview I really enjoyed it like why is thanks a lot
 thanks to sinfonico for sponsoring software engineering daily symphonica is a custom engineering shop where senior Engineers tackled big Tech challenges while learning from each other check it out its symphony.com SE daily that's s y m p h o n o. Com SE daily thanks again Stefano
