Transcription: AQHA is a tool kit for building could current distributed message-driven applications on the jvm provides an implementation of the actor model of concurrency which simplifies concurrency by adding a lighter-weight abstraction then threads and thread pools Conrad volaski joins the show today to discuss ARCA and reactive streams reactive streams is an initiative to provide a standard for asynchronous stream processing this episode goes deep into modern concurrent programming and it's a great companion to some of the shows that we have done about reactive programming and functional programming before we get to this episode a few quick announcements if you're interested in advertising on software engineering daily send me an email Jeff at software engineering daily, there are more than 14,000 Engineers that listen to software engineering daily on a regular basis so it's a great place to get your product out into the ears of developers or to advertise
available jobs do you might have your company also if you're an engineer that's looking for an open source project to work on checkout software daily at software daily.com this is an open-source news and information site about software it's being led by Jeff AAA member of the software engineering daily Community you can also check out software engineering daily.com which is the website for this podcast you can find links to the slack Channel my Twitter account by email if you can find a link to sign up for our newsletter software weekly and with that let's get to today's episode
life is too short to have a job that you don't enjoy if you don't like your job go to hired.com se daily hired makes finding a new job enjoyable and higher will connect you with a talent Advocate it will walk you through the process of finding a better job it's like a personal concierge for finding a job maybe you want more flexible hours or more money or remote work maybe want to work at Facebook or Uber or stripe or some of the other top companies that are desperately looking for engineers on hired you deserve a job that you enjoy because you're someone who spends their spare time listening to a software engineering podcast clearly you're passionate about software so it's definitely possible to find a job that you enjoy check out hired.com SE daily to get a special offer for software engineering daily listeners a $1,000 signing bonus from hired when you find that great job that gives you
respect and salary that you deserve as a great engineer I love hired because it puts more power in the hands of Engineers go to hired.com se daily to get advantage of that special offer and it's thanks to hired for being a continued longtime sponsor of software engineering daily
 Conrad Molasky is an engineer at lightbend Conrad welcome to software engineering daily let's start by talking about ARCA eventually we will get into the currency in reactive programming in all the other things that go along with it but let's just start with what is ARCA exactly one sentence summary is kind of like a description one can get the tickets and distribution so its orbit around the axle motor so actors are pretty much has to cover everything we do and actors are basically conference in distribution motor that allows you to very easily two birds concurrent the distributed systems because
 instead of chunky got me thinking about shreds it just think about exercise and the only way I access communicate is through messaging and Tim's out Distributing message passing is what I would say trivial but very native to the web so that means it's everywhere to distributed systems and at the same time it turns out it's the same concept apply to just concurrent programming because basically message passing between two Q's is conceptually very similar to passing messages between two notes right it's just a difference off work can we have a shoe inside the same process and there we have Q's what we have for internet so it goes on the wire but the concept is very similar so instead of maybe last sentence instead of turning it's like some people have it cost to make methods cords go over the network and then it starts going to be fuzzy we go the other way around so we take what is native to the networks
 and yes vets locally as well why is the abstraction of an actor useful why don't we just use threads to manage our concurrency what's wrong with that so basically I've Treads are pretty heavy so that's one of the biggest kind of differences What actors so Fred at least some of the jvm other especially heavy because I'm supposed to accept it is going to be allocated for thread search for the way it's more or less a megabyte sometimes and then actor weights at least into a complementation more elastic sexy 400 bites and that's all you have. Okay to have an extra running and you get kind of the same behaviors to get over the concurrency and and Pearl Izumi want go to Donuts cuz I'm not wasting your space Fair
 are there some aspects of threads that we don't need that are giving us that extra heavy weight around the thread so so actors are still running on threads of course but when you go really really congruent and parallel programming your kind of realized it's not like everyone is running or the time right and that's kind of order for this verify it's there and it's running and if it's not really doing anything useful maybe it's sleeping so wasting time or maybe it's spinning so again wasting time so what are we doing factors is instead of wasting time doing nothing we just don't schedule factor and this time which would have been wasted by the front doing nothing we are located to an overactive so we're able to you utilize the same Hardware more efficient
 when we were would be able to do with Frets and maybe the biggest mindshift and difference between Fred base programming and exit programming is the share nothing concept so it infrared words usually had at some point need to pass some information from one threat to the other
 lens at what at least in the good old days she was have a lock when the Fred's meat and the communicate or you would have Q's so you basically stole tree implementing Alka and fits a big piece of work so it would we do in our current studies instead of having these points will you meet and exchange service information or lox we just passed messages and turns out that is really really deficient because basically inventor of Coldplay's witches were a few hundred thousand times but now we have maybe two blocks and vets only a start-up of the entire system and of course locating it slows everything down and its causes all kinds of problems so
 so just to really drive the definition of actors versus threads home a little more shows about this and I think people remain a little bit confused about it speaking for myself is it in the actor model is there for example a single thread and multiple actors are sharing the usage of that thread yeah so if it's the simplest case in practice you have a friend so you have and Fred's and and would be something around maybe 40 maybe 42 relatively small number a bit more when you have corns on your system but not much more on the other hand you have maybe a million actors
 Android still runs perfectly fine so yeah it's basically is is a multiplexing mechanism to me are there other problems around jvm concurrency that Aqua salt
 I think most of the trouble around according to the good old way which is Snort source of a job away with friends and Music Circus and these kinds of things they really don't scare that were so yeah maybe you can survive a hundred Fred's but feels just know where you're going to have a million friends running on your system right so the biggest thing we address is just for scalability but also what are these from my perspective the ease of programming using actors because with Fred's your kind of always have two things with each method called you have to think while we're there is nothing could be safe if x is concurrently yes no maybe and it's really hard so we have for this week old is an illusion of singer Fred Ernest so the guarantee and acts against you is that if you receive a message
 message and you do stuff with it and then you receive another message and of course you can have some State inside back tried so hard to have like a counter field and on each message maybe you incremented what to do it with just reading and marking for Fred's accessing the counter where are you suddenly have to use maybe for a tired so maybe some locks and think about this chair at state fair but with exercise we kind of take care of the memory visibility for you and you have this illusion that inside vaxxer it's as simple as programming in a single fret so you can access various counter or you just incremented you're done and when the next message arrives and even though you could be already on a different Fred like because like I said we were multiplexing so you very often end up having a few messages and it on one Fred and then a bunch of other messages and it's on a different thread but from the programming point of view you really don't care but
 the extra mother guarantees but you're safe to modify your internal state so it's also Simplicity I would say
 so for those who still might be a little confused is this library for managing currency in the jvm it's written Scala you can use it in a jvm language like Java or in Scala in Scala there was actually an implementation of the actor pattern early 2006 but it actually is didn't have ideal support for concurrency so what was wrong with Scholars early at her implementation what what did what did DACA get right in its different implementation of the actor pattern of original implementation of scholar actors was done mostly by Philip Heller
 what is a researcher red so she was very interested and I asked him and he implemented the mother very much like it is implemented Airline and very much based on the papers and there is a very big difference in how the VM or so the BVM can do stuff with processes and what the jvm can do with processes sew-in or line basically each actor is its own process
 and that allows them to basically don't care about blocking inside actors or vacant just wait a message without squatting on anyone else and if they don't respond if you're an actor and you don't want to receive a message because you're not able to handle it right now original papers and voting in Plantation when they would do is it just puts it in a queue on the side and it's assumes Footwear eventually you will be handling that message so you were just pop fit in public stock and controversies set aside messages so bad and turns out it's really not a good fit for JPM a few problems with it so one problem is so if I receive a message right now because maybe I'm
 socializing I'm doing something else so it's being put on the side and his external cue recorded for stash and if you never pop fits perfect stache never ever take these messages out of the stash so tell me if it's basically a memory leak it's like in by Design memory if you're willing but the thing that will happen is this one single but what happens on a GM crashes because you have one single javian process if you run out of memory everybody is dead so that's what I'm talking about it
 signs of a problem was it was more academic & Decker so it wasn't really fast and it wasn't treating geared vet mount for concurrency or distribution so the scholar actors never hand-wrote distribution so you couldn't send messages over the wire to a different machine and that's pretty much what I did the right I think the observation that message passing very much bikes into or langway goes very well both for concurrency and distributed programming so the story about how the scholar actor Scott eventually deprecated was with basic Living Community realized we're not sports goods and we shouldn't be really using them because people would run into his out of memory issues and stuff like that and by that time it was already popular
 so the decision was made to deprecated us collector's eventually eject from from the standard Library put them on the side and I didn't directly replace it so I can watch part of the standard Library however it is very much for go to library if you want to do concurrency in scar know where their architecture was it kind of mostly Java but has a message passing using erlang I think for mostly for that the reasons that you're describing that are desirable the the actor model they also did have some Scala in production but it sounded like they were sticking with her Lang in general what are companies try to accomplish when they use erlang versus using something like scholar like
 what are the the strengths and weaknesses obviously the actor base model inaka is based off of these it or draws inspiration from your Lang you know what and what conditions are people still using erlang as the message passing layer between their Java Services is supposed to just using AQHA it's an interesting question I also attend some conferences where you're so get some Airline people and then we get to talk and it's very interesting how it goes like I said the one sentence pitch is that I could just like a rolling or OTP of this so it's the standard Library around a message passing blood in that sense but when you start really looking into it you notice stud to the ecosystem examples color is of course Very influenced by the Java ecosystem so again influenced by
 system is very much its own the word so the biggest win and on the other hand or so big for maintaining Alco is all of the interrupt capabilities with RV existing Java Library Southfield and this is really really a big thing because Java libraries are really out here for basically anything you just need and on the other hand the rolling ecosystem evil or you're already part of the ecosystem or you're like to know what's really going to go over that's my personal loans that's what we see with customers and you rarely see a online shop suddenly go and become a job at shop and vice versa
 soap and we are so I mean it's a difficult question to answer reasoning Consulting to do anything in one of the other language and modern Birds it is very much a taste thing but make a random observation that I found its an ecosystem observation so invest color and or Java ecosystem that's a statically typed languages rights and so again it's a taste thing but it's also interesting how people build these systems so I was a bit surprised how people tested on and BAE Systems it's not the kind of man you tear okay here's my unit test gives me integration test gives my full blown integration test of the entire system settings entire field office
 it was very different than again this looks back to his preference thing
 right
 I want a pivot the conversation a little bit and talk about reactive programming explain what reactive programming is and why that's relevant to this conversation so reactive programming where I guess in the middle of the hype around feds work or maybe both what is it raining
 the answer is a bit tricky so back in 2014 I think Cody 2014 I pretty much we a slight Burns so your nose and some other guys from Industries Alton Thompson was invited Vera's were our first directed Manifesto and already Venza why brexit Manifesto came to be because already been in 2014 there was a lot of confusion what reactive XDS so everybody was using the word but everybody was using it slightly differently so people would score for example things like rxjava verses for definite reactive-programming thing people coming from a more distributed systems background would say yeah but we react to failure etcetera etcetera so there was a problem around the word being very very overloaded so Vettel
 starting 2014 and I think we're still having this problem of forward to being very overloaded mostly because it's become very popular and also there's a bunch of projects which have two with reactive in the name I don't like reactive extensions or rxjava or Rex is Costco which we will call and or or kinds of Rex if anything and react JS which has nothing to do with reactive programming of pivotal little bit because it's also adding to the confusion so very functional reactive programming it's not and functional reactive programming it is very much originated in the world back in the days in Vassalboro Community Baltimore recently when it
 became popular as it is right now it's basically was revived by the programming language was so nice of front end body language to attract a mouse clicks and stuff like that and it wasn't really A New Concept this this idea has been around for years but it's kind of took it to the mainstream so now we have libraries like rxjava streams maybe reactor as well which photo of functional reactive programming Pearl time piece of the pie because you're the only handles for local attractions the threading things but it doesn't condo reacting to fade your which really is when when we think about reactive that's really part of it because you want to have a system that is able to react to an increase load and it's going to skate it down again so it's not just being an overpowered iterator which frps
 I'm going to save it even being an offer of one of such libraries but will it ever be is a small piece of the puzzle
 okay so just to give people a better idea for what is actually going on here you know we can talk about Davis dreams and reacting to those Events maybe you could give an example of a prototypical example of somebody who is doing reactive-programming so
 prototypical example would be the biggest example I think they do it on over lovers which I mean when I say wrecked it so vaduva skating according to load fits? Respectively part of reactive FRP for the motor things right and it's been kind of pieces together gods
 yeah it's it's the string about so you constas do one layer in your stomach react different color today because yes then you get some benefits and that's where you start out with this but eventually you'll notice if a part of your stack is still very very blocking very monolithic van you need to work around it and visit quickly become the bottleneck so
 the prototypical example so the Netflix example they still struggle with
 parts of the system being in the old ways let's put it this way and that's part of the chat on Twitch reacted to see how we can have over existing systems in to actually wrecked it once step by step
 continuous integration is so useful that I've started using it on my own personal projects snap CI from thought Works has the fastest setup I've ever seen I registered for SNAP CI with my GitHub account and after a few clicks I had continuous integration pipelines setup for a no JS application and a rails application that we're just sitting on my get have account and I don't want my users to experience breaking changes so I want to run a large sweet of test for my application every time I push a change and snap see I will run those tests quickly in Peril on a worker that snap CI spins up and takes care of for me what do you have personal projects like me or you work at a company that is looking for the perfect tool to improve the deployment process go to snap. Co / software engineering daily snap CI and bodies the lessons that thought Works has learned from 20 years of software deployment the same lessons that have been written
 stop by Martin Fowler and Jazz humble check it out it's snap. Co / software engineering daily it would support software engineering daily and you would get to check out continuous-deployment snap. CI / software engineering daily thanks for listening
 so I think of reactive hurting you can tell me if I'm wrong as you kind of going you're going to the Paradigm of thinking about programming over a raised to going to programming over stream so rather than having these fixed-length series of data the operating over you basically expect there to be a stream that has an unbounded series of events you kind of may not know when you're going to get a new event all you are guaranteed to set the events are going to keep coming would you say attack. I would say that it's accurate for FRP so that's exactly the functional reactive programming part of the pie and I think it's it's big Parts but it's not for these parts so when you look at Alco best parts is exactly what I cussed dreams about so this has been the last 2 years or so of our development and we are so excited
 what's a reactive streams initiative around in 2014 as well
 and let's talk about erectus dreams in a bit maybe but I can stream is exactly. So you have an infinite possibly infinite stream of data and you want to apply some operations on it but when you suddenly realize and this is where we were at some point in time that's okay we have to stream update that we handle it but when you have a situation that's okay what's the downstream consumer service date a country to keep up with the stream of data and then we get overwhelmed the streams goes down or even worse it gets out of memory crashes
 so this exact situation is what letters in 2014 to kick-start wrecked extreme sensitive which was and is basically a standard so it's not something you implements directly but it's a common kind of way of handling these streaming World communication photos I say but it's basically Ortiz Library so rxjava reactor akka streams they weren't in they were at this point if it's okay we have V stream of days ago and it's some kind of flooring but I want to handle this overflow scenarios and this is were really the Big Challenge and would we addressed with reactive streams which has been released maybe a year ago as one. Oh and is honest on its way to Vegeta kxd
 Java improvement process 266 which is the more concurrency updates
 so it's a
 trouble code on a library level that basically defines how to handle with overload scenarios in a bag president safe a synchronous way so it back before we get into reactive streams let's talk about back pressure can you define that term so controlled rights of flow control Concepts not really new to the software industry but we have kind of forgotten about it in the recent years so we did and I Breeze like you said you would think about your ad as his infinite stream of data but somehow we forgot that different parts of such a stream can have different processing rights and then buff a boot and buffers gets filled up and eventually you get a very crazy bgcteainc system
 so back pressure is a way to control the rate of sending messages between V stages in such a stream in such a way but no one no stage is really overwhelmed and by overwhelmed I mean has two for example infinitely buffer and UConn sweetie Infinity buffer and a normal computer because you have a good memory so we basically avoids out of memory issues
 yeah let's let's talk about reactive streams in a bit maybe just a detail back pressure a lil bit more so if you have let's have producer and a consumer models you have a producer it's making events and a consumer that is consuming this Events maybe they're communicating over a socket show
 back pressure is needed when the consumer of a data stream cannot keep up with the producer The Producers making too many events to be consumed the consumer cannot consume them at the rate that the producer is making them the consumer typically has a buffer to deal with these events being sent by the producer what sorts of situations in an application are associated with back pressure and what what has to happen in the relationship between the producer and the consumer to deal with that situation so when did first one visitations actually happen and it's a very interesting shift in thinking when you so for example we very often have customers that uses of the meeting list that went from normal blocking applications for example they have some silver alert in which way did everything blocking Lee and now they want
 ultimate tomorrow so we come to a car and no everything is a synchronous because of that sour D Ford and that's the first moments where is a synchronous communication we get into a situation vote for is a producer rent or is it consumer even if you don't think about it explicitly this way because even if in the case of actors it's very explicit for is a producer of it is putting messages into a mailbox and versus a consumer which is very activities processing the messages in the mailbox so very very explicit if I could because you can reason about it very easily but even without a card just with threats it's very much the same situation because example if I'm scheduling a synchronous tasks on the fretboard what's happens if I'm crazy rescheduling a lot of tasks on this Red Bull and the first put can't keep up processing them the same situation happens even if without thinking about messaging just
 Vortex ignition so the first moment you get into any kind of a synchronous programming there should be some food put into back pressure
 so in this situation where the consumer has this buffer that's filling up with events being sent by the producer what typically happens when that buffer fills up with messages and the consumer to can't can't take any more messages
 yeah so if you were to answer generic leave and it depends but let's start from the jvm on Sir where you guys at the art of memory and your system crashes because we have one shared keep for all the processes let's example if we are invited if a producer and consumer are in the same jvm and we just talked about a synchronous messages between them so vain V entire app crashes both the same situation could happen with that someone is sending messages on may be consuming messages from Dacula kufka with consuming it's and buffering it in memory cards and then you try to process but you can't really keep up and then which process crashed right. Ends up with processes crashing what we have for example anaka streams is
 so I can stream scuzz a built-in back pressure and it's enabled by default which is a difference from rxjava and I will have to think about back pressure and then added in a certain way now just means we fought for at the moment you realize you need back pressure it's kind of too late because things are dressing and production so it shouldn't be after 4. So we just add an edit Inver by the fort and example whenever we have a buffer in ARCA streams it has a specific behavior for the situation when it overflows as of one thing it shouldn't overflow because we have his back pressure mechanism but it could can put a explicit about for Vera and then you can say what it should do when it overflows and the decisions are
 basically dropped all the elements that you had in the buffer so when you have a clean States well you missed some data but at least you can survive now or maybe drop the oldest element Olympic you know maybe drop the newest element and turns out that this is actually sometimes even a business decision what we want to drop from the buffer so I would imagine you are subscribing to a stock ticker or something like that you have a buffer of stock value from the last I don't know few minutes and you keep getting new updates for the stock value of a certain stock so that buffer overflows I simply can't drop the oldest value of that stock because it's not really helping you right now I need the newest study of that stock right so by making explicit decisions about that we were able to the mother very interesting things that actually a little bit
 to the business decisions
 so I think we can get here into the discussion of reactive streams what is a reactive stream
 okay so reckless seems like I keep trying to get into a topic to earlier but it is a surprising answer to some people it's coming up on the 9th and 5th presentations about them and couldn't sometimes people think so I should be using rectus dreams which is both true and false at the same time what I mean by that is and when we start with Rec the streets initiative recorded a note API but SPI so we corded a way to basically API for implementation zverev to communicate between each other
 soap for jumper rxjava was implemented internally we would implement it internally and this way we would be able to get an are extreme and just directly connected to an extreme and the back pressure which is Define defiant incorrect extreme standard with just work even though it's completely different implementations so it wasn't explicit go over to be interrupted for the core that's meant for libraries to implement and Van users words in directly benefit from that so well I mean by saying you should and shouldn't be using Craigslist rooms at the same time it is no one so let's say I'm at the company and writing a project I really shouldn't be implementing Rector Street directly because well it's it's a really really low level concurrency protocol I would even say it's really hard to get right so my protein that an issue
 2/4 writing / tests and Stacy cave Atwoods do all the crazy behaviors but we try to guard against and relievers
 or maybe that's hundreds but at least a hundred of crazy edge cases you need to watch out for when implementing Rector Street so you don't want to implement reactive streams as a user of stuff because you want to get stuff done and then you would spend months in implementing right the street instead what you want to do is no okay this Library it implements reactive streams to have Visa these guarantees the guarantees being for interrupt guarantee with other libraries and the back pressure guarantee which we can talk about in a bit in detail if you want to but basically it's guarantees that we were not overflow down streams
 so you knowing for the library implements reactive streams that's all you need to know I get those guarantees I use for Library I'm good but one shouldn't really be thinking about wrecked extremes as a library for user consumption
 okay so if I am writing an application where I need this interoperability how does that impact out what I'm doing is that like I can have one aspect of my program written in Java and the other aspect in JavaScript and the reactive streams are the mechanism by which information is being communicated between Java and JavaScript we have a wreck this position on the which erase the rectus streams jvm and versus what currently people refer to as reactive streams so it's a set of java interfaces
 people have pulled to the two examples College oh yes oh yes it runs and in JavaScript but there is no bridge between effects of a browser lands into the JV I'm so beside however if this is something that we started a new Endeavor on so together with Ben Christensen of RX Fame who has been participating with us and recs extremes the next step we wants to take first thing is basically what you briefly mentioned here is taking the center of communication over the wire because currently it's strictly from this boundary public or so between Fred's both we want to take the same semantics and take them down to the wire that's project Discord directive sockets and it's mostly being driven by Ben christensen's who is the Facebook right now
 so that's the second son how does the center of story actually impact you if you have in a daily job and you want to get stuff done I think it's something that people don't notice but maybe would notice soon enough so for example imagine you have a database driver and the database guys figure it yeah so maybe we should really provide on a synchronous driver because it would make sense and what's even provide is what is database vendor I don't want to lock people into a specific streaming framework I want to do so but uses of my database to be able to consume my database in a streaming fashion with whatever Library by like so this driver with exposed reactive streams and Van as a user of it you would say and it just works or I'm using something else and it just works
 Oregon if someone provided a nice streaming a xml-parsing library that's really streaming and the synchronous or the same thing for Jason they would expose a reactive streams interfaces and then you're not locked into whatever library that offer light you can consume it with whatever you like so it's really is a
 what is the inverse of vendor lock-in we really wants to be to Beaver streaming going to concept of thing that everybody participates and once someone has implemented they use for Library the entire ecosystem benefits so it's more like interoperability here means if whether you are in JavaScript or the jvm you have a similar experience when you are programming streaming applications
 is that accurate
 it's it's not quite about different languages so we're still in the same jvm so he will say Rex is Mungo driver he has a streaming interface and they provided I wrecked it streams it right or basic you so you can get a stream of the documents from Batangas and so reactive streams don't provide any kind of API that is actually nice to use so it doesn't provide it doesn't provide filter it doesn't provide any of the nice operators it's just for minimal api's that would allow you to make this back pressure work across libraries
 so you need to use something to consume the stream because you want to be you know doing the lower-level thing all the time you wants to do a math on the filter on these collect on restraints so basically just take another streams connected to this database thing and it just works and you get all these operators from the strings Library
 okay alright so so we're talking here explicitly about AQHA reactive streams so I guess what I was confused about is I was thinking that reactive streams was something that you implemented in ARCA and it's also offered in rxjs and that's actually relevant here but you're talking Shirley about the Arca ecosystem is a zero dependencies for interfaces a library and let's go zero to do with water yes we we did mostly Drive initiative but the RX guys and the reactor guys and a bunch of other projects participated in that and basically everyone agrees what we need as far as many more API that we can communicate between rxjava and and a girl streams and the Rat Pack
 andrx Nettie I don't use different libraries and they internally communicate over this Library so instead of everybody having a vendor login so if you use RX but someone in alcohol ecosystem made the nice Library you can't use it because yeah it's different streams you don't care which streams someone implemented the library with because it's a reactive streams compatible thing I can just use it
 okay well looks like a little bit more about the the way that back pressure is handled in reactive street so there is a dynamic push pull style of back pressure can you define what pole based back pressure and push based back pressure is in what the dynamic push pull style for reactive streams is so fabulous first talked about the pool and why it's not enough
 I'm so in a pool by his back pressure mechanism it's very simple to implement its super simple temperaments over Downstream each time I processed a message and I know okay since I processed a message I'm able to consume another message so I pulled from the Upstream hey now you can send me a message the problem with that is that does a lot of overhead cost for each message you need to pull up and pull the next one and pull the next one so this is why it would sort the Overflow overflow problem because it is always safe because I I ever Downstream decided when I am ready to consume my next element so we have sold back pressure Pro problem but it's a lot of overhead the purely push based for the course
 are basically that's the Upstream decides okay I have that I will push the date the downstream and I asked for Downstream subscriber may or may not have space in my butt and then I need to do something with the buffer for this overflowing right so the strategies I talked about was dropping the buffer dropping the oldest element etcetera that's a flavor of basically accepting Flatbush and then I deal with it somehow so what we do in reactive or dynamic is supported by stroller core but instead of pulling every message we basically give a permit to the Upstream
 let's let's see my buffer space was 10 elements in general I can have 10 elements in my buffer and currently I have four elements in my buffer so I can return to my Upstream hey I'm ready to consume its most six elements and this is done from this message
 so I sent this item and six elements the Upstream the nurse is concerned at most 6 elements because we have ready buffer space for it so it starts sending those elements of synchronicity so let's say it has sent three already there flying into the buffer of there in the buffer but in the meantime I as the downstream have process to the other for messages for they had previously in my buffer and if I decide I currently processed over the order of the four elements that I've had them before so I didn't tell you the Upstream about these four spaces in the buffer that I could that are currently free they are available for buffering so right now I can sense to the Upstream of synchronicity again but hey now he demands for elements so in the Upstream is can basically some up the total number of
 Kermit's so the total number of elements it is allowed to send Downstream and if for example is it spinning and its can keep spinning in this Loop and producing four elements as fast as I can to push them down stream
 and it will never overflow the buffer because it would always stop whenever it has reached the maximum number of elements it was allowed to send so the key feature is that all of the communication so the sending of a demand and sending of elements is on a synchronous so in the head because we never have to stop but it's also safe because the Upstream can never send Marvin it was allowed to
 got it what do I need to know about the lower level Network protocols like TCP or UDP HD. Website gets in order to understand reactive streams more thoroughly
 so that's a good question and it's also one of the confusion points about Rex extreme so it's a good question to ask you so sleepy Hasselbeck precipitant it's so cord TCP congestion window so it basically says which bites that has received silver sending side of TCP doesn't have to resend those right so if we stop advertising to the ascending side of TCP vets we have received these messages or you can send this invoice much data to me inventor of stream is basically being backed Richard over this evening however what's will it recent years we have been building in in what all kinds of web servers was
 we have his back pressure on the wire so between the client and the server but we didn't propagate it all the way through into the application so for example imagine if it's spelt I'm on Twitter and I'm streaming tweets to a mobile phone and so it stops receiving the tweets however the server keeps generating the tweets on it it keeps punching them generating block later for us but it really doesn't have to it it doesn't even have two powers or prepare of the tweets because the downstream so the mobile client is in a tunnel and won't be receiving the tweets anyway
 so what's reactive streams allow us to do is to take Visa TCP mechanisms and take them and expose them all the way up to the application so the TCP streaming server can realize oh the the client is in a tunnel so I won't be in generating between for him because he wants to be receiving them anyway and when the client comes back the TCP back pressure again picks up and starts consuming that we went to server is being woken up and starts generating tweets again and this is pretty much since parents just buy the effect of using any Rec the streams compliant Library you don't even have to think about it
 okay what are we going to zoom out and draw to a close in this conversation what should people be taking away from this discussion is there something about the way that we write our applications that is changing that makes reactive programming more appealing as a paradigm for writing or application yeah definitely I think the biggest takeaway right now is that we have a
 I wouldn't say striving a nice ecosystem because we have G standards and everybody is cooperating with each other so it's not like it and then previous and diverse were some Library would do a thing and we with whatever everyone off and you can't use this thing if you're not part of that ecosystem now we're in this wonderful point in time where all of the ecosystems starts to convert because his idea of streaming data is so ubiquitous but basically everybody wanted to participate and instead of fighting each other over libraries kind of joint efforts and I think that's a really good time to go to pick up on it because that's a huge huge ecosystem and it's still growing
 the one aspect of
 but with one thing I read about is it this is growing movement called No ETL that is trying to move us more towards stream processing and less batch processing and there's some Association here between reactive streams how do reactive streams fit into this paradigm shift
 so again so like we talks in the beginning of a reactive is a very overloaded store Sudley streams is a overloaded to him as well so for example people would say what what's one thing plus 4 verse for Java streams which aren't streams at Olvera to sperle collections so that's one offender when we have spark streaming which or most is propyl streaming but it actually is just very small batches and then we have new libraries with sling that are actually really streaming data processing and streaming data analytics and then we have reacted streams which are I guess at the Peoria local abstraction you can think of them like a overpowered iterator reading and a synchronous back pressure safe it's rated R so anyway it is very hard to compare
 when someone asks could you compare reactive streams with no spark streaming because yes the world is the same but the goals are complete the difference so this is something that we we have we have a new challenge in defining terminology right now I think
 how are the ideas around reactive streams changing the jvm ecosystem
 yeah that's that's a great thing so like I said it is a standard Mortar Board organizations participated in including this guy's such what's up so
 and it wasn't really don't approve of a usual JCP process of it would have taken you know, tease voting on a PRS and ballads and and stuff like that but it was really a need of her entire jar of a community to come up with this coming to a pie with all of us felt we need it and then it still flooded so use for what it's worth to include in the jdk so now it's not only a random library but everybody is implementing the APR but it actually will be in JD canine it's going to be a job for you to come currency flow
 does basically a copy paste of the rate that streams of the faces so it don't show shows fat with enough Corporation and needs to do something important we were able to move for Java ecosystem forward in ways that we previously fought is impossible
 so they're all these companies that are using reactive streams in contributing to the projects Netflix typesafe Red Hat pivotal could you just close are you talking about why reactive streams are relevant to these different companies how they're using the streams in production the other guys because I have fun most complex about us so the reason we came up with why we need Foods was basically so types of results of the company behind what currency Lights band is the company behind the play framework and in play if it was a way to do your streaming API ice and if it was very high school inspired
 so
 then it wasn't a very good fits van inaka we also had some back pressure for the course but they were a bit hard for users and then we talked with them Christians we kind of converged Birds hey it seems what we all need for same thing which is slowing down the rate of producing if it down streams can't keep up so for example of invocation of October it would be verts it's great for that goes so fast and we do so many millions of millions of messages per second but by the end of the day we are hitting this Legacy system over there with a few million messages per second and we basically keep killing our own systems in some company so we really need the way to do
 as fast as we can but not Foster and then it turned out for the money over a company's and like I said it's all right size for Netflix case was exactly that they were having trouble with let's not kill our own servers and turns out everybody was tackling the same problem which way which is why the movement came to be and everybody participated
 alright Conrad well thanks for coming on the show this is been in Illuminating conversation about reactive streams and akka and really glad it had you on thanks for having me
 thanks to sinfonico for sponsoring software engineering daily symphonica is a custom engineering shop where senior Engineers tackled big Tech challenges while learning from each other check it out its symphony.com SE daily that's s y m p h o n o. Com SE daily thanks again Stefano
