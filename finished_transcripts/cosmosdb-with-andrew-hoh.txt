Transcription: different databases have different access patterns key value document graph and columnar databases are useful under different circumstances for example if you're a bank and you have a database of customers and the transactions that they have performed the ideal access pattern for aggregating the total amount of all transactions might be a columnar store if the transaction amounts are all in one column it helps to have all of those columnar entries close together on disk however if you wanted to look at your bank as a social network and you want to be able to map how money flows between the different people who use your bank you might want to map that data is a graph database that would make it easier to query for the connections across the different users in the bank Cosmos DB is a database from Microsoft that allows for multiple data models and multiple well-defined consistency models
today's guest and hijo is a product manager at Azure Cosmos DB and he joins the show to describe the product Microsoft unveiled Cosmos DB at build their annual developer conference which is where I performed for this interview it was a pleasure hanging out at build in the podcast booths that they set up so thanks to Microsoft for inviting me and setting up is awesome podcast Foods
 flip the traditional job search and let indeed Prime work for you while you're busy with other engineering work or coating your side project upload your resume and then one click game immediate exposure to companies like Facebook Uber and Dropbox interested employers will reach out to you within one week with salary position and Equity up front don't let applying for jobs become a full-time job itself with indeed Prime jobs come to you the average software developer gets 5 employer contacts and average salary offer up $125,000
 indeed Prime is 100% free for candidates no-strings-attached sign up now at indeed.com SE daily thanks to indeed Prime for being a loyal sponsor of software engineering daily it is only with the continued support of sponsors such as yourself they were able to produce this kind of content on a regular basis
 I'm here with Andrew ho who works on Cosmos DB Andrew Howe welcome to software engineering daily yeah thanks for having me you don't excited to be here so we're going to talk about databases and Cosmos DB but let's start with just the idea of the fact that many companies have different databases for different reasons and they often are putting two copies of the same piece of data in different databases why do they do that so my experience I've seen that people tend to use databases for a variety of different reasons so if they have a certain latency requirements if they have certain consistency requirements if they have data that needs to be connected to certain analytic Services they'll find themselves duplicating data putting in to a relational store putting into a no sequel distributed database they put it kind of all over the place of the typical example I always think of is there individuals who like going
 with the hot storage in Cold Storage I don't know if you're familiar with that pattern but it's basically it's not really the land architecture I think Landers more function-based but this is like it it's part is a component of the architecture it's it's purely based on I need really high performance but I don't want to pay that money of having you know tens of terabytes you know almost at the petabyte scale of data all honesty is all you know it in memory so I try to put as you know a day's worth of data a week's worth of data inside my hot store and then the rest I put into Cold Storage the architecture actually works fairly well just because you'll find yourself managing the budget much more easily it's much easier to get approval from any managers when you have an architecture that leverages cold storage you can also expire outdated to save cost as well so what are the costs to doing that to the cost is now
 double saving your storage essentially you're saving different granularities talking a little bit about how even the team manages It's Hot and Cold Storage you'll find that we keep about a week's worth of data and hot storage that we can do Cory's much more efficiently if a customer comes in with a request to figure out why did this not work or you know something happened to your can you give me some more insight we have to do a quick for you to happens to go through within a second for that we need to make sure that we have in a hot storage when we're doing Cory's for much longer turn data. Let's say someone is asking for their bill for the last 3 months then we could go to Cold Storage let Aquaria run a little bit longer overall we even do it granularity so we make sure that we have data points for at the minute at the second level for the hot storage and then we expand it out to the Daily weekly level for colder storage this date of power works very well just to optimize cost it's in the dream scenario a lot of people would like to put all of their storage in
 one database I want hot storage database but in the end but we found was if you go to your managers or to go to management say I have a solution that's going to cost $100,000 per month to $500,000 per month you'll find yourself not easily able to architect that without without you know strong justification so I do see a lot of people W can storage I'd also like to highlight there's a lot of people who tend to W storage because they feel like with different databases you get different capabilities so for example if I have Dana that requires a nosql database for the low latency reads and writes like Cosmos TV which is a distributed database you'll find yourself using that for the late latency and then you might also find yourself storing data into a sequel DB just so you can use a reporting services so it's equally be if it won't be identical data what you'll probably do is get different granularities probably
 Gates that was some of the data for daily metrics put into sequel BB and now you can do different porting services on it eventually cause we'll see if you will get a lot more integration and you'll find yourself using it for a lot different for it dearly you'll find yourself having a lot different analytic Services attached to it for reporting reporting reasons and with that you'll find that you know you cannot keep all your data within console TV without having to replicated to another database the world free Cosmos DB cuz I didn't get illustrates better what Cosmos DB is when I think about some of the most notable access patterns for different database types you've got the classic row wise access format which is like a sequel database you've got the document style format which is like a mongo database you've got the columnar format which I think Cassandra Wright kassandra's if a colander format where you can access the entire call
 all at once in a really efficient manner definition Manor you've got graph databases which can represent that that's like neo4j which can give you a physician query times if you're trying to find all the connections between a social graph so it what time is it with the key value day what's the popular keep a database the most popular key-value database I would say it's simple storage kind of like S3 for AWS for blob storage key value also table storage more table storage we have a single index attached to your actual data and you can easily access it from that yeah there's different applications where you want these different types of databases like if I'm Facebook you know I've got people that are wearing Facebook to find the free
 that are closest in similarity to me if I make that kind of query sure I want to graph database and if I want a query for the the sum of all of the number of likes that I've gotten over the last year maybe you want a query a Cassandra like thing cuz I can aggregate the sum of all of those likes overtime but there is some overhead in maintaining all of these different models at once because if I'm building a graph represent graph database representation of the world and I update that graph database representation probably I also want to update the the columnar database representation now where we're going with this is that Cosmos DB includes the ability to have multiple different models so could you talk about the pre Cosmos DB world how are people typically reconcile
 playing at the differences between there different data models so what we find is with Cosmos TV will revolutionize the worlds with different data models that you can put into a single database databases are inherently very flexible so you'll find that you can put in different data models with side with in Cosmos DB and you'll find very good performance I think when I think of a graph database it has vertices edges and you're able to Traverse the graph can easily be put into the database you can have your nose being represented in Hopper what you want for both efficiency and the concept of having a dedicated database specifically for your graph database specifically for calmer types is a little bit of
 it's it's a subset of culture that's come up with in the last I would say 5 10 years where everyone's looking for a specific database for their specific need or do you have a highly optimize database that's really efficient and doing you know the basic proper Asians create Reed update delete and then you can add more function lights on top for graph traversal is for updating documents for extracting key values simple index returning the value you'll find yourself in a state where you're able to use a database in many different ways that weren't previously thought possible so you can use it as if I were to model my data in a way where I just have a single indexes and single values and I just searched on it within with the simple query that's all very efficient because a document database has an extra set up so that you can have your simples single indexes and your values but documented pieces are a little bit more because you got a secondary Nexus you could have nested data structure and so with that you
 also support the secondary indexes and we have the auto indexing to make sure they can access any part of the document and forgot that we can access we can access vertices we can access edges that are all models in a way within our database to make sure that it's extremely performant underneath you'll find yourself that it shares a common G some structure across the board the native functionalities for a graph is graph traversal and we can add that logic inside the database to make sure that you can't reverse inefficient way as well for large-scale Aggregates we have architecture spring that as well to make sure that you do get the benefits of Commerce door at the beauty of Cosmos TV is that because it's a fully managed service all the implementation details all the hassles of resource governance so resource governance his part of a multi-tenant system where we can make sure that there's no Noisy Neighbor problem if I'm a user user a and there's another user user be and we're using the same tenant we make sure that we have strict regulation so that you're not taking up all the sleep you.
 bring your eye out for anyone else experienced down time and with the resource governance merge with a lot of the infrastructure and what were building out we can guarantee that you get these high performance you won't see much of the details in terms of how was this done you won't have to worry about how do I setup my replika set how do I set up the global replication a lot of this has taken into the cosmos TVs hands because we want to make sure that all the hassles of setting up in the proper way so that you get this highly perform a database that works well as a graph database because the hardest thing is if you went to someone and said hey can you set up a truly performing graph database they need a large Seem to really understand how databases work is a massive team that has a ton of experience in building databases so we understand exactly what values you get from different databases and were able to take the best parts and put into a single database as of right now those optimizations are four specific day today so if I choose broccoli beat you'll get a lot of the graph optimizations if I choose
 mongodb flavor for the Cosmos TV account go get the car mongodb optimizations and if I choose the native documentdb I get the needed documents to be optimizations eventually we want to move to a model where we can share a lot of optimizations across the board but that's much further down the line where we have to really think about how we can share it with out paying some type of cost in terms of extra storage overhead extra index overhead or lack of performance because there's conflicting matters in that aspect so just to be clear today if I'm setting up a new social network and I want to make a graph database within Cosmos DB and I also want that data represented in a row wise format like a sequel style format I need to make two different Kosmos databases as of right now you have to make a Cosmos TV account with the flavor of breath to at the creation time you have to specify exactly what type of day tomorrow you want eventually that might be going away where we able to combine
 virgin altogether work is actually started for that as well and that will happen for the done alignment
 ready to build your own stunning website go to wix.com and start for free with which you can choose from hundreds of beautiful designer made Temple Shipley drag-and-drop to customize anything and everything add your text images videos and more which makes it easy to get your stunning website looking exactly the way that you want plus your site is mobile optimized so you look amazing on any device whatever you need your website for Wix has you covered there showcase your Talent start that Dev blog detailing your latest projects grow your network with Wix apps made to work seamlessly with your site or simply Explorer and share new ideas you decide over 100 million people choose which to create their website what are you waiting for make yours happen today it's easy and free and when you're ready to upgrade use the promo code SE daily for a special
 SE daily listener discount terms and conditions apply for more details go to www.wix.com Wix l p s e daily create your stunning website today with wix.com that's wixx.com
 so if I spend up a graph the cosmos graphdb and a Kosmos sequel DB there's nothing that I can do wear if I update something in the graph version it'll just easily propagate to to the sequel version I still need to do some kind of like maybe ETL job to pull the data from the graph database and put it into the sequel database right well are you talking about the sequel syntax or API on top of Cosmos TV or talking about a sequel server instance or C contagious if I set up so I guess that's the day I'm having trouble understanding I get Cosmos DB is a place where I can have a hosted version of any of these database access and consistency models whether it's graph or calling her or so on what I'm unsure about is if I have a data set that sometimes I want to access it like it's a graph sometimes I want
 access it like it's a columnar store sometimes I want to access it like it's a it's a document store does cosmos solve that problem and unify those different data sources or does it just kind of present a way of Hosting any of those different databases it's so the question in the first option second option we talk about is it one or the other it's a little bit of a combined solution to that just because when you use the underlying database technology that supports Bowl you'll find it it's actually fairly easy to expose all the aps as well if that makes sense so it's not like if I save it as a graph database I can actually still run a sequel query on top of it so I can go right now and did the addres management portal do they select star from C select different properties that was there in the underlined database infrastructure
 so for the graph aspect there are a couple additional functions on top that will let you do the efficient bract reversals for the key value look up or document look up so we still have the automatic texting so that you can still do the sequel star from seat which is incredibly efficient the indexing really hasn't changed index different parts of your document automatically we allow you to configure it's that you can text with your past as well and so that underline infrastructures identical so you can still run efficiency before he's on top of your graph database as well you know you can do that right now provisioning A Cosmos TV account what is the underlying children I mean the thing is if you set up a cosmos DB database and say I want this to be like a graph database or if you say I want this to be like a call Andrea yes you have to choose different flavors right one of the five flavors so if I set it up as a columnar store and I give it a query that is optimal as a graph that that would
 if I gave it a query that would be best answered by a graph database I'm not going to get the latency the Hyatt the low latency that I would get from a graph database right like I would get some degradation in the quality in a query quality because I'm accessing a columnar store with a query that would be best suited for a graph database actually you'll probably get the same performance is not better still I think I guess I should elaborate a little further because a lot of the indexing that's done for the Cosmos TV objects are can be shared across the board so quick example if I were to run it as a document store and I want to extract values ABC I simply have the automatic indexing Bell index my document to actually index properties ABC and I can quickly go and find ABC if it have as a graph database now let's say a simple graph operation is pseudobursa neighbor
 is actually saved within the database so that if I say I have a Vertex Mary and I want to find the neighbors of Mary that can easily be done on the database the whole but I can still say if I want properties ABC same as a document from Mary that still done in the same index in car until I get it all back efficiently so the way to think about it is Cosmos DB is leveraging a lot of flexible technology that can be shared across the board it has a lot of resource government social infrastructure technology that lets you take the benefits of indexing just because indexing a shirt across right any database one of the most important things is how indexing is done how do I index my values how do I make sure an end once the indexing asset you now have to wonder well there certain operations at different databases are really good at right for a graph database it's really good at doing traversals or documents or it's really good at picking up values that might use secondary Nexus 4 key value obviously its primary Nexus
 you can see that there's a common pattern where if I said of indexing structure that has a primary next is the secondary index is that index is the graph and then I have the additional support to have the transaction so that or the operation so that I can do brats reversals I can do my sequel cruise I can do my mongodb Cory's now you've kind of Building architecture where you're able to support a lot of functionality across the board in an extremely performed way right so it this year automatic indexing that Cosmos TV has can you leverage the route and you'll find we have a white paper out there where you can read and kind of shirt are the details of Hauser help me understand it how do I choose what flavor because if I can choose the flavor of the rose store or the document store or the graph store if it's all going to index the same why does it matter what flavor I choose I see so as of right now I think the best example I could give is the mongodb API mongodb supports a piece on format it's a binary Json format
 it supports a lot of additional data types that weren't there on the underlying tissue structure initially where we have to make some modifications to make sure it works efficiently and so as of right now if I save my data on my piece on it safe with a couple of metadata and if I do are my sequel query on this data it's going to look a little bit different because these are data plans that were normally support it and he Jason Jason scheme of documentdb and so we want to make sure that these type of confusion still really happen until we make a lot of infrastructure to make sure that the Simplicity and the understanding of the database reaches where you know where we're trying to get so that if I use different api's and I mix and match that I won't see any unexpected be here where I'm like what is that property I don't really understand why is that there will that was probably there to make sure that the database is very efficient and eventually we all kind of hide yo make sure that those details are natively in the database engine so that is not exposed out front and you'll be able to run it extremely fishing quarries cracked rubber soles and Dale mongodb pourri
 erase all those okay so if I'm a startup and all of my data has been written to my sequel or to Cassandra and I see Cosmos he being out of my grade to add what's that migration path I see so the microwave she passed will normally go through a typical I've done a couple migrations for a couple of customers where the process is in a couple of stops first you want to make sure that how much de to your migraine is over if your startup you can mean that it's within 10 gigabytes 100 gigabytes and with that means am I can I afford down time right so if I'm usually taking out a large amount of data from a database you'll find that it taking up the CPU the memory the network bandwidth from your current production application to determine that is the first step the second step is where we're really trying to help a lot of our users saw migrations by fixing the code Redevelopment there's a lot
 cold out there that's already using mongodb there's a lot of cold out there that's already using Gremlin and so we want to make sure that we open up a lot of familiar API so that people can leverage database temperature to which we already have without having to change your application and so as we start expanding a lot of these languages out as we started supporting more drivers as you sport starts order more of the models you'll find that you'll be able to do migrations with the simple data migration rather than an application migration and the learning curve as well there's a lot of people out there who aren't really familiar with documentdb shooting syntax and so we want to make sure that we open up a lot of different flavors so people can understand what the difference is between a document Houston Texas versus I need they don't have to understand this between Bradley and or mongodb and there are a lot of people were already familiar with mongodb which makes it a lot easier for them to use this Cosmos TV infrastructure without having to relearn something
 as I get tons and tons of data at my startup or if I'm even building an iot application where I don't have very many customers but I've got tons and tons of tons of data why is the developer need to make some decisions about how I'm going to spread my data around give a general explanation for how databases get shorted or partition door replicated and how that applies to what the developer has to do when using Cosmos DB and so partitioning in general it's not it's not as magical as you know many people think it's still technology so you still have to understand when I'm partitioning any database I need to understand how to partition my data let's take a typical example or maybe I should provide some contacts for partitioning so with any distributed database you're finding yourself scaling horizontally so horizontally scaling means that you're not getting beefier better machines rather
 you're doing is your scaling out and adding more partitions this is a nice infrastructure where you're trying to hit that no terabytes petabytes scale without having to get this single machine that has this much ran that has this much memory on that has as much as a hard disk for ssds and so and you're finding that the cost is exponential when you're getting beef your machines and so with distributed databases what you're doing is you're adding more partitions and you're able to scale out that way in storage as well as throughput when you scale on in this effort to make sure that you choose a really good shark here partition key biss key dictate exactly how will the date of you separate across partitions this is incredibly important I think there has to be more emphasis in the database World about choosing a really good partition or Sharky just because I've seen a lot of different users choosing a bad purchase key which leads to one partition overflowing all the requested in one partition and this is obviously not a scalable architecture they're going down a path where you know that's a typical example
 Liz I have customers birthdays and I have a application where I'm sending a birthday message to Webber's birthday is like Facebook Facebook will send you a happy birthday or it's this person's birthday every time one of your friends has a birthday I'm sure you're familiar with that and then in the partitions if I partition my data by birthdays I'm finding this it's at least distributed well but let's say a lot of people are born January 1st now all my requests are going to the January 1st partition which is not really scalable I guess a better example I would give his airline days when I'm booking a flight a lot of people go home for Thanksgiving a lot of people go home for Christmas and if I'm partition you my date my data by the actual dates you're finding yourself a lot of request going to one particular to partition that hold the dates for Thanksgiving as well as Christmas do you want to make sure that you choose a partition keep that evenly distributed so that your data can evenly distributed Frost X number of partitions you provisioned today
 just in terms of storage and in terms of request you want to make sure that let's say I have a new company that caters to food delivery in York City if I partition my my database by cities that's just the worst thing you could do just because everyone's in New York City it's all going to go to one partition anyone from San Francisco will go to another one but you're not really getting that through but right you're not really able to hit request to every single partition until you want to make sure maybe you do by ZIP code maybe you do it by their first name and last name which is much for distributed and so you want to make sure that you really choose a partition key that spreads out the through but spreads out the storage and you also want to make sure that the person key is known so that you can direct your Cory's so let's say I Partition by first name last name and put all my Quasar who likes to eat in a Korean food that's not my partition key so I have no idea where that data lies which means every time I send that Corey it's hitting every single partition and that means every single machine is running
 for each figure out well you know who likes Korean food this is much more efficient if I say give me all the people named Andrew starts with an s or you know whose last name is hello go find everyone there and now you're going to find yourself only hitting a subset of the partitions I have everyone's first name and last name and this is a much more scale of architecture that will grow to terabytes petabytes whatever you're looking for
 does an application developers approach to using Cosmos DB change if they are having a right heavy application or just a read heavy application with few rights yes so if you have a super read heavy application you do want to choose a a partition key that allows for a lot of Reed heavy aspects to it so let's say let's see I know that one example would be people who read the news one person will publish an article but there might be millions of viewers if you know that it's kind of this type of architecture then you want to make sure that when you do a read you know let's say you're getting a list of all the news articles for that day you can separate it out rather than doing a birthday by partition right so you don't want to really make sure that you're not going to a single partition for all those reads but it's separate across for a right heavy one you want to make sure that all the rights are going across some of the other typical things that we see is when you do
 right for right heavy application going to make sure that's as fast as possible so you want to really make sure that when you're doing a single right that all your data is kind of it's easily updatable if that makes sense so in the typical database world I think you probably already familiar you have data normalization who's the normalization so let's yep today normalization is you're able to take objects, part of objects and extracted out so that if you're updating that you only need to update it once rather than for everyone or example let's save the city of New York changes changed its name let's say it's no longer New York City and they decide to name it just York City or something like that rather than going to every single person and changing their New York City you can actually put an ID and reference a different document and change it once and so that every time you read you'll have to read the person as well as the actual City or the ID for the city but
 right it's only update that one object and so this is some of the things that you do need to think about what your model in your database to make sure that you can have this efficiency in terms of reapplications invite applications that you don't need to do you know for rights every time for a right heavy application or else that's kind of a waste on the database you want to make sure it's catered towards that
 where a Microsoft build you are well you've been standing out in the expo hall for much of the day so you work on Cosmos TV work with the team you and I know each other outside of Microsoft with mutual friends but the past couple days you've been just standing there so I let people who haven't been the conference is every software engineering conference there are talks but there's also this giant expo hall where there are sponsors and what's his word Microsoft build it's like half external third-party sponsors in like half of it is Microsoft talking my new technologies they've been announced it build or things that have been popular over the last couple years or whatever the Cosmos TV is when the new things that was announced so you are standing in a booth representing it demoing two people talking to potential customers when these people are coming and are expressing interest in Cosmos DB or they're saying yes I'm going to use that what is it that they're excited about so
 some of the things that they're really excited about is there able to use the familiar api's I know that one of the biggest blocker for someone to use an application is that you have to learn something new you have to really understand it and you need to pitch it to your team and you have to tell them all to go buy a book watch all these videos and learning new technology especially in the database world where and you migration is a combination of action moving your data it's actually changing the application and it's teaching everyone and the last one which is also very hard as you need to go to management and say this is what we need to do I need to explain how the value propositions kind of outweigh the cost of getting all these people to get on board and make sure that now all of your application and points still meet their SLA exactly exactly and so with that we've kind of were we're aiming towards unblocking one of the big blockers which is learning something new as well as change your application code and so we found a lot of people
 interested in a graph support a gremlin support we're very no Gremlins already familiar with graph databases and it's something that's much easier to grasp with that you know are Mongo support which is been there for about a year now I think it when she ate last month that's all so excited to people where they able to use their familiar mongodb-query he's against a full E-Pass service that has for those who don't know passes platform-as-a-service and that has all the benefits of allowing the cosmos DB team to manage the upgrades handle the 4 a.m. wake UPS in case something goes wrong to handle it all that sell a used to deliver 99.99% availability and all of that management kind of goes to us that we could free up time for everyone else
 and then the next thing that people are really excited about is the global distribution of people lot of people are looking to replicate their seamlessly across many different reasons as many of your familiar with Azure has 30 + data centers I believe as a cloud provider probably the most in the market and people are looking to actually replicate that data across continents to deliver that low latency as well as for Disaster Recovery scenarios LOL when your business is relying on your database and a natural disaster that you have another replica of your data so that if something happens that can easily pick up as the right region the region to make sure that could deliver all the request and you have no down time for any type of custom you know Production service that has needs to meet this kind of 99.99 availability and we have SLA is on it financially back that's the lady saying that you'll delivered a 99.99 availability and it's financially back so that you know if we don't and we offer metrics in the portals that you can actually see it to make sure that you keep us honest
 what is your responsibilities working on the project so I am a program manager for Azure Cosmos DB my responsibilities have shifted over the time I've been on the team for two and a half years is full time I entered three and a half years ago so I was in the first batch of interns I rejoined we've been through private preview public review we went through its GA now with the cosmos DB we went through this GA as well and my rolls and hats within the team is change from Iran compliance at certain points Iran privacy security from the program and your standpoint I ran some of the customer acquisition so we all worked on getting a lot of big Enterprise customers I ran some of our development tools a lot of the Azure integration so how does it integrate with other Hydra Services I worked on the mongodb API and so kind of a little bit of everything do you like the variety yeah it is
 very unique in terms of getting this aspect of working on many different parts of a product because lots of products are very big as you can imagine if you work on a certain product you know within office that's way bigger you'll find yourself working on a small scope and with the small scope you're very focused in which is nice if you're looking to get a very deep deep dive into whatever technology you're working on since we worked on the technology all the way from before public Reggie and private preview I got to see the development of the product I got to see how we actually go and acquire customers how we build a community how do we make sure that our customers happy how do we deliver this kind of happiness I think the biggest thing is when you go to a customer show them the database you help them work with it and they're just ecstatic ecstatic for go tell management that they want to move on to it and that kind of gratification really goes a long way
 artificial intelligence is dramatically evolving the way that our world works and to make it easier and faster we need new kinds of hardware and software which is why Intel acquired nervana systems and its platform for deep learning until Nirvana is hiring Engineers to help develop a full stack for a eye from Chip design to software Frameworks go to software engineering daily.com Intel to apply for an opening on the team to learn more about the company check out the interviews that I've conducted with its Engineers those are also available at software engineering daily.com Intel come build a future with Intel nervana go to software engineering daily.com Intel to apply now
 when you take a task like compliance or database security I mean that something that you probably didn't study database Security in college but I'm sure there are plenty of people around Microsoft who are experts in database security so is your processor when you win when your boss comes to your the director or whoever it is you're higher up and says okay you're on security Now is the process of doing that it's like you just go around Microsoft and like ask as many people about security vulnerabilities like what what's the process for that Top Notch security team data platform and these individuals are the experts there's one there specifically for different aspects a badger and these individuals would go and try to break your database and you know the matter what and these are the individuals who are up-to-date on all the security flaws when are they released and they're the ones who will make
 sure that we do critical updates my job and my role is to interact with them fully understand and give them the tools to make sure that they can test against the database as well as make sure that we get to deliver a lot of the security rule requirements in time obviously it's very tough just because you're coming Straight Outta call JB Andrea Lemaster you know a database security I think as we kind of move along a security flaw you know details get harder and harder as people who are more familiar with that come in I kind of shift it off more towards he mongodb guy enters a client's compliance was a little bit easier just because there really wasn't a lot of expertise in Cloud compliance that's still not something you can go into a database class in college and learn that something that's still very unique and so when I came in I remember just reading hundreds and hundreds of pages on clouds compliance a different certifications and with that it was much easier to understand exactly
 people are looking for exactly what different companies required and learning about the details of what makes ISO HIPAA compliance all of those its it was interesting but yeah I think they're manga deep and growing the business a little more interesting to me that compliance and security engineers and we have anime shows about program management but I find interesting especially when you work at a company like Microsoft and the products touch such a multifarious group of different types of customers you really have to have all your bases covered when it comes to things like compliance and you you can't release a Half Baked thing with in regards to security but just tell me more about like developing a varietal Acumen in all these different things
 so it's the best way to get started is always Microsoft is such a big company but there is an expert somewhere and what you're looking for whether it's in the date of platform team whether it's an Azure whether it's an office whether it's in Windows there is there are experts throughout these are people who have 10 plus years experience in this specific field and so the best way to get involved is just going out reaching out to a lot of them asking for an hour or 2 trying to understand power toothbrush or navigate in a big company regardless zactly exactly but now it's it's to learn it's also good to networks that you get some more connections within the company but it's good to learn and learn a little bit about what people have been working on understand what they've been working on and then use that knowledge to kind of go little bit further and you know the truth is you know working and almost like a startup with the Microsoft you're finding yourself still interacting with a lot of starter problems where you run into a certain issue you have to resolve it and you're
 scrambling to find a resources understand the problem finding to scramble scrambling to find the resources actually solve the problem and this is this is definitely run is reminiscent of the first year and a half of working on the team after after that it's kind of going to a bit where we have specializations now where there's a lot of different members of the team we specialize in security who specialize in resource governance to make sure that your database has this you know streets are coming so nosy neighbor problems people focus on Cori's people focus on the data modeling for supporting the different models that you can use Kraft key value and documents and so what does specialization it's it's a little bit deeper now where I'm diving a little deeper into the mongodb API which was very interesting just because mom has any probably Rich language learning that was you. Took a lot of time to figure out the details and understand what makes a difference is and kind of working towards that
 pop-up this fundamental question between consistency and availability exists in any kind of distributed system certainly a globally distributed database this is going to be the case and I think most of the listeners who are familiar with distributed systems episodes know about the cap theorem and just that there is this trade-off between if you want higher availability you're probably going to have lower consistency you might have one user that accesses the database and gets one set of data another user access the database to a different Saturday does he have his inconsistency that can be okay for some applications what's something new that you learned about this trade-off between availability and consistency when you've been working on Cosmos DB so one of the key pillars Cosmos DB is this is where kind of the Visionary of Dharma Shukla who is the founder of console CD came in where you found that the
 typical consistency levels which range is kind of binary you have your strong in your eventual there are a couple others that you could put in between there that really captured different value proposition so different needs and as of right now Cosmos DB supports eventual as well as strong but we have three other flavors in between which is the consistent prefix session as well as bound is down this and if you've already familiar with your bench on strong I could talk a little bit about the three others in between so consistent prefix allows you to have a guarantee on the order of right so that if I do write ABC I will never have the replication across to know it's that go out of order where have sea written first and then be which means the way to think about it is you won't have an invalid State I want to have a state where C&B in a haven't been committed and so this is something that's a nice guaranteed have that's consistent prefix next you have your session session is a default for Cosmos TV and this is the one that really is you
 it's quite frequently because a lot of developers want to see their own rights The Witches session allows a user taxi see their own rights we don't guarantee for anyone else to anybody else who it's the cosmos DB database will find themselves they could have a steel read put the user is guaranteed to have their own read they're able to read it on right witcha myself for sure the next one is bounded stay on the southbound is the illness is we put the cap on the delay of replication so basically I want to make sure that I never get a read That's Taylor than K prefix in terms of time operations on to make sure that my reed is never older than a hundred rights I want to make sure that my reed is never older than 200 milliseconds 300 milliseconds and just kind of caps off exactly what you're able to see you have your strong you know it's early committed to all the replicas eventual where you know there's no real guarantee
 ordering as well as there's no real guarantee whether you can see Austell reach her and this is really pivotal because there's a lot of people who just find that they need different type of consistency levels at the global scale to figure out what their application dates for example if I have Facebook app where I'm writing to my comment section I want to make sure that I could see my own comment how to make sure that if I write a comment I see it in my newsfeed there's no real guarantee that anybody else who sees the comment needs to see it right now there's no real guarantee that they can get a steel read that my comments not there by rated I can see it until with that you can actually use the user to the session consistency to make sure that the individual who wrote that, I can see their own comment and eventually they'll propagate to all the replica Mobley what are you able to see it across the board of anybody else who is looking at your will your wall if you're able to see exactly that comment and this is a little bit of the nicest where you're able to have the trait
 between consistency and availability and you can tune it to whatever you need yeah and I think it's really interesting that the fact you've got these 5 consistency models and rather than asking the customer to understand the finer points of a distributed database you just say okay here are the different consistency models week we can offer you and you can give some examples like that comment example the the comments on Facebook and you could also say oh I don't you don't want your comments to be out of order so maybe you want just the ordering consistency what was that other consistent prefix yeah it definitely gives a lot of power to the user so that they can choose I know a lot of nosql distributed databases have that mentality of
 have either or strong or eventual and now that we have a little bit more because I figure it fit configurability now people can choose exactly what they need and this is a lot of the mentality of the cosmos TD and Compasses you able to choose your own data model so you're only two types that you can or models that you can run a graph database key value column you can choose what api's you want to use with the manga DDD sequel like it does most the table storage and then you can also kind of cheese you can configure your consistency levels as well so this is the extremely flexible global scale Loli and see database that as your provides strength so what's in the future for Cosmos TV to the Future in Cosmos DB is expanding out a lot of the different api's to make sure that we capture the ones that people are we looking for 2-wheel prioritize depending on all of our user feedback what they're looking for a top more api's what people from miliar with wheel drive the graph support as well as a table store support to pay
 public I guess g a general availability for those who don't know and yeah and that's kind of all I know as of right now Great Bridge a daily cool thank you
 thanks Justin Fano for sponsoring software engineering daily sinfonico is a custom engineering shop where senior Engineers tackled big Tech challenges while learning from each other check it out at symphony.com se daily that's s y m p h o n o. Com SE daily thanks again to Stefano for being a sponsor of software engineering daily for almost a year now your continued support allows us to deliver this content to the listeners on a regular basis
