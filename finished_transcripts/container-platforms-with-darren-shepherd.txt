Transcription: container Management Systems like a kubernetes and Docker swarm give us a higher-level management tool for architectures built out of distributed containers container platforms like Rancher provide an even higher level of usability and today's guest Darren Shepherd of Rancher Labs takes us through what a container platform is and how it builds on the functionality of a container management system like kubernetes or Docker swarm this interview is part of our continued coverage of kubernetes and Docker and the other components of the growing container ecosystem and I always want to know if there's something of this area that I'm missing I really want to cover this area in-depth you can always send me emails with suggestions up some other quick announcement before we get started the software engineering daily Community is working on a project called software daily which was started by Jeff triple a member of the software engineering daily Community we're building an open-source news and information site about soft
I think this is really important project if you're a web developer who has some spare time you're working with react JS or flux architecture or nodejs or really any any web technology check out the software daily repo at software daily.com software engineering at daily.com which is the website of this podcast also has some interesting links if you want to check that out you can sign up for the newsletter software weekly you can join the slack Channel you can see my Twitter account or send me an email you can also find out how to host show if you're interested in becoming a host or helping out with the outlines that I prepare for these shows there are links for that on suffering daily.com with that let's get to this episode after a quick message from today's sponsor
if you want to learn about kubernetes go to aprender.com se daily today you can find a webinar about kubernetes covering microservices is persistence and multiple clusters you can also find links to a past webinar covering of the history the origins and the technical architecture of kubernetes the webinars at aprenda. Com / SE daily are hosted by Joseph Jack's a member of the cloud native Computing Foundation who was previously a guest on software engineering daily if you're looking to move to a cloud made of infrastructure platform that works with your existing apps you should also check out a printed. Com SE daily aprenda provides Cloud platform software that works with your existing applications and infrastructure looking to migrate to Cloud native but you want to maintain your existing application so you might want to check out kubernetes and a prenda
thanks to apprenda for being a sponsor of software engineering daily and if you want to learn about kubernetes while supporting software engineering daily go to aprender.com se daily that's a p p r e n d a. Com SE daily thanks again aprenda
 Darren Shepherd is the co-founder and Chief Architect at Rancher Labs during welcome to software engineering daily I'm glad container platform so let's start off by just discussing what that terminology actually means what is a container platform
 I mean it's kind of a really wide description so it's we would consider Rancher being a container platform which would be kind of the full and and solution which would be storage networking app orchestration so honestly I think it's it's it's bigger than what most people would think of in terms of kubernetes sore or maces for example but those are really like application framework for schedulers
 this differentiation between a framework and a schedule of framework scheduler and a container full fledge platform could you touch a little more on that right I mean it's kind of the premise of weight what we do is is for example you let say you want to run kubernetes kubernetes in and of itself is not really a complete solution it's it's designed to have certain plugins hooks for other things such like storage networking so it for example if you want to run kubernetes you know you might be looking at cheek it's like why does chica EXs because it adds in a lot more things that you'll need to kind of complete the whole picture posted version of kubernetes in so that automatically plugs into their storage to their load balancing to their networking and then additionally they have of your portal on top of it
 easy access to the command line so what I'm talking about like a complete container platform you know you have to go One Step Beyond kind of that just the application framework like the schedulers / orchestrator that you're using
 what are some of the problems that a container platform will solve
 a lot of them is dealing with I
 it's how do you scale your application how do use your application handle failure and then how does your application talk to each other so I mean these applications are they spray containers schedulers and everything there they're really oriented towards microservices that's where like they really shine so they're going to allow you to be deploy an application has been horizontally scale but then you can have multiple your microservices and be able to easily talk between us so they test for things like service Discovery come in the automatic networking your network policies for security so it really handles that you know it was there any communication scalene and then how to handle failure so you know your back health checks if your container goes down or your application right you know how you reschedule a where do you know what are you doing about that
 what are the advantages of these containers and then container platforms is that they provide an abstraction that improves the portability story for our applications even are distributed applications and reading Rancher is an example of this because Rancher can run containers consistently on any infrastructure I think it's probably the case with a lot of these different platforms do we need an additional layer of this container platform to give us even more portability because I thought that the whole story for containers was that container themselves can consistently run on any infrastructure do we get additional portability advantages from a container platform
 yeah you do inside that that has to do with when you so there's kind of two layers of looking at this as it's like from an end-user perspective like I'm just a guy on the developer and I'm deploying it if I'm deploying to kubernetes are swarm from the application developers perspective you know that's going to run anywhere that you can gets warmer kubernetes are mesas the problem with the portability that next layer of like okay I actually want to run Cooper netease if I wanted to play kubernetes like you look at the eye
 the docs are available no say like in a running kubernetes AWS on GCE on bare metal and there's a different approach for each one in so that's kind of where you start losing the portability is an actual bike deployment maintenance of the the Frameworks itself that you're running in and that's kind of the problem that that Rancher tries to solve his we make even that way from you know kind of like your devops Ops perspective the staff that you're deploying sub-site p.m. so that your application developers can deploy on that stock I can be run anywhere so you can really completely abstract yourself from the the you-know-what infrastructure if it's bare metal if it's Amazon if it's Google is your whatever it might be
 or heterogeneous infrastructure two containers here so yet another factor into this
 so if I were to roll to roll my own container platform story and Jose I've got some infrastructure where I've got some ec2 instances I've got some windows machines that are on Christmas I've got some rackspace-cloud instances and on each of these I am running some Docker containers and I want to network these Docker containers together and I'm not using a container platform what are the problems in the inconsistencies that I might encounter especially as if I try to unify these different pieces of of compute and I try to just treat them all as the same sort of thing
 sure yeah I mean I mean this really pops up when you start looking at that working so no let's see if I started an Amazon the obvious thing to do would be okay let me just start doing all my networking based on BBC you know there's a lot of things you can do with PPC with adding routes and when you build all your networking around Amazon now it's okay now I want to extend into let's Rackspace are or I have my own yo on premise of bare metal thing then you can be looking at like a VPN gateway then doing the routing and in all that so you know you start looking at every cloud that you add you have to take him take into account like how am I going to get the networking to work on that cloud so you really have to take a step back and say okay
 What If instead of using like the the infrastructure providers you know native capabilities what if I use you know something that works at a higher level and that's where you going to Delaware I'll decide you networking Solutions in the Box who provides IP stack base not working but there's other group projects like we've or Calico that will do this and so instead of us a using BBC's you just stick with a very simple flat modeling in Amazon do it take advantage of any of their features like security groups and then you just run something like Calico do all the network policy so then immediately that software is going to work everywhere so you don't have to consider you know what the difference is between each Cloud it in this to me this is one of the fundamental differences that work that were seen with his eye containers then then we had with virtual machines Woodbridge machines there was always just this the story of hybrid Cloud but what it ended up being is that each Cloud you
 but it requires a significant effort because you had to basically do all this integration work with containers since we're kind of moving up the stack a little bit of focusing really on my clinics or software or Raceway the operating system where we can just look at portable software and so we just started that way or is it okay if I portable software that can run anywhere then I don't have to care about my infrastructure provider anymore and it's by default a portable
 okay so let's talk a little bit more about rancher specifically as an example of a container platform and maybe throughout our conversation you can illuminate how Rancher might differ from other container platforms out there so
 the Rancher platform manages your hosts and the docker containers within that host what does management actually mean in this context
 yes it kind of depends on which which flavor of Rancher using so for most people it starts with you know what's going to be my application orchestrator so right now we support Docker swarm like a brand-new a doctor's appointment that will be released soon that will be supporting Rancher we also have the old swarm support but then additionally kubernetes Mesa and we have our own frame are called cattle that's been around for awhile so it starts with how are you going to deploy your applications so like for example to go by the interest these days and Cooper daddy selfie pic kubernetes okay you say okay I'm going to deploy my application with kubernetes now
 once you have that wall ranchers going to do on top of that is then add the management of the storage networking security access control it and then we have a feature with just called catalog which is basically for managing applications so you can kind of developer can bundle up your application to kind of into a singular unit like it might be a series microservices but it's in your unit and they can just click install manage upgrades and it's a whole new kind of management of that integrated 3 like it and I'm still kinda gives you a good story around lifecycle management applications and how to control that who can do what
 one thing you're saying here's that Rancher offers some swap ability for different schedulers like if you want to discriminate as you can use that if you want to use Docker swarm you can use that why would people choose different schedulers weaknesses and so kind of depending on where people are in their maturity was containers with your primary use case we see people picking or gravitating towards different ones I'm to be perfectly honest all these Frameworks are kind of converging to the same basic concepts so honestly over time you'll probably year so I don't think there's going to be a fundamental difference between them but right now there are some kind of clear differences you know
 you're just between the different primers that we support macios is really great at getting better resource utilization out of your Hardware in terms of its you're running a lot of Big Data stuff like that's really there your sweet spot is Big Data so we see you know if you're doing things like spark or do you know we see a lot of people gravitate towards me so's kubernetes is really great at running web-scale applications the concepts are extremely well-thought-out Google so you know if you're really looking at large-scale applications in really getting to this model if you know you don't care about your if you know where it's running or you know you it's kind of like the Pats vs cattle cattle model kubernetes is great for that kind of the downside of kubernetes is it is relatively difficult to get into it Concepts really complicated at first takes a while to learn it
 so the last one is swarm in swarm is on
 charm is kind of
 that one is still emerging because you know they just they technically hasn't even been released yet so it's kind of yet to be seen exactly know where that framework is heading but historically kind of where swarm has has done really well is within CI because it's very simple to get up and running it's very simple to integrate and there's not a lot of thought about like how to skill my application and do obviously it's just kind of you know it's very simple I want to run a container and so it's fit in the sea I really well
 when you talk about a platform a container platform like Rancher being integrated with one of these schedulers does that mean that I'm interfacing with the schedulers through Rancher like I might just using the Rancher command line to interact with the schedulers or am I actually using the command line tools of the scheduler you're using a command line tool of the scheduler so I can transfer perspective you know it's you can look at it like we're kind of integrating a lot of things are pointed together but we don't really want to get in the way of of the end-user like you picked kubernetes for some reason you want to use kubernetes we don't want to get so we don't try to provide some like normalized experience across the user you know cuz they all have their strengths and weaknesses it we look at it more from the perspective of it doesn't really matter which schedule you're going to deploy you're really going to run into the same
 types of issues in gaps to really get this to work within an Enterprise so you know that this is just one aspect of it there's a lot more that you need for the end of the complete end and solution
 for example monitoring tools Registries so do you to do you write code that allows Rancher to integrate with all these Toys R Us what's that want to use Prometheus is a monitoring tool over my kubernetes kubernetes scheduled cluster maybe if I didn't have a container platform like Rancher I would have to do some complex integration but Rancher gives me more of a plug-and-play glue exactly it's it's kind of like adventures with containers you go in and you say okay I walk kubernetes know what do I want for networking you know what we have out of the box solution for all of these categories but but we know people you know what sucks really run out of things to bring networking maybe a walk Calico because I like the policy-based stuff than for monitoring I want Prometheus and then for storage I might just want to use EBS so
 for each one of these things we basically guess we're kind of our catalog comes in kind of empty into the picture is you can go to our catalog that we have and there's a lot of this offer is already packaged up and you know you can just click in over the Floyd and run and you don't have a give him give a lot of thought about it you know any greater whenever
 how do you manage that because this is a rapidly expanding ecosystem if you have to write Integrations for all of these things that are being built it sounds like a lot of work yeah how do you manage that sure managing it and then how do we integrate with the various you know the infant number caught combinations everything the first thing is when I mentioned that you know the different schedulers that we have one of them is cattle which is our own are on framework in and that's actually the thing that runs under the hood to schedule a lot of the infrastructure mobile stop because they say if I'm deploying networking I'm not exactly going to use kubernetes to deploy its own network management you know it's kind of a chicken-and-egg saying and also has a little bit of problems with like them you won't be able to build anyone not so
 title is are very low level infrastructure oriented scheduling framework and so we're actually packaging up all of the software is a Docker containers and deployment their own Frameworks call cattle wants me to play that software he has to integrate with the various platforms and there's there's kind of two ways that we're doing that is one is a nice thing is all these things are built off of. So there's a lot of commonality between them so if I deploy let's say Prometheus in a swarm environment or a doctor or kubernetes environment you know you still get that kind of base level visibility of like he was a bunch of Docker containers now then there's the next level of integration which is you know actually want like Prometheus to know about kubernetes specific Concepts in and those are largely being handled by the community some self that are producing software so we're not actually having to do a lot of this we just have to configure it is being handled by the
 the second the other kind of part of this is like when you look at storage and networking is is we're actually getting starting to get towards you know better standards and so not working for example is really gravitating towards cni so I can actually deploy see and I and I can deploy Legacy if I do calico is seeing eye that will work with kubernetes that will work with me says and then we have support to make it work with Docker too so we're kind of banking on the fact that you know as things move forward they'll be a lot more standardization and this is why were members like that especially were members of C&C happened and oci
 your because of your way very much care about these standard integration point so we can have more plug ability between these Frameworks tools standardization a different kind of standardization that Rancher also has built into the platform and I'm curious about this more generally to the Rancher OS which is a minimalist OS that's built explicitly to run Docker containers so what is Rancho s
 yeah yeah so that's a great question honestly this even confuses a lot of our users and people coming into Rancher it kind of depends on how you first heard about us because we have to separate products one is Rancher which is the container management platform and then there's Rancho s which is the minimalistic container operating system and those are two completely separate products one doesn't require the other so that's just something you don't want to get out of the way Rancho s basically what it is is it's a minimalistic Linux distribution that everything is a container it's a 100% of container and the idea of this came from basically we started to build Rancher the management platform and
 really all we need is a doctor game like we don't care very much about the host operating system we just needed a doctor Damon and so we decided to experiment with you know what what's the smallest possible thing I could do to get you know a doctor running so it's kind of like boot to Docker but even you know what even like to return boot to Docker I guess basically into like more of a production ready thing but what we wanted to do was
 we didn't want to build just yet another Linux distribution use kind of standard approach like RPM Debian packages whatever we just wanted everything 100% to be a container in at the time we started this mess I thought it was really really really pushing the envelope of what you could run in a container and in the great thing that's come out of this is kind of all the hacks and things that we figured out of how to run things like you. In a container have a basically all been up streamed in to doctor now such that you're basically you can run pretty much any software a container it's you know it's not going to be welcome but you can still get it and people are people act like what's like the fundamental difference between what's a coral Wesson and Rancher
 honestly I love Cora West I was a very early user of core OS those guys do some great thing really really pushing the envelope there and so when you look at Cora Cora West the core thing about core West is actually the other their tagline is always been securing the internet and so the main thing about us is that the operating system is delivered as a single image that's like signed insecure and all that but if you look at look for a while as soon as it's still basically a standard Lennox distribution it's based off of Gentoo systemd there's really nothing you know kind of fundamentally different about how it is it's how the operating system it actually is like their key Innovation is Howard
 packaged and delivered the eyes as an image of what we do with Rancho asked was we actually wanted to kind of go once your one to a couple step further and say let's completely change how we look at a Linux distribution and let's package everything a hundred percent as containers and so this is something it's kind of hard for a lot of people that grass cuz they'll say like what's like the host like what's actually running on the host and to be honest with on the host is like for files it's the docker Daemon like that binary I think like mob probe iptables and a kernel modules and that's pretty much all that's on the host and then everything after that is a is a container and so the fundamental difference is you know we're just we're just pushing it to that level of you know everything is accounting and we can we just look at it or not do I have to use Rancher OS if I'm using Rancher
 yes I'll see you then that's not required so I would say that the vast majority of our users are either on a rail Centos or Ubuntu so I kind of depends if it's Enterprise she was obviously the king there and then in the open-source world to find two more popular
 crazy idea couple weeks ago it's a photo sharing app that only has pictures of cats when I finish my photo sharing Cat application I will be deploying it to Lenola Road because Leonard is the fastest hosted Lennox provider I don't want to get locked into a proprietary platform it's going to overcharge me as soon as my app gets popular I just want a fast Linux server with simple pricing go to lenovo.com SE daily and get $20 in free credit today plans start at $10 a month so my free $20 will be plenty to wash my cat photo sharing app once I need to scale I can use tools like an ode balancers and backups and the note has built-in dashboarding and metrics so that I can see the traffic to my linode servers and I can understand how many of my users are posting cat pictures and looking at each other's cat pictures go to anode
 kaam SE daily and get $20 in free credit today the plans start at $10 a month that's a great deal thanks to linode for sponsoring a software engineering Daily Now what's going on to this episode
 I'd like to talk about rancher in a little more technical debt to Rancher the platform itself has two main components and the first is the infrastructure backplane what is an infrastructure backplane basically look at managing kind of the core resources are of storage and networking you know that's kind of like when you look at it at 3:10 and start computer storage not working so how do I get those three things to be able to run my infrastructure and so that's really what we say is kind of like the plane is getting those things in place and so the difference is like ranchers going to give you a completely plowed agnostic infrastructure agnostic back lame as opposed to like if you just go like directly to listen to Amazon or Google they're going to give you like any of those specific Technologies like EBS or BBC which are going to be
 on top of this infrastructure backplane a Rancher deployment uses an application service for managing Docker containers and I think the application services this is basically another word for schedulers is that right
 yeah so it's better that when you get a chance today Services layer is then when you get kind of the variability of which one you want to choose so you know if you go with like the model experience which is our own thing then it's it's something that looks very similar to Docker compose if you go with kubernetes then it's going to be like uber Services replication controllers and odds of those things or if it's May so she know you'll be the point ass or Marathon
 okay and regardless of what what scheduler I'm using I'm going to need to do some software-defined networking which if somebody is is very familiar with Docker in this container environment they probably know what software-defined networking is but maybe for people who are a little newer to this area where are you going to the definition for software-defined networking and we can have a little bit of a discussion around it go shoot that's a hard one to find out working is and it just basically instead of interacting directly with like you know your switches are routers or or you know kind of the Legacy networking check the equipment that exist software-defined networking is is controlling everything you know I had a layer above that which you know what it is just controlled by some type of management plane so you don't have to basically go to each individual device and in program and set it up
 ancient what does it mean in the context of a container platform it's basically it's really interesting because
 you know I have my background is actually I came out first from more like hosting than infrastructure-as-a-service like BMS and things like that and in that world you know you spend a lot of time talking about networking and how to set it up and vlans switches and all that stuff when we moved to this container world there's actually a lot less discussion of networking people care just more about can my abs talk to each other is it secure and private and so that's basically what St Ann's going to give you in a container world is that you just really don't have to think about a lot of that you know it's like I deploy these two containers be services and I want them to be talk to each other and it just kind of magically happens and there's a lot going on under the hood to make that happen because yeah you have to Tanners that have eye peas on each host and it has to be either you attach to the underlined Fabric or run over an overlay Network somehow encrypted if you need that there's a lot going
 under the hood but I'm a user perspective
 so let's say I want to use software-defined networking in order to set up some service Discovery and orchestration using Rancher what exactly do I need to know in terms of for a given container platform we could use Rancher as an example what do I need to do to get service Discovery in orchestration so that it's running smoothly so that my developers can easily just stand up a service and it's it's as effortless as possible
 so I mean specifically with the networking so there's kind of there's two things there of the year of the networking and then the service Discovery in those kind of our separate topics that the base networking you know if the if you were just kind of doing this yourself then you're going to basically look at once without there so there's a lot of guys I think you know kubernetes is kind of the most complete in terms of like documentation and whatnot and setting these things up and so what kind of tell you if you want okay if you want to run this on Amazon here's how you do it on Amazon if you want to use flannel here's to the instructions for flannel or Calico so it's kind of if you're going to do this yourself I think the first approaches you know what's the first thing is you know what's the right sdn solution for me should should I pick you know what is the my infrastructure provider provides so
 you know what time am I going to use like GCE directly or AWS directly or should I go with you or something that's that's Cloud agnostics the portable so flannel or Calico
 are weave so each one of those has you know what different strengths and weakness done so once you get those figure it out like what you know which one you want then you kind of go through the steps of plugging a 10in so there's no first I get weave running now how do I get weed for work with maysa how do I get weed to work with kubernetes whatever you an application framer. So you don't want your pic of Technology than you actually get deployed then you figure out how to integrated you know with the with the schedulers
 and in what ways does using does a container platform help me out with that yeah and so that's that's the idea is that you just don't really have to think about it so there's there's almost there's going to be either you look like in the case of Rancher will give you a choice in the case of like something like gke there's not really a choice so much they just give you what's what's built-in so the idea is if you don't know anything about networking you don't want to think about that you don't have to so it's like if if you go with the choice of using like ranch or you just basically start running and we have our key fob not working but if you come into certain requirements for it's like you know I need more advanced policies then you might start looking at Calico so you know that's what the basically the container platform is going to do for you is you know if you don't want to think about that aspect you really don't have to
 so let's have a DNS for example so I put it up Rancher I've got to going and it's using the native DNS functionality for rancher and if I wanted to switch to weave DNS for example how would I do that and what would what's going on under the covers when I swap out the DNS plug-in that I'm using so DNS is kind of a tricky one because it's at this point DNS is being kind of really heavily pulled into the schedulers like the book the new swarm cat that they've they've announced has you're basically a built-in DNS server I mean they had it in the in the in like dr. 111 also but it is kind of dark or functionality and then GK he has a sky DNS are they have a specific way of doing dnso the problem was swapping DNS stuff right now is that the model and how do you
 gases being used ends up being someone specific to the framework but it is possible and said if you like it I don't want to use the kubernetes way of using G&S or the swan way of using DNS you can in like both those remarks for sample flip them off like turn them off and then deploy you don't say we've DNS
 so you know situations you know something to just be a matter of turning it off and those individual providers and then and then deploying we Venus or something
 okay so let's talk about like adoption and usability how is a typical customer gave a typical customer I've got my application running on let's say on Amazon ec2 I just got some rails rails model it's that are scale or maybe that's a bad example I've got some you know microservices infrastructure I could sit let's have Netflix or something and I watch you on board with Rancher how do I migrate my my decoupled microservices infrastructure to a container platform like Rancher
 princess it kind of depends on where you are in your kind of your adoption containers are typically what we we come into is people have basically just started containerizing applications so they've got it sucks that you don't containerized it so the app is running in a container but they're most likely using like their old ways to point so I know either it's manual like popping in chapters and some figuration management framework so that's typically were like where we Rancho would come in is is if you buy that level so then the next step is basically okay well how do I actually describe my application in you know some template ice form at which would be if it's kubernetes like services in in replication controllers if it's darker or paddle or swarm it would be a Docker compose format so basically you know you would you would start looking at describing
 application in at in a template and then for the most part of me Rancher itself is super easy just to get up and running so no it's just a Docker container and it's all in what you have your app in the temple dies format then near you start pointing and either to the web interface or our command line
 so that the onboarding process I mean at least contractors perspective is very very simple we don't that's that's always been like that
 the one good thing for us to do had just good organic adoption people come you know, gravitate towards Rancher just because it is so simple to get up and running and get going
 what about the continuous deployment Story how does continuous deployment for me change when I move to a container platform
 yeah you got to be honest you know I think it's it's it's relatively difficult to be doing continuous deployment if you're not using the container platform because
 there's the problem is is when you run into microservices is is if I just have a singular unit it's relatively easy to continues to point it's just a ploy this new thing it's when I start having an applications distributed distributed in it there's more components and so it's it's it's kind of larger picture that that's what I
 a platform can help you with because let's say I've just tried my app as as your 524 microservices they're all talking to each other if I push an update and just one of those changes then I need to be able to just deploy that you know upgrade or deploy that one thing but there might be like how do you do that in a seamless way without not having down time and what not and that's what you know, Douglasville container popcorn Solutions will do for yours is how do you do a rolling upgrade how do you manage the load balancing to the application or training sessions Discovery like if you want to do a blue green deployment so there's all these different anyways because there's not like one strategy that that fits all like it kind of depends on your application how it behaves of how it's going to be upgrading the Floyd and then so you know what to be able to do this efficiently I really think you have to pull in and pull in one container
 container solution
 what about monitoring how does a container platform assist me with the monitoring story
 I know from a from a Rancher perspective it's it's it's
 it's largely I mean so we can deploy the monitor installation but it's kind of like providing the additional metadata to tie everything together without a like the container platform basically you're just going to see a bunch of containers like I've got a hundred host and I got a thousand containers like what are those things like added a associate to each other so it for you there's a monitoring system is but being able to feed the monitoring systems the additional metadata such that they can show a more application deal you're more of a relationship and that's kind of what really helps you out there is you know instead of looking at these individual entities I can actually see him as applications and scaling groups and things like that and so you can do better you know kind of root cause analysis and know what's going on you know what it was that additional metadata
 okay let's talk a little bit about the business model for rancher in this broader ecosystem how does Rancher make money we focus on a basic life support we supposed Louise cell support number licenses for rancher and so everything we do is a hundred percent open source that's worked extremely well for us there's four co-founders of Rancher are three of them previously did cloud.com which was also a company that was completely open-source so we're really familiar with open source mono we really like it it works well for us and so our focus is really just on you know selling support Furniture the objective is Docker as a service why I don't mean to sound like a hostile here why would Docker is a service be easier for rancher to do
 Docker the company itself
 yeah I mean so that's a great question you know so if you look at Rancher so you know when we talk about you know you know what the container management platform and why do you need it it's like if you look at the doctor solution so you have Docker swarm and then on top of that you have UCP so UCP is kind of product that is is more on Bubble of what Ranch was doing so we're very very similar products but so the difference between you're basically what we're doing a Rancher and what Docker wife you know you might say yeah we will be a better approaches as we really look at the larger container ecosystem not just doctor leg doctor is not just you know there's more than there's more to Containers than just stopped her doctors want to approach so if you go and you get UCP basically you're going to get the Doppler swarm solution and what we've seen as we've gone into two companies especially very large organization is
 is you don't have that consistency across the organization where they're just going to pick one framework like you already have an investment in Mesa Springs ample and then you're looking at kubernetes or there's other Frameworks are popping up like you know know mad but you was just your last year so habitat was just released these Frameworks keep popping up and they all have their pros and cons I don't really think there's going to be a clear winner like it's not a zero-sum game here so the difference kind of between Docker in and Rancher is that we really looks and I feel like we really look at a larger container ecosystem and we're very much you know some what kind of the Switzerland of containers and now we really don't have a specific preference are the pros and cons of all these Technologies were just going to help you bring them all together and run them so you know we're going to help you write a Cooper netease if you want communities or if it's so warm and storms fine or Mesa or whatever
 okay interesting so I was going to ask about the red hat openshift how red hat openshift compared to Rancher but it sounds like there's a pretty big obvious differentiate are there in that red hat openshift is explicitly built on kubernetes where Rancher has some more swap ability at the scheduler layer totally different between Rancher and the rest of the guys is is just the flexibility that we provide that we can pick you know you can have different solutions and you know it as we go on we talk to people in it in the Enterprise people are very very concerned about lock-in that's just a you know they very much want and to make sure that they're not stuck with one technology so here we we provide that
 to close off what are some tips do you have for people who want to run containers in production that's a great I mean really what it comes down to it and what's the state in your application if you can properly isolate and manage the state of your application then it becomes significantly easier to run it in containers containers can actually run staple workloads you just need to be able to identify it and you know be able to manage that in a stateful fashion but then if you can really keep the state centralized couple different components then it's significantly easier to manage the application that scale makes everything just drastically easier
 that would kind of be the biggest thing that I die super people it's just me or really look at how they're managing state
 okay well Darren thanks for coming on the shows in a great conversation about container platforms thanks I really enjoyed this
 thanks to symphonic for sponsoring software engineering daily symphonica is a custom engineering shop where senior Engineers tackled big Tech challenges while learning from each other check it out its symphony.com SE daily that's s y m p h o n o. Com SE daily thanks again Stefano
