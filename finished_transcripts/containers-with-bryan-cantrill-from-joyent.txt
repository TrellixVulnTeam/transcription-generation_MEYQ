Transcription: sweetie I'm actually I'm actually secretly looking forward to it so it's very unlikely that it's going to wipe us out as a species of people really underestimate how clever we are when faced with existential where's that pretty face with existential threat very frequently
and I mean it's like we have a span of the last kind of fruit of existential threat like World War II radar the atomic bomb we dropped the jet engine we all because of this existential threat so I figure a good exercise every now and again to see level rise we're going to get huge like blocks and all this is a crazy shit so funny I don't know it would be perfect because you know it's devops week off people are faced with existential threat maybe they can appreciate them more and abroad existential threat is
is the kind of environment you need to create this this shared in in desperation for invention this is this is honestly what put a man on the moon there is no man on the mood apps in the Cold War East cannot summon the investment from society and so are you going to be great I mean you know relatively great I mean they're going to places that were going to have to D have at 8 so that'll be at me like Florida is probably nothing that can be done about Florida it's going to solve your the Golden Gate you figure you know I think as someone who post dates the Apollo program
are there any engineer looks on that. With a certain amount of any like wow how great would it be to be alive with that kind of shared sense of mission and but that shirts at the mission often comes because of an existential threat and you know that's kind of like a star or whatever but ultimately a company going out of business is not an existential threat ultimately no one's going to go hungry people going to work hard but it just doesn't give you that kind of that that that true or desperation think about like Yeah you mentioned World War and you can think of like Rosie the Riveter and like all in a little just like the entire United States rising to the occasion probably bonding over it.
I got I said what I said I was not a psychological Trauma from that as well and you know the the grandmother of a friend of mine growing up absolutely heated with a white-hot passion FDR because it was because the FDR that she had to go work at Lockheed during the war that like you know that the back look like the Nazis were defeated not interesting to her it's like he was that that hole. Was so traumatic for her you know is you know it'll be fun to get it do you know what it's good to have heart problems right to talking about software Bryan welcome to stop running out of product related but let's start with definitions what is devops
who that's a very good question because I think you'll get a lot of different answers so one question that I've been grappling with is there an actual our developers Force operators are they born versus made cuz I I do think that there is
 I see there are fundamental differences in the disposition of developers and operators and I think I would say the devops is about as getting as close to the middle as we can and maximizing empathy for the other point of view
 however I do think anime gusting ossified in the in my route to play older age but I think that at the end of the day one is one of the other now I think that we can get again is close to the middle but I'll give you like a really concrete example of how I see the difference between the operators primary responsibility is to the service into the customers and to need it for internet outage we need to end it now that we need to be up a developers primary software engineers
 primary purpose is the actual Corpus of software the artifact the machine and in general these things shouldn't conflict and to meet Deb pops is about believing in both these things that we're going to develop software with the service in mind we're going to operate the service with the software in mind but you do get to Point swear sometimes you have to choose one of the other and I'll give you a very concrete example is you got a service it is not behaving properly
 you know that we starting the service will restore service your customers that are down a virus if I restart the service it will restore service however you also know that that will not give you an updated about the problem that Engineers need longer with the malfunctioning service to be able to understand the problem what do you do
 and I do think this is where you get a kind of a fundamental operator mindset says restart the service customers are down we start the service let the software Engineers figure out a different day today is the wrong day to figure it out
 we will have this happen again and if we don't use this opportunity to understand why they Services failing we're going to get right back into the same situation again does mean different things to different people and I worked at a Trading Company where devops guys were people that getting feeds correctly and negotiating trading errors have also worked at an ad tech company where the role was similar in both these cases if there's a fire at the devops guy was off in the first in line to fight it to these places boys that devops had a large responsibility for managing deployments so subject to overloading
 well I think some of the overloading it because again I think that fundamentally I'm not sure that it actually exists I am in other words I think that eat then that you got developers that are performing operations and operators are developing software with that ultimately one does come from one of these perspectives or the other I think it is any again you can kind of and I believe him he certainly have a joint software Engineers that have a great deal of operator empathy and operators that got in a great deal of software development at they so we do try to get to devops as close as we can but I think it is it's it's an unstable state
 that if you I ate and it's a synthetic an unstable say perhaps this is one of these I wonder if I did that if people are not developer / operators they are developers or they are operators and the other half of that is something that that they are that they're doing earnestly but it is ultimately against that are characterized somewhere definition what do you define as the term continuous delivery so that's interesting as well as I answers I think that guy would guess who continues to every I suppose would be every push results in a deployment
 which is great for some stop especially for State. I think that too many people that do continuous deployment believe that all the world of stateless which it isn't lost the world is safe and for State. A deployment is it's much more complicated to have an appointment that doesn't drop outstanding operations on the floor or doesn't disrupt service in anyway I'm so you end up for Staples stuff you went and you know speaking for us until we develop everywhere the sack and operating system trust me but you don't want continuous deployment of your operating system you don't actually want us to bounce the box every time we push something to do the OS even though we might love that actually let me one of the challenges of us development is that the the really interesting issues in your ass off and only occur after it's been out for a year-and-a-half 2 years 3 years so you actually need to let systems run without
 text her to get to actually let those issues emerge I did not expect that out of the operating system so you can't come to read a poem by the actual address but what we do is we are continuously before new platform images of different machines naturally reboot will pick up the way to ShopRite in any other end of the spectrum you have stuff that's totally stateless that can be redeployed all the time and continuous deployment will be much more truly continuous, I think the important thing is that people should not be prescriptive that different bodies ass off are different lyrics to Stockton a different answers that question or two to three years that is very unlikely to hit
 that you're cute if you spread them to the time axis out arbitrarily is increasingly likely that you hit the sometime overtime so I mean it's amazing how many systems be seen that were out for three and a half years 2 years what have you and then died on the race condition that was present all along that the day they basically with the other thing was dodging bullets 24/7 365 and it's finally had its name on it be on the 27th. Can one class or problems on another class of problems just resource utilization issues where you just have any you maybe it's a simple as a memory leak in the car. Maybe it's a simple but the offense more complicated where you have resources being used and reuse and reuse the ReUse and reuse and there are consequences that maybe it's fragmentation maybe it's performance maybe tables that are growing without bound and you got a system that other slowly degrading or perhaps ultimately feeling fade away and so do you know where you're at when you are those general purpose substrate
 expectations aren't you going to be up in perpetuity Factor boy and you know we have always kind of fantasized about being able to schedule reboots when someone but the reality is that people don't want that for good reason they want to be able to run forever and as long as the machine runs they want to be able to have that they want to be up which is not an unreasonable expectations so I think you've been around long enough that you probably been around since the Inception of the term how has continuous delivery changed since people's first started talking about it arise
 that is a good question because I don't think that it a man that is a bubble and you know continuous delivery was really not a thing devops is not I don't think I even heard the term devops you know kind of when it actually originated but I don't think I really heard that term until like 2010 of us and I feel that it was maybe it's earlier than that but does not coincide with the rise of Open Source and everything else but certainly you know in the world of 20 years ago where you had proprietary software for said can we do you know where you're not there's nothing to continuously deploy you know where you are you're running an app you got an app server from you know you don't
 worst fear that you're running in and you got maybe your own would go out that's in there it's kind of Monolithic massive monolithic thing that if you're lucky you upgrade twice a year and that was kind of it was called an upgrade not not continuous deployment that's for sure yet that Evolution no overtime I mean how has it cuz cuz originally obviously it was less continuous then maybe it is today so I mean just because you had these these massive services that would be upgraded at such a slow cadence that people would put more and more kind of stuff in it and that would would make the upgrade rescuer rescuer rescuer and you had they should be II would II systems in Drums II systems solve everything so I mean it's raining today
 and you're the swear it's kind of hard to know which came first the chicken or the egg if I where we are today is that instead of people thinking about deploying these entire monolithic apps armor breaking Arby's model of these monoliths up in a much smaller entities microservices that can and be redeployed much faster they we drive us down to be a state was as possible and then that whole microservice idea we can be expressed as a container in this is a major you know whether this is fueling the container evolution of the 10 Revolution is feeling a laminate microservices devops in containers all these things are kind of related to one another and they're all feeling one another and now we're in a very different world we can take that contains the latest version of a service and now go to play that in the production I think of that that's a lot of be enthusiastic some things like dr. are the ability
 did I really deliver on that bone is joint
 total joint is a cloud computing company been around for awhile but joints believe has always been since its Inception relate that containers were the next step function for infrastructure now the difference is that we were really in what I've been known to say we've been in the we were in the right place for the wrong time for an extended period of time so we had bleeding containers long before the rest of the world was really ready for them and for a long time we were really emphasizing the operational attributes of Tanner's cuz we were containers drop down the middle so in the end always happen I'm only 10 at Fashion so when you go to deploy a container on the next day the week we operate our own public Lobby by public loud and then we also take that software that we used to operate our cloud and we make that available as software and then that's open source as well so
 we are both a software company and a service company and it's the same software on both sides and four even speaking personally I love the fact that we have software that we deploy ourselves because it means by the time you re if you choose to operate our software on promises you got the Assurance of knowing that we're running in ourselves in production so we're delivering you all high-quality are the operational aspects of it for months until on we were right in that in that does operational efficiencies are definitely true but we were wrong in that we kind of we we missed a really attractive actually two containers what is that nothing to do with the operator and everything to do with the developer tag mother can of the devops difference we were really emphasized in the operator was it turns out for the developer containers are attention span is WinRAR tremendous win because they allow
 the developer to take a service that's become somewhat complicated he's got different attributes and so on and it allows them to to can a bundle that together into a container and then deploy that quick so I can deploy in the production was running on my laptop and vice versa I guide and I know that I can I can iterate something quickly get it working get it tested them into poison good motivation for containers is a container
 until 8i a container it is a virtual operating system so I can take in the cloud you gotta virtualize it somewhere in the stack and historically the way back with that we chose number for that is the machine you get a virtual machine you can a virtual x86 microprocessor virtual d'ram and on that virtual machine you put an operating system kernel you load your own a bunch you or what have you and you put your app on top of that and that's virtual Hardware features of virtual Hardware but there are you get operational in efficiencies I'm in the when you are virtualizing a such a low where the stack really hard to drive 10 and say hi really hard to get high performance containers in the hardware let's virtualize at a higher layer of the status which was the operating system let's give each
 tenant their own virtual OS looks feels smells like Hardware in quotes for son actually Hardware you don't have your own OS kernel you'll bring your own OS kernel you are running the extant OS kernel but it again it looks and feels and you see your own route you got your own networking device me depends on the importation actively you have your own virtualized instances of things that you associate with being a hardware but they are lies that are being told at a higher level of abstraction lies being a euphemism for virtualization of course maybe I should come do that what you're able to do is is now we're deploying is not an entire OS kernel was kind of bulky thing you're deploying only the application differentiation on that OS so
 this is why Docker containers are small you know this is why you go to maybe you could get like an Alpine container because it is only those application components you don't have your own OS up there it's quick to provision because you're not booting an OS on you don't have virtual Hardware so they're quick and their light on and the challenge that we have seen is you know where do you run those containers and for us we run those containers on the bare metal so I'll hypervisor if you will a smartass and it can run these containers truck parking at the Paramount all the containers and have you got a slightly different history in that the containers are really not designed multi-tenant save and right now in the cloud
 commercial painters on top of virtual machines and Hardware which has a lot of it efficiencies a lot of managerial inefficiency is a lot of overhead associated with it so what will we have done it's kind of got the best of both worlds is we got the chopper stack Triton which allows Docker containers Linux Docker containers to be deployed directly on the metal en day and it's normal that sucks why did you going to be operational efficiencies for also gives you the development efficiencies you got from from running Docker are the benefits from running a container on the principal Hardware rather than having a VM if you are if you're in the cloud when you do I own virtual Hardware there are there two hops and you take you got to hop into your local operating system and then that I purchased has to talk to the actual Hardware but the OS is next
 so the OS is going through a virtualized layer of the OS is being lied to in the virtual Hardware model and that is making anything any faster faster faster I mean sometimes but I know people can come and complain about the io performance that they get Hardware it's like any idea so if you could talk to the real world that is going to be going to be slow so if you're running your own computers your own physical Hardware which she is on the one hand is less common now than it was 10 years ago on the other hand I don't think it's going away I think people are going to be I would imagine that the you said your working at a trading firm they probably ran the round Hardware it's not you know I don't think that's going to go away if you're running your own Hardware there are massive tendency and there's only so many
 GM's you can get onto a single computer node large because things like d'ram are are really not meaningfully shareable between Harvard d'ram is much better utilized when you are running with containers on the metal Scimitar tenancy but actually I think the big Advantage for most folks is neither of those things and I think that those things are both kind of inside based fall in that you better performance better tenancy are important to certain classes of operators the actual big Irwin is eliminating abstraction entirely containers anyway having to deal with a virtual machine that sits in the middle is just as unnecessary layer of fat. Even from a wait-and-see or or bandwidth perspective all of that as well but just from a mental perspective that you got to go you can't just go deploy a container on the cloud
 go spit up a VM first and then deploy the container on the VM and by the way like which DMV going to play the container on and now I've got to manage a bunch of the yams and Amendment containers of top of the VM and it looks a lot like managing physical infrastructure spending all of a sudden everything's gone up a liar and now I'm managing the same kind of the of the tax I had was going to structure I have work construction McLeod and we tighten actually we found the big win that people really love is a bag they don't deal with bm's at all you just provision containers and you spend up a container and it's raining in the cloud somewhere you don't care where just the way we survive the end it's right in the closet somewhere so that's what we have found the people really like about it is I am I'm only paying for what I use now I I paid for the deer and that I use in my actual containers I don't have to spit up he's BMS that are kind of waiting around for a container to be spun up on them
 Southern I think that that that the big Advantage free containers actually struck on the metal is beyond the performance of bandages beyond the tendency Advantage is the is the mental diet that everybody gets to go on I like don't have to think of spending of a VM anymore I can simply spend up containers and I can think in terms of containers that is badass the abstraction with which I work you mention Triton what is Triton that we developed that is based on Smart OS operating system smart data center where the other with a doctor in point and that allows us to have a dog or host that's virtualize across the entire Data Center and allows you to just think in terms of containers just provision containers you dumb provision V Adams at all with Triton you only provision OS containers you can do that for Docker container if you want to just
 containerized Linux and you will get a uniboot or a scientist that looks a lot like a virtual machine but spends up a lot faster and performs a lot better and is much cleaner
 extra describe in more detail how Triton combines features from Smart OS and darker and then we've added a Linux system call table to Smart OS so that allows you to execute Lennox binaries so then we have Linux binaries are running inside of a smart-ass Zone that's then orchestrated with smart Data Center and the docker remote API endpoint is actually implemented by smart data center itself as a microservice so what you speak to when you speak to a dock or host and Triton you don't speak to ABM running the docker engine you speak to a dock or service that implements the doctor remote API you still use all your commands but you are talking to the remote API that is actually actually funny the you know at one point there was a remote API endpoint to say which version of gold you're on but are Docker service
 detrimental to know. Go and the guys are like what we save this and like I don't know it's makeup or makeup a number I don't know but you know we've been able to totally virtualize the idea of the doctor host by implementing that Docker remote if you I would have been really huge for us
 search bring people back who may have become lost at some point in this conversation is containerization and virtualization Soap Box world of the devops world because I can paint her it is a much closer mental match for what were actually doing what we are actually the point is we're deploying an application or service that service Hazard penalties it's not a simple binary anymore it can be there maybe interdependent services within that service but that service is best expressed as effectively a tarball that you're going to drop down onto the cloud I did that that's one way you can think of it's like an archive of binaries for programs that we're going to drop down onto the cloud we need to be able to allow that to execute in a safe and multi-tenant way and a container is the is the leanest abstract
 that fits that of the containers the shrink to fit abstraction what we are actually trying to do which is deployed services and gets in your sleep what services containers before and after the existence of Docker Docker I think we were really emphasizing the operational aspects of it and performance and so on before dark or two in order to run containers in the giant Cloud you had to run a smart as binary now we got a lot of things run on smart as you can run Ruby and Python and Pearl and tell him he's being someone but the reality is it's a different it's just a different system units it's like the difference between FreeBSD in the next on and you know I'm smarter West different yet again and you know it's the differences are no more than
 so one of the ships in perspective are like actually with Doc are becoming this kind of backed up binary format we need to be able to execute actual Linux binders and adding a Linux system call table this morning less allows us to execute Linux binaries natively on the metal that was a very big shift cables Linux containers next which allows it to just run you know movement is not from the operation side hits from the development side of the devops did album not Snap application but actually a service or even a software platform was talking to a guy from Cafe Strawn from couchbase
 describes is a software platform-as-a-service staz and he's in his kind of movies are these spastic apps on where we are on our taking it a developer's able to think in terms of the service and you basically have you can do this kind of this just Add Water kind of container where I actually given you now a deposit active leave off get hyper off of my hand and now if you just hydrate this thing you will now have your own past and that's the model were moving to which allows people to have the power of house without the walking in a mini people love it you know developers love app has until the attractions no longer fit would this allows you to do is everyone now has their own pass easy to have your own pass and I can now in rate someone else's pass because we are now treating app as is no longer a kind of a service which we have law
 but now looks a lot more like a body of software that that we can now of all so I think that is is part of the reason why you know the way the doctor's going to change your thinking is the realization that developers Ardis great substrate for the the containers ation and that we fight we don't need it to think of containers only as the ends we can explain some of the special properties of containers and connect. To developers and then get a huge win on really accelerate the the much broader or containerization movement the irony is that people developers we left handers right now how we ever going to poison the production's not ready for production mean while we've been running these things in production for a decade and have gotten kind of salt all the production problems from networking for Stiga table tennis in perspective performance perspective Resource Management perspective
 almond and deployment history of sort of us along with the developer enthusiasm for doctor he said that Docker brings the container is Asian technology to an entirely different vector by emphasizing developer agility instead of operational efficiency is it okay okay summary of it you've also mentioned all Container World in some of your writings of being an all Container world that a more heterogeneous world does not have
 well I'm at first call to be clear I mean we will always have a heterogeneous World some flavor another Windows 2008 will be running until the heat death of the universe year we had we just thought we'd so I can hopefully the last leap second but these leap seconds off and allow these old systems to self identify exactly how it's what we do actually as well to be quiet be quiet when I seen it first hand with the last leap second external would just spin on the lead II
 we had to leave so I can all the sudden all these tenants start spinning I can pay those the ones that are all wanting the old kernels obviously things are going to be with us forever so we are you know we're not going to be moving to a and when I say in all Container world I really need all containers for all kind of new development on but when we are broadly a container with when you think it turns the containers not eat alone I was just to do exactly what we did when we moved from physical machines to BS why did we move from his questions to be asked why do we manage BM said of his machine every one of those reasons applies to Containers versus p.m. it is about a big step by step function you had underutilized physical machines that were much better service virtual machine today we got underutilized virtual machines that should really be containers
 you got a you know a 1-gig BM in the clouds that you're only using a hundred Megs of 200 bags of that should probably be a 200 V6 Magnum paint the you add you going to let the other three quarters of a gig are you know why I love you adjust the numbers as appropriate but you got these under under utilize resources in the cloud that just as you had underutilized physical resources in the physical date is 15 years ago for all those same reasons all the same ultimately it is about doing more with what we've been doing in infrastructure since its Inception and everybody's always been somewhat concerned again since its Inception that we would have allowed you to do so much more with someone that don't need to buy a computer anymore because we would be we would have kind of an achieve this level of Greater efficiency and he will need to do anymore but we have been
 I think this will continue to be true is that when we allow you to do more with less what we actually end up doing is just more we end up doing even more we end up doing things that we couldn't have done otherwise
 Parkinson's law what's Parkinson's football the the amount of work it takes to do something expands to fill the amount of time you allocate to it there yet exactly that's right and there was something you said for that and I think that we will it would are things that we can go do in all contained in the world that you just can't do I mean I'll give you time for example so we got a storage service that we developed and Manta reflects this disk Tina worldview where it's a it's a storage service like S3 as a cloud-based storage service you can you can you know HTP put in gap but if you want to actually compute on that service instead of having to drag objects out to ec2 or 2 TranZit compute you can spit up a container on your object
 so in that storage Cloud you can spit up containers where those objects live you can perform computer on them without actually moving the object the object never comes off the box and it's on you snap a container right on it perform your computer and then you're done it's much more efficient if you are able to do these kind of mass and kind of mapreduce operations without ever removing data never moves from all off machine when you operational efficiencies you simply allow people to do things that they couldn't do before that now there are possibilities that hey I can go do this I couldn't do this before 4 because it was just give me too time-consuming or wasn't realistic enough from a cost perspective but now that you made the so much cheaper so much easier now there's this new opportunity I can go chase and I think that's what we're going to see how things were going to see that happen a lot and all container
 world just as we saw all the transition of yams having surprising knock on a fax I don't think that that VMware would have thought that they were effective way I'll be in a roundabout way in Denton cloud computing when they virtualized x86 Circa 2000 similar away I think that we are going to be doing it we are inventing a future that we can't even conceive up right now by moving containers and when we are in a tall container World their entire new latitudes for effort Innovations entirely new Vistas and wouldn't be able to fundamentally very new and exciting things fit into the data warehouse space
 will let you know why I think that if you look at and I'm a big believer I know that we may be in the traffic to spare and I'm a big believer in the internet if I think that there is so much data to be gathered right I mean you just think about how much how many Inn efficiencies there are still in the world and me the the experience of humanity is about extracting those inhibitions because that's how all boats truly rise all boats rise when we make the world a more efficient place you're able to we are able to focus more on the things that we want to go do it where you all too and a GE has got a pitch for the a lot of things that let me know if this is like the solving world hunger you know it's and it's great I'm a big believer in that a long road but I'm a very big butt
 that there is a lot of data that is out there that we are not doing doing anything with today because it's too hard to do anything with it I think if you can make it easier to perform an ad hoc analysis on massive amounts of data then you are an able and true data science where we can allow new discoveries about the way across a whole variety of different so I think that containers I mean instantly with the Manta model what we have seen is that if we envision a world where you have just massive amounts of stored ad hoc data and when you have a new way of thinking about the world on your laptop that you was a data scientist what have you can like bang out a new way of looking at data and then came quickly go deploy that and run that across you know repositories of massive repositories did a petabyte to petabytes of data and then get an answer back
 it allows you to eat already on the hypothesis about the way the world light work and it in Naples a new kind of scientific revolution of data Scientific Revolution for all the hype I need a science and big data and things in the troposphere on all that I honestly think that we are still in the dark ages of data science and I think the Renaissance awaits us and I think it will be an entirely different world where we are truly data science of data in the Lord actual science real science and look at the way that science handles data right now if you do information technology for a living you'll throw up in your mouth when you look at what signs do with it I think of his mask works well he recently came from working at the NIH and he was visiting me recently and he was telling me about some of that methodologies that he was like
 Academia
 absolutely and you think it's like if you were people are literally like oh yeah so we have no difference so we swapped out all the hard drives Family Guy actual actual hard drives like a grant you know if it if the National Science Foundation is paying for your work why is your the data that why is the data living in a drawer somewhere you know why is that data not in a go lactic National Data Warehouse where other scientists could hit it right on my dick
 you should get to a point where you can I can perform a like I can perform science simply by looking at your day that I can do anything else no experiments need to be done no no wraps it don't vivisection I am convinced of scientist are actually secretly sadists you know a friend of mine a section of rats. And so they eat for the site the part of the experiment they were doing they had to get to the heart while it was still beat it like this is seriously fucked-up if you're not feeling some empathy when you're doing it like you got some mirror neuron that are missing I mean this is like this is disturbing me I would much rather deal with AIDS or something or some python then bye
 the biosciences but he'd look even more broadly there is a lot a lot a lot a lot a lot of data that we can go gather and process and getting flea act on in ways that again just extract in efficiencies with limited in efficiencies to me getting to that all Container future for my data perspective is a really important component because it's going to allow compute and data to get to be much more harmonious and they are state right now compute and data are very siloed and their siloed in part because of the extraction so we got when we moved in on what container world we are able to choose to allow computer to live together Safeway and allow people to actually iterate much more quickly on I bought these but how the world at work
 improve the data warehouse whether it's through put or cost reduction or specific engineering breakthrough when you eliminate data movement which is what we've done in Manta by allowing you to spit up a container where your data lives you you don't extract data out of the warehouse you don't move everything out of the warehouse processor and right now I mean right now everything everything Warehouse across town or someone can go with that look at it and then the speed of your stuff across town and what limits what you can go do much more efficient to go take your computer into the warehouse and leave the data where it is there a big boo I'm a big believer in data gravity data wants to live where it is and contain
 those are what I want you to do that containers allow you to spit up on that data safely and securely because you need to be sure that the reason that I can't contain or not a BM is uni why you need something that can be down in a moment of passion because you're spitting up his computer element where the data actually lives it's important that if that computer element misbehaves or attempting to delete the late or what have you that I can actually do that completely what is D trace a facility for the dynamic instrumentation of production systems developed along without 11th all my chaparro back at son back in the day and Detroit's allows us to answer I mean we said it was concise answers to arbitrary questions Saudi Trace allows you to ask questions about what the hell is this one is doing
 and get a concise answer to that and we use eat rice all the time still use it everyday to understand what the system is doing and why and allow us to actually do everything from understanding survival performance to actually debugging transient problems and everything in between
 how did you trace is the ultimate devops tool as far as I'm concerned that you know back in the day I used to hear like well Detroit is it is great for operators but I don't know if it really is a good thing Frosty outside then you talk to The Operators like what I can see the reality is it really is designed to turn to reach across that Chasm of Devin Ops and a pole Devin Ops I mean as I said earlier I do think that there's a fundamentally a software development mindset person Operation Smile inside but I think that that we get to devops when we maximize empathy for the other and Divas allows us to do this allows operators understand what this offers actually doing my it allows software developers understand what is actually going on in this machine and why allows people to get systemic views into full stack views of what is actually going on in a while
 questions to be phrased author effectively arbitrarily to be able to do to dig to root causes of problems and again we use it everyday from both an operator respected into my development protective to understand pathologic systems flames and He was discussing how Netflix migrated there rest API is almost exclusively due to the fact that it would allow for dtrace inspection further could you give an example use of how how you've seen dtrace be used to or maybe at Charisse example that you've encountered howdy Trace in a wood was used effectively to solve a problem
 yeah I mean we are we literally use it everyday so I I could give you yell when I I've been using he tries to effectively daily for the last 15 years so that the number of problems that way you will be diagnosed with dtrace basically extends to the Horizon on and you know I have discovered any in any manner of the recent example that we are actually wrote up as part of a we actually I had a service outage recently the Manta Services describing had an outage that was due to ultimately due to post-process you do to a we ended up with auto vacuuming do the transaction ID wrap around which is a very Arcane mean postgres issue and something that we want to add to the post-mortem just because I we thought it was to tell is interesting though I'm people latched onto was that we used
 extensively on to figure out that postgres was actually had Frozen the database is part of this autovacuum but was then throttling itself so he would someone nonsensical. Of the database if no one can make for progress in the database then whoever's making forward progress needs to not follow themselves and we we saw that it was spending a lot of time I will be traced first to determine what I owe is doing and we then we're profession that I am annually and then we use the price again to understand why and where the database was throttling itself that you would not really have without Detroit's be very hard to figure out where this thing spinning its time because it's not CPU profiling would not tell you this is actually off CPU because it's waddling it's sleeping
 and then we were able to actually on a little bit exciting but we actually dynamically modified postgres to not bottle itself on so you know where you can get absolute certainty about what it was doing and I'm not certain day that we were that could actually modify the running postgres to simply not throttle it because it's values not actually done a month ago but of course you know we all ultimately control having an earth so we were able to was that that and look at your number but we we got it Anyway by modifying the the actual variable that it was using to determine the throttle on and that allowed us to actually accelerate a great deal of the time that it was it was taking to actually autovacuum it was a very very large databases doing a huge tables canvas so we're almost at a time what is the most exciting thing that you're working on a giant that we have not discussed
 we have not discussed I think that from my perspective I think that we are in Revolution is finally in hand and that opens up a lot of possibilities and I think it we are very aggressively moving down as possibilities we believe in a holistic approach so we are doing the weird one of the few out there that really believe that in developing the operating system we are on the operating system itself is develop is beeping developer actively by us too kind of Express that new reality but I think that there's a lot of new potential out there so you know for us right now we are really pursuing making Triton everything of people wanted to be and kind of aggressively flushing out those features and and staying on top of dr. Peters and so on I think in terms of the future we're Graves and things like that is and a
 how to use Tritton marriage can be very interesting something very actively exploring to allow kubernetes pods to be deployed is Triton containers and we think it's going to allow people to actually everyone is right is that it's up leveling level of abstraction so you know I think that we got a lot going on very excited to be a part of the container Revolution text said we were in the right place for the wrong time but now it's the right place at the right time and there's a lot of work to be done so we're just we are busily grinding away and doing it awesome thanks for coming on software engineering daily it's their blast talking to you
