Transcription: software engineering daily is sponsored by hired.com if you're looking for a job hired.com is the place to start I've used it personally and it is an excellent service software engineers and designers can get 5 interviews in a week with top companies go to hired.com software engineering daily for a $4,000 bonus upon accepting a job thank you hired.com
 Nick winter is the CEO and co-founder of code combat a multiplayer game for learning how to code Nick welcome to software engineering daily can you give a brief description for how code combat works at is Game 4 there any other codes so you go in 5 canvas or you just start typing code that controls your hero so self. Move write something down and then it gets more advanced from there as you beat more more levels but Jim's kill ogres level up any items unlocking baby eyes and eventually become decent programmer from scratch where did you get the idea to build code Kombat
 originally my co-founders and I were doing a startup for learning how to learning how to write Chinese characters and my non technical co-founder the time always wanted to do seizures but you know how to cut and he tried everything out there any how to code but it wasn't engaging enough and so when we're doing right next door if he's like man what's all the program because my phone but this stuff out there it's it's not obvious why program is awesome you can build anything at first everything is really hard at first what's the point and so we decided Well let's make a game so that the engagement is there from the first moment you can really see why it's cool to go out and you have a reason to learn a new syntax new methods different from the type of gamification that other software learning websites like codecademy feature
 so you can either gamify something which means to take something that is not a game and make it more game like or you can make a game and you can't really more from when it's the other so if you are taking lessons and then putting Badges and points on them you're not really going to get anywhere near to level engagement then if you're taking a game and building actual gameplay so that was our approach race start with a game that's like you could legit play this evening if you don't care about what I need to go out and it will be fine and make sure that the gameplay is coding so that you learned code while you're doing it interesting and it's a multiplayer game should describe the multiplayer aspect so we have the main multiplayer right now is asynchronous PVP so the kind of thing where your Writing Your Heroes AI strategy and then you hit submit and it starts to play against everyone else on the other team
 and you can kind of view replays and watch matches in that sort of thing and you can also selects particular phone and start quoting live your code versus there so I know say maybe you lost a match to me you might adjust your strategy based on what I'm doing keep running until you beat me in then submit again and see you like this we get beginners in there are we get experienced developers in there and everywhere in between a little bit more about the game play cuz maybe hard to describe two users listeners overall do you know how this code actually translates to characters moving around and doing things so describe the game plan and how it how close is analogous it is to coding
 yeah so we wanted to make sure that you're writing real code as opposed to using Dragon drop box or sort of domain specific language or something like that or coffeescript an eye of the ones that aren't JavaScript were contributed by are open source contributors right so this is all running in the browser not sending this off to the server so Brothers on the Run JavaScript you need to transfer file to players code into JavaScript and not just a program that runs their code so you can't just like them script in an end-run see python or whatever you're in script in the browser because they're code needs to plug into our game engine so if I fire types self. Move right as that kind of method call to make the arrow go over to the right are transpiler behind the scenes is going to convert that to Missoula abstract-syntax-tree and then generate JavaScript code
 this kind of instrumented for performance an air handling it all this stuff and then bad gets plugged into a game engine which is making a run around and spike traps like ready to kill you and Janice be ready to be picked up and all that and it just plugs in it says alright let's ask the play what they want to do that runs the kind of players plan method which is now transparent JavaScript and then says okay to put it wants to move over to the right we do some crazy yielding stuff in our transpiler to make the player code kind of continuation passing style and then we we we can interrupt this crazy crazy transpiration process that lets us do real player code but still in the browser on an easy way that's its kind of
 let's tell the player not for making like horrible mistakes like infinite loops and all the code is supposed to write an entire self-contained program from the start right it's kind of a Sandbox it is really interesting the process you have for transportation I imagine that wasn't the first thing you had when you were like building the first iteration of code combat was it I mean like the Mozilla abstract-syntax-tree and all these nuanced steps to to actually delivering a player movement what was the initial I guess algorithm for your translated to give an example of like the type of movement like let's say at the beginning of the very first level you know you just all you have to do is basically go right you know you're just standing there York
 just standing there and you just have to type in this. Move right so it's basically you catch your character to move right the way you're describing is that all this stuff is going on in the background to translate that simple line of code into actual player that so yeah I'm really curious how you got to that all those layers of complexity yeah so we actually started off with something like first. Better to be awesome so of course we just started with JavaScript so we didn't have the parser to AST 2 instrumental could step we just had the lights instrumental players code step very quickly it was like yeah let's do that from the abstract syntax tree because we can go over Transformations they are much better so that was actually something that happened pretty early on so the Python language was like a year-and-a-half and or something like that in the others as well we did
 try to we didn't have the yielding quite figured out at first so the players code would be more explicitly like a choose action method and so you'd say this. Set action and this. Set Target position and then somewhere towards the right and then the move right was just a shorthand for that and so if you the players started running once per frame and if they put this. Move right into something down they would only move down because you they would over right whatever they said to do with like the last action
 and eventually we did some crazy crazy stuff to make the the yielding works that they're this. Move right appears to take time and then she moves on to the stuff down and it's ready
 right so how do different like autonomous character instructions interleague because you have the enemies in a game we have some beer playing against and I've got my list of instructions that I'm doing and there's also opponents that have their list of instructions are these things like kind of asking at the same time or is there some notion of interleaving what's the relative time stuff's it's an entity component system and so there is an action system and Action System very basically look something like for all entities what we call them thangs is entities is just a terrible variable changes and it's so long
 so it's only like for all things which act called thing. Choose action and then if staying an act straight into the components involved actually hold the code for all these things so there might be a component for moves Ernie I can find it for me so you know I'm looping through all my things and maybe my over munchkin is going to go and choose to check my hero maybe my gym is just going to sit there and not do anything and then maybe my hero is going to run the player code and figure out what to do maybe the opponent here I was going to run or player code and figure out what to do
 so there it's all just part of the reaction system and so who's turned gets executed is is kind of irrelevant right everyone chooses what to do once for frame
 got it if somebody plays through code combat what level of programming skill are you expecting to have by the end of the game
 well right now we have some issues with pacing like things will get hard too fast towards the end of the levels to be done right now we're up to about 200 doubles and is you get through the first few worlds and you get into the mountain in Glacier world's I mean you're writing hundred line loan programs you're using several functions your coding prime numbers you're interpreting binary you're writing your targeting I put your soldiers in a defensive Circle and and determine when to use your sleeve abilities to go to shut the enemy spell casters I'm in building and commanding armies it gets pretty Advanced not that the average 8 year old is getting there but a lot of people that are know a little bit more just really interested will get towards the end when you have clothes
 like I tried to win the last one and I've written the Bible and I still couldn't win like some guy beat me which was a lot of fun right solutions that he adopted from papers that you're at right like in the high ending is pretty high but the progression currently doesn't get most players to the Hyatt
 people writing papers about code comment or like a I so they would Implement techniques from a i papers typically a right there Solutions up it'll be a blog post a comment isn't really formal enough for journals right as though it has a kind of restricted you know domain specific language like where your character can move Rider tack or can defend or it's still flexible enough to implement you take generic AI algorithms sure I mean you can use anything that's in JavaScript in for other languages anything of the Center Library you only have like not later love with you may only have like 30 or 50 different ati's that do anything in the game worlds that's alright so
 AI techniques relating to optimize how I'm gathering building techniques are like there's a much simpler range of things you can do that like if you're trying to optimize a traveling salesman it's like what city do I go to hear it well what control do I go towards but exactly where around it do I defend into my attacking my shielding how many types of which units am I sending their you know so it it's pretty much generic full-blown programming when you're trying to do anything Advance it's just maybe I'm not connecting to a database into a network
 show the early phases of their league levels of coke, like I played through the first two or three levels five levels and it was very much just like moving the character around and it may be curious about how you get from that phase of the kind of like a very specific you know restrictive form of just moving characters around to the more generic explanation of how you do coding and how code works and how coating can represent these characters in the level can you explain how you should have on board the player to from from kind of just understanding you know all you can do is move right or attack to this this expansive world of different commands you can enter
 yes our approach is very different from the approach of a lot of other learn-to-code things and what they do is almost always intensive learning where is what we're trying to do extensive learning so an intensive learning things are fairly hard you're spending a lot of time thinking you're learning a lot of time and like a math textbook or something where as an extensive learning most of what you're doing is already familiar and there's a much lower percentage of new stuff but this allows you to go much faster and do a lot more things for you to time as opposed to hanging out or concepts and this would be for example if you're just doing a math worksheet all of you no problems that you already know the techniques for as opposed to just reading that the you know when you're out of your textbook or something like that
 what is that you need a mix of intensive and extensive but you mostly need extensive like 90% of my time should be a sensitive you're not spending enough time doing it practicing the easy stuff for good reason right like if you're practicing easy programming stuff and another solution is probably pretty boring as why do you want to write a for Loop that is something you've already done for a project or something but then getting enough practice is we actually do this parlo originally from language learning where in language learning sure you want to spend some time learning grammar and pronunciation and stuff but most of your time has got to be spent just practicing stuff to you know so reading easy books doing conversation watching in concerning media that sort of stuff so with
 approach in the Intensive learning approach for programming because people don't really read they want to read they want to watch a video since you a lecture they just want to write the code and if you let them do that in a way where the progression is right there actually going to learn a lot faster like a lot faster so we in an hour of panko Kombat you know what your average you know say that it's a 10 year old or something they could have been taking like they're in school programming class for a couple months and maybe just got on two variables and if statements where is in the first hour Co combat they'll have done variables if-statement and Wild Waves and strings and numbers multiple arguments like they've done all that because
 we didn't stop to explain what the heck they're doing we just had to do it you kind of like show them example in the you have them do a bunch so if you ask them like what is a very look like what do you mean I have no idea but they know how to use it and that's much more important So eventually you can maybe sort of add some additional content for people that really want to know what what it what is on the stuff but it's much more useful and what we've been focused on to just get them to be able to do it as opposed to knowing what the names are difference between intensive and extensive learning I think about lick learn to play an instrument and you spend a lot of time playing scales or just learning to play basic chords are extremely basic patterns you don't sit down a kid in front of a piano and say are you just do what you want it's more restrictive in and that's
 where a lot of the the Leaps and Bounds are made a lot of times but I also feel like there are certain people that do better if they're just kind of given the wide frame of doing whatever they want to just give in the textbook are given Wikipedia Just Surf around but maybe maybe those are the people that aren't that don't need something like code combat to it to learn how to code they're learning input and mostly just reading a whole bunch of stuff they're still not going to be getting good at coding until they actually rented magic coat because even if they have this I know passive understanding what's going on so the mechanic says actually putting it down in your photo editor
 or something that you know you need to be able to debug you need to be able to type the right symbols you need to be able to say oh yeah let me just do it for the pier is opposed to having some knowledge about a poorly busy when you would use it but not having done it a bunch of times they're so beautiful and where they need to have that practice and maybe it's in the process of doing their projects because they're really motivated and they're just going to start a project but this is something that keeps programming so like maybe 1% of the kind of population of programmers because what you have is you have any other people try programming there like maybe I should try to send you the same for me and 99% of them are going to be like so I just printed out something like I I can put add two numbers together like what is the point and then they want to do a
 how to make an app to make a website a whole bunch of like today in order to write a meaningful amount of code have to get through these initial stages where it's very tough and you have to learn a lot of background in for you can do anything new and the stuff that you can do it at first seems to have an appoint so ninety-nine percent of people are going to turn away from programming forever if they're going to say all this is some really geeky things is not for me and the 1% you are really smart and they're really obsessed and they have a lot of patience then they like yeah okay well this initial part is kind of hard and difficult and doesn't do anything yet but I can see where it's making cool stuff like I know it's there so I'm just going to keep trying and then they get so he better in bed until they can do the cool things that they want
 I know you have a programmer and probably most of those other 99 people that turned away still could do it still would enjoy it once they got to the point where they could make a great thing once they can do meaningful things with their code but all the way to start we learn to program or kind of following the path of those programmers that stuck with it initially so you're kind of forcing them to learn this thing as if they have to be really smart and really obsessed in order to do it and that doesn't have to be true
 I'd like to talk more about the technology behind how code combat works we kind of glossed over this year what happens when a command get centered when it go for character needs to move and I'm curious about at a lower level like what you're doing client-side what you're doing server-side how the objects in the game are are represented in the code can you give me a better idea of just your codebase speaking generally so everything is on coffeescript and we did that for two reasons one is when I set up the project finished they had no idea what I was doing and there was a project skeleton so that's the language of project and the second reason is that are 14 that are all really I have technically skilled in Nassau bell peppers and coffeescript lets you express
 Smart concisely in a little bit more powerful than just straight-up JavaScript especially at the time when there is none of this awesomeness going on and so if you want like a wife hide your base you too soon JavaScript and you would text you when you just have some really hardcore program is on the team building stuff it helps to be able to really jam it in there so it's in coffeescript and I think is probably by far the largest open source coffeescript project several times bigger than that sell sell it and V on the on the server side we've got Express and mongo and on anode and on the client side you know it's not a fact on chainsaw some sort of stuff so but it's really fat client so unless everything happens
 and on the client's it's really really nice to be able to use Jason objects with JavaScript date of format all the way through from the database for the servers the clients to even the front end for editing data we have like an open source Library trima which just given any Jason data and a schema will give you a visual interface for editing that and that's been really really hope so that's not really quite enough to just have these Jason things you going to need a schema to go with its we do a lot of stuff with Jason schema where we kind of have this Advanced I know validation and schema frame art pic and can fly anywhere for the database to our front end loader
 and this is really awful because when your configuring object in the game I care hero stats you know I can just say like in my visual editor for that guy looks losing the website you know I'm configuring that okay what he's going to move at 8 meters per second and I might save that to the stay the night thing tight and I hope regret propagating make all the nights throughout the game of 8 meters per second and it's some sort of level I might can figure that night to say okay well I'm this one you can leave at 10 because it is kind of slow for this otherwise we take a long time so we have several layers of just configuring thing as good Jason which we can do in this visual editor and so strict the database which is really nice
 the level editor itself is kind of then makes a big level can you know with this entity component system and all the stuff is kind of the components have are coded in coffeescript inside the level editor really cool live coding thing that you can do where your preview on your level you edit the code and maybe the attacks component to make sure maybe make it so you have to get a little closer to the enemy before you can attack maybe you measure the distance from the edges instead of the centers for melee attacks play instead of having to reload anything it's sending all the codes for those components over and to your preview window for that level
 which also is a life-threatening environment so you don't even have to rerun the level you're just all the sudden you see what would happens when you've made that change so it makes it really really fast to develop in because you're not having such a really foul things to reload
 we'd like to take a moment to thank our sponsor digitalocean offers simple Cloud infrastructure for developers in one click you can have a mean stack or rails application lubuntu box or another custom environment software engineering daily is proud to have digitalocean as a sponsor because digitalocean is the simplest cloud service provider I've interviewed noisy oretsky who is the founder of digitalocean and he told me that digitalocean was based on the realization that other cloud service providers are so complicated if you want things to be simple when you pull your application use digitalocean to try digitalocean go to digital ocean.com and Inter promo code SE daily that promo code is 1 word s e daily now let's get back to our show this is the first full stack JavaScript application you've written or have you been writing. Jobs good for a while
 the previous started that we worked on which was I first like real program was python Django on a pinching on the servers only JavaScript on the front end and much fatter server right so yeah there's a lot of the stuff was new to me to half years ago we started the project and so it took me like in 9 days to get the basics working because I was still confused as like what is on the server and client what is going on what's it like maybe there's somebody out there right now who is listening device in there like about to start a project and they're thinking oh you know I've been doing Django and Ruby on Rails and stuff for a while I'm just going to do this and then I was saying in there like what is this full stack JavaScript stuff you know what are there any suggestions you would give about how to
 migrate for cuz I feel like. You still like people may have a little more trouble onboarding with it then just getting it just doing rails new in like getting started with the rails application or Django whatever the coolant is in Django
 well it's definitely differences and how you're going to navigate you know each JavaScript module that you know there's a huge amount of activity going on Open Source on get up with JavaScript and really great but that doesn't mean is a lot more modules instead of like a monolithic rails or something cuz you're going to put together Express and you're going to put together a whole bunch of other and you know on the client there's going to act silly not right but it's going to happen as well as a server so
 I think it's just as easy to get started with node and longer on that sort of stuff on the server but you didn't come with as much included so if your app is super simple it for great it's really easy if you want all that out of the box goodness that's going to come with rails it's not going to be there you're going to have to go in like pick and choose where is packages to get started with that and that's the only way to learn it's nice to keep things smaller than you know and I think it's much easier to spot components in and out but it's still nice to start with a nice project skeleton so you know if you you figure out which Build architecture you can use like grunt or web or brunch we use brunch I was really nice because when we started I use
 brunch we there is just a project skeletons they had a bunch of the basic stuff set up and you can kind of cheese mix and match from the Technologies and languages you want it from the skeletons setup was actually pretty great I just had was pretty incompetent at the time because of my experience with with the Django and not really knowing client-server difference between my JavaScript is also trying to do some really crazy like multiplayer networking like straight off the bat which is also making things difficult with like operational as Farm in my data dang I don't know why I started to do that stuff in the first like 9 days of the project but I did
 so can you talk more about the if you remember any of the misconceptions that you had about web development from from programming in Django where you have all this stuff that's done for you rather than having to pick and choose your components and and your build tool is there anything else specifically comes to mind
 well understanding the decline of requires and build build steps and like where each module is going to be available was a little bit difficult at first because you going to have to understand what your build two of us doing that you're not just necessarily going to run the code that you're writing right you're going together and it's going to require the code in front of me who module structure in the client and structure is different from the structure on the server and so what are using brunch and we have, just requires that were minutes in the browser and then that's a different require than actual node requires on the server but I didn't realize that so I was trying to acquire modules from one place to the other
 there is that that one they are magic there that slowed me down for a while
 I see
 can you talk a little bit more about the the front end rendering stuff in like how you made all the pretty animations and stuff I think I think you're using Create Jas for most of that is accurate yeah that's right so I really like that framework for doing a lot of friends stuff so it just consists of easel Jazz which is kind of guy for canvas that mimics The Flash if your eyes which I happen to know pretty well having done flash stuff for the previous app but even if you don't it's really really nice front end thing and then is also sounds good J is the lot of the things that you need in order to do rich HTML5 based apps in the I totally recommend using a lot of good stuff out there as well
 yes I've seen some tutorials for those tools that create JS sweet of tools and they're really nice like the AP eyes are really nice and that they're just fast and that was kind of blown away cuz I didn't realize that such a robust set of Animation tools existed for for front-end development yeah I said people love to hate on flash but Splash did have many many generations oh yeah. Which API speed wanted and how to organize them and was fun yeah and the performance was really good most of the time and so far she's going to die but and the part of his transition you know what even HTML5 stuff
 with you so Jas is kind of a successor so I actually know the Adobe Flash authoring to a will export straight to it Sean 5 using and so you know you can take all those animations not great pipeline for making this and then still just straight up now use canvas with that so flashes Flash Players picture anymore it's just down the street but then you still have the really really well tested great method of organizing your your code and of your your house of pipeline
 have you dealt with any interesting distributed systems problems in code, or maybe like I guess maybe really interesting race conditions between different characters are two distinctly different questions but I see them as somewhat interrelated let me just tell interesting piece of the architecture which we do because our server is pretty simple and in fact we can serve you know 8000 concurrent players in this really rich I know how I bandwidth-intensive networking which is a couple servers and it's really it's really boring right in terms of how easy it is to scale up but one of the way so there's this multiplayer tournament system where when I submit my code it's going to play against you it's going to play against everyone who submitted on the other side it was just going to play
 how many patches right it's the more matches that you can play the manger scene is the faster your phone can get Ryan but we don't to do this on our server because simulator on those matches would take a long time we have to run many many servers and so instead we do them on the clients of other players so when you submit your match and you're sitting there in the ranking screen and say hey do you want to help stimulate games so we send over that transpired code that you wrote along with the transfer of code that someone else and sort of this matchmaking system and everyone's browser will ask like hey what's the next game to stimulate the kind of simulate in a web worker what happens and then they will kind of pull out the results of who wins and send them back to the server
 and so we have we have this huge like crowdsourced simulation network-based all the players who care about the arena rankings it the more games you seem pretty cool because instead of you know where it where simulating like many hundreds I don't know maybe even thousands of games for a minute but we're not running service to do that you should bundle in a little bit coin mining in that that white worker that would have been a great idea was 6 years ago
 that's fine are the best idea an open source project people have suggested it I think they'd be happy to see something just so you know you use 1/4 and 1 and 1/4 right so if they want to eat this slow down their computer they can just open a thread for each core and then really slow it down if they're just running one typically it's right so I looked get more ideas like your inspiration I imagine you must have played some games growing up so what games was this was Colt combat inspired by visually it was inspired by Kingdom Rush which is this tower defense game for iPad while you see see if I ask you before that
 and we kind of like the art style in our wives like the art styles or like man what a great art style easy to draw but it's not just us that likes to write so we kind of shamelessly told our illustrator to use that style and we originally thought like okay with a lot of the mechanics are going to be like that it's more like a Dungeon Crawler RPG DS and we take inspiration all over the place that's awesome
 yeah I'm usually it's kind of like in the Russian then so the rest of the mechanics are you everything right there is
 is a degree to which in the future I want to make crazy chrysostom world MMO Minecraft that I have to hold off until I get ya is the this site guys just died trying to improve their communication on the side working on a game or something like that shirt Butterfield so first you try to do that in like 1998 or whatever and then like the project totally failed try to build this massive a memo saying he totally failed but then he like pivot into Flickr say turned into Flickr and then and then I don't know X years later I tried to do it again to change so I try to do it again it feels again and it could have been Slack
 a giant beat sure I mean one foot on the ground with doing that well I mean sure they had slack built internally and then they just like stripped there the prod extremely patient product down to just an intro what was previously internally facing tool yeah I mean I'm sure you are you inspired by like World of Warcraft or Minecrafter an idiot so I'm so excited about this so that's probably not spill on my secret dreams or this this type of combat next version oh okay sure will let you know this interesting I like it there's this Dyke there's different types of game so like when I think about like World of Warcraft or Minecraft versus game like
 IMDb Starcraft or I don't know other games poker to me there's like there's a difference between competitive games or like I don't know more zero some type of games and then like Cooperative games do you have any philosophies on like a g prefer you know games that are kind of win-win or do you prefer a win more win lose type of competition I win you lose to sort of thing but feeling that or did you have to have a pretty good skill match to do most competitive games and it's not skill-based so you can even have a really good co-op story and that's really good especially most players don't want the Super Hyper competitive stuff or you can have really good competitive
 but what I don't like doing it's doing competitive mode swear there's not much skill involved so for example he would be Mario Kart vs. Smash Brothers in Mario Kart there's almost no skill and they said if you're winning you hit by a blue shell and now you're not winning and the driving mechanics like the acceleration the max speed it's just all designed to make everyone basically the same where is I can smash brothers you have to be almost the same skill level as someone to have a good match with them but then when you do it's a really good match like it's super and fun
 so I have to kind of disagree with you there because I think you know what I think of something like Settlers of Catan for example like I don't like Settlers of Catan but you know the common complaint I hear is it people say there's too much Randomness intelligent stance not a game of skill but the truth is that like yeah sometimes you just get crap walk and you have to optimize that lock but the the process of optimizing the hand you're dealt is always like it's always like an NP complete problem right so I can never do the best job and I would argue that you can it's the same thing in Mario Kart like even if you get unlucky over and over and over again in Mario Kart it's still super difficult and you're still you know challenged maximally
 well I mean if you compare Mario Kart to any other racing game like in one you're going to be very close to your friends even if they haven't really played nearly as much as you and in the other you're going to laugh your friends like 9 times so I guess that's more what I mean like the Mario Kart is in in most racing games and in Mike real life racing the person with an advantage will win every single time where as you kind of ring thing as much supposed to be together in in a more casual game right so I don't like the game competitiveness where there's enough friends brought in that you don't really have enough
 cheers of skill that's what I'm making games I like to bring that thing in the other kind of skill-based nature it when you go to closets different right cuz you know if I do really really well and my friend does like sorry what kind of okay well it's fine cuz I can still like challenge myself to do really well and so when when building programming games it's really interesting to have the car mode in a way that each player still gets challenged at the limits of their ability for coding but then you somehow combine that into consideration or they can play together and then some people really wanted to what kinds of people are playing code Kombat or is it like kids are all people of all ages or what it what is the traffic look like so if you are you sign up for account answer our first call you can kind of see the age breakdown it's a little bit under two thirds kids a little bit over 1/3 adults
 it's just kind of our feelings we designed it just for kids like 18 and we saw all these adults playing it and paying for it learning to go this way and it really shows that we need to need to kind of make a second version of The Campaign is goes much faster than the average eight-year-old can handle which is kind of Mercy to the people that want to experience or or want to learn how to separate it out because there is this audience and in both places
 you are a pretty compelling post titled why you should open source your startup could you briefly outline the logic that you followed when you open source code combat a couple years ago so we have all of our users as developers are aspiring developers and we kind of you know my dad was a big open-source hacker and mr. house projects for home automation speak things is always something that was kind of like well you guys I wonder if we would help us with it or like learn to code by a kiosk Kombat and DC so we asked we kind of asked some some investors and the investor is really like yeah you know I don't have a problem with it
 I don't really does that so I don't know what it what a game developers usually I don't know this probably some reason for it like what a lawyer's name and so we had to realize they don't open sources their businesses over there their games just kind of because no one does it right and there's good reasons why doesn't actually help for a lot of businesses like if you are audience isn't aren't developers it's not going to help you but a lot of the Spheres around it in terms of why people are going to compete me or it's going to be a legal nightmare Relic investors are going to invest in this it seems to just generally not be true so if your users are developers then you open source it and you can kind of get
 which bigger lever for which the deer development work
 how many of the businesses that I have talked to on this show do have some sort of Open Source strategy like Clyde air I definitely comes to mind or even Facebook like I talk to Facebook a ton and ever since they open source to react development on that has just you know Gone Gone Bananas it's done really well it almost seems like yeah if you can sort of look at open source as a North star from the beginning it's it's like a competitive advantage
 I was like wondering like what's the what's the logical conclusion you can take the stores in like I don't know what do you think would happen if Microsoft open source Windows today
 well The Logical conclusion for the combat is the things like Minecraft and have all these Minecraft mods but it's not actually that easy to make Minecraft mod and we still combat you really try to cultivate the above Auditors open source encourage that conclusion is that as your game or your project gets amazing it just gets much bigger than you but then if you're running it for profit like you still get the prophets right and maybe you can figure out a way to start off as we finally have it all for you let's do it
 as far as what would happen if Microsoft open source windows I would have to figure out what would happen in terms of their cuz they sell Windows right they will be able to sell any more Windows 10 was a free update a free update if you already had it if you already had it so I had to buy it right I don't know how big service it's so if it wasn't a big part of their business then I think it would actually be really good because a lot of things are really important to some people and then which
 multiply that by all the developers that use Windows and I could be really really big but you have to do a lot of work to support the open source Community is the size of Windows like it's very difficult so I can actually accept any contributions for someone that like understand I took the time to understand everything and work with your development process so not really sure how easy it would be for them to like really do it cuz they can only do it and get some rest but that wouldn't really work right but then in terms of they wouldn't be able to sell it and then there would be a lot of overhead for elected office trying to be contributing him really set it up for that it might be too big at this point you can open source more more components or you could open source the whole thing that made sense for you to have third parties on of being able to get around windows fields
 everybody should learn to code think everyone should try it well not everyone so it's like people that can't read yet first I really going to have a good time I'm thinking try to block thing or something but
 and if they just really really doesn't sound interesting to them and it sure skip it but they're going to have to try it at some point in the future because over the next few years you're going to see coding as a core subject basically everywhere it's already happening in 22 countries and worst cities in the US right so it's getting big and you're going to have it just be like math or reading is like a core subject everybody does so everyone will trying and I think it's fine if people that try it and don't actually like it and they don't want to go but a lot of them well because it is like it's the tech skill that you're an analog of all the fantasy books that you read for people
 I like unique skills and stuff you can actually just create something just by thinking it right your imagination is your constraint only it's really cool it's a lot easier to learn it can be a lot easier to learn than people are thinking it's not just the geek thing the other future is bright or a lot more people getting into how do you think that sea change will happen to you think it'll be like you know if your personal people think about your basic arithmetic generally don't think oh my God basic arithmetic I am not going to touch that stuff but you know like basic coding you know there's there's still plenty of people you know maybe not you'd like super young people at this point cuz it's I'm going to see change their butt like your people our age for somebody I know plenty people were just called coating don't touch that stuff still like how do you think that will progress over time
 I think it's probably pretty similar to math I mean people don't think like I'm not going to do a decision but they're not thinking of addition is like the useful subset in math actually like that they have an aversion to the field around the areas so it probably is going to be something where I like it becomes like less and less comment to find people as you go down a drain she say like yeah I don't like Cody like I'm a good coating
 it's about the age range I think people will give us behind anyone who wants to break into it like young turkeys
 yeah we did a week of shows about Y combinator which is the startup accelerator that you were a part of and we talked about the engineering I need different companies we always asked this question what was the most counterintuitive thing that you learned while you were at y combinator
 I think minute
 I guess it should have been obvious to us but most of the most successful best drawing apps are business-to-business so all the startups that are B2B have a bunch of your time and then are business-to-consumer apps it's just so much easier to make money now what, your Uber or your Airbnb tea or something be a huge success and in the media and the sorts of things that you're actually supposed to course it's almost I'll be to see you like this is what
 that ends up with most people if they want to they want to scratch their it should make something in there that it's it's just a much harder route to take so going to right, later and seeing all the BB companies in there was kind of eye-opening and something we probably should have known before then
 interesting Nick winter it's been really great talking to you about code combat and I wish you the best of luck in the future thanks for coming out of software engineering daily yeah Jeff thanks for having me
