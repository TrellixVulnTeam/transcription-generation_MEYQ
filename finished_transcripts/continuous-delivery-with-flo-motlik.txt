Transcription: continuous integration and deployment are important tools for modern software development with continuous integration and deployment individual Engineers can push code without waiting to synchronize with the rest of the team on a big software release today on software engineering daily Florian mudlick from code ship joins us to discuss continuous-integration devops and microservices in full disclosure coach trip has been a sponsor of software engineering daily but I would be doing this interview whether or not that was the case because flow has a lot to say about software engineering we get into conversations in case studies of how software teams take continuous deployment from Theory into practice but first we have a word from a sponsor who keeps software engineering daily continuously good morning
Engineers love Automation and well front automate your investing as a software engineer at there are certain processes do you want to execute no matter what like integration tests during a build you wouldn't execute integration tests manually you would use a continuous integration tool like code ship or Jenkins to automate your integration tests wealthfront is a tool to automate investing just like a continuous integration tool runs your test automatically wealthfront can reinvest your dividends automatically and perform a tax loss harvesting automatically to get your first $15,000 managed by wealthfront for free go to wealthfront.com se daily and get started with wealthfront Slayer of automation on top of your portfolio wealthfront.com SE daily check it out it would support software engineering daily and you will get $15,000 in managed for free
you sign up to make your investing get back to the things that you can't on me like writing code
 flow mortlake is the CTO of code ship a continuous integration and deployment service Florian welcome to software engineering daily continuous integration and deployment is what coach of offers what do those terms mean yeah so I mean the process of continuous integration and and continues to climb it is all about making sure that your team can build and release their softer escutcheon as productive as possible to read a continuous integration running automated-tests making sure that on every change that you are development task to any future brand or any part of the repo your automated test the ram in the fastest and and most paralyzed way possible and and then once the team has implemented something once some developer in your team is ready to release something that even just merging it into the master Branch releases it and and gives the latest version of your code to your customers support in just lying around in your report
 I can actually provide your customers Value Inn in our opinion that's really important because I mean especially for a startup but basically for any kind of company you want to be able to get all of your project all your updates as quickly to your customers to learn from them and that's what we as a service enable and then that's what a lot of customers and lot of teams have been doing for a long time but not with everything moving to the cloud that's one of the last pieces that move to the couch as well how does an organization that uses continuous integration and continuous deployment how does that kind of organization operate compared to one that does not have continuous integration deployment yeah I think it it even starts from like a project management perspective is were often teams that that don't really do this kind of conditions aggression or continuous delivery Cycles they have to wait longer development I'm so you have instead of doing like a weekly Sprint so that really small iterations on your project or like a kanban thing where you at
 you have those like 3 weeks or 1 month release cycle or even longer because at the end of each release cycle you don't have good automation to test everything to please if you need to go through it manually you didn't take me to make sure that everything works well and everything gets tested and so you just need to add this additional cycle time and to the end of that whole process and that's just a lot of time spent on it so you need to move faster you develop in a completely different way because everything needs to take longer you need to spend a lot more time and really building the whole future because it's hard to ship just small stuff I'm if you don't have a good way to release immediately like for example of what a lot of things do is like you need something small and sometimes it doesn't work so you need it lyrics to fix if your release cycle is a month there's no way you can just implement the like an MVP or really small part of what the pigeon needs to do you need to implement it completely basically because you don't
 when exactly the next cycle it's so the whole way how you approach planning and planning on releasing and talking to customers and I mean that even an impact sales like if you want to ship to fix and it takes you 3 weeks to ship that fixed even though it's a small one that's going to implement impact sales and how they can sell and how can they can talk to customers and to the whole organization needs to move a lot slower and missed plan with moving slower than you have a cycle the world like the release process and testing is not a hindrance if it if you know that like I'm changing the sting and it's not breaking anything so I give it can give it all to customer and even just test it so we recently did a webinar with with her future I'm so busy for Featured a service and are generally future powers are great way to just give the feature to a couple of customers and then try there and run it and like it really even faster and if you have this kind of work for you released
 Arthur Chu experimental lot more a lot more things try to go in this direction or that other direction instead of going full-on into Just One Direction and maybe going down the wrong way just afraid to experiment and you learn from your customers what is actually the right way to build it at the right thing to build instead of just basically guessing and then seeing a month later if that's something that customers are actually interested in or not explained why continuous integration and deployment are these desirable characteristics to bake into an organization what does code ship do how does code ship allow for organizations to implement continuous integration deployment festivals on your own as a service so you can consider it like instead of running your own get server you use gets up instead of you running your own building projection you use
 coach it and of course since we're a dedicated team doing this for many many different teams many thousands of customers it just the service is really stable we can Implement a lot more features especially features that as any other service out there that the price is out of service and we can build things that are really complicated to build that no single team with build on their own unless they're really really large because it's such a big investment on the other hand. It pays off to have that kind of feature to be able to have that kind of flexibility in the services and those kinds of things so it's really all about making sure that you are development team can focus on what is best for the customers and work in the world's best for the customers instead of building things like testing projector or even scaling testing for starch like three people is very different than a test infrastructure for 50 people and with a service like ours and Generator is out there it just much easier to just put in the credit card upgrade to a higher subscription to your if you have more Developers
 Google Play Tucker okay I want to dive deeper into what a company with continuous deployment in place looks like and it will talk about a little more about could ship so you've talked that software testing is crucial to continuous deployment basically that is an inherent part of deployment process software testing how should people structure their testing strategy to work with A continuous deployment infrastructure
 yep so our approach there is all the ways to fold first of all or made everything like we leave sometime soon teams were they feel that even having some kind of manual QA even though it's great for teacher reviews not really great for testing that that thing actually works unless you just want to see if I take her on it and then what we find is a really good approaching that we use and that you have many customers using its kind of testing from top to bottom meaning you start testing from the perspective of a customer so that can be a selenium test any kind of high levels functional testing where you click through the website you make sure that the pie button works you make sure that the login work because you're going through that whole so of of login and then any other kind of features and so we've seen things go from noticed sweet at all to like covering most of their most important on what grows in the product in a very short amount of time because you don't have to write thousands of test cases in the beginning red can write 15
 funny test cases that cover the most important things and from there you can build but that's the kind of approach a very customer-driven user-driven approach in your testing to make sure that you actually do what's best for the customer and interested in me in that way about continuous deployment and testing for that are unfamiliar with different kinds of testing we should take them over to differentiate between unit tests and integration tests and maybe if there's some other types of tests that you think are worth in numerator and let's discuss the suit could you define at least unit test and integration test and perhaps any other categories of testing that you think are important to use toilet yet so unit-testing is basically the smallest I'm of those are with the smallest focus of those so typically it's a small piece of code small unit of Courts
 could be a class a method in math class or anything of that sort where you test the implementation are you test the calling you give it some kind of parameters and just see if that specific message returned it as exactly what it's supposed to do when a very small level you typically have many many many of those in your test for in urine test weed and it's going to test should really only focus on one specific scenario a large it has like a functional test could test a larger amount of features on and could could could use a large amount of Court Unit test should really focus on a very very small things like a mess up where you can check the app
 so we have this but you didn't test in a very very small level are typically what what we have customers and how we use it ourselves is unit testing would you use going to function test which is the second approach function test is really all about making sure that it's not just a piece of code that works but a larger feature Works in an expected weight so they could be login for example you open up the website and you go through the log into work flow through something like selenium or any other kind of browser testing tools for example to make sure that work flow works and a recipe that's going through the happy patch so for each creature you make sure the happy path works out fine and then you add another test that goes through the sad part to make sure that if there's any kind of Sarah the correct message gets shown and it it it does the right thing basically for a specific error in case the problem would be is a kind of function test
 and wouldn't bring testing in terms of the features is that they're slow I'm running a selenium test is really slow at this just a small piece of code itself is really fast so basically you want to make sure that for the important features are basically all features you have kind of a functional test that goes through the happy path and one of the sad cats but then you have unit test that on a deeper level validate the other Set Pets for example you have form and you have some parameters that need to be entered in a specific way you might just want to test that one of those primaries in one of those parameters is not correct that you can't go further in that form but you don't want to really test every single form entry that it shows an error message in the right way because that would piss be a lot of tests and that will be really slow to get one of them have the sad past and then in a unit test for example you test abilitations you make sure that specific values
 can't be inserted and that would be caught by the medication which also means because you said it up in her in the right way and that they would be shown in the you I pray that you don't want to test everything through that so that's it typical set up between functional testing or feature testing Works kind of acceptance testing kind of overloaded it's it's hard to have a very exact definition that's typically how I see them in the house are we used them ourselves then and another one would be integration tests which is offering a kind of used in a similar fashion to two functional testing but the main idea behind the creation test is that if you have a large amount of interpreter think microservices that need to work together and before you want to release something you want to make sure that the integrate well together that the different interfaces between each service works as expected to set up all the kind of infrastructure and then walk through a workflow I use casing
 application that goes through all of those different services to make sure that they properly work together it it's it's feels really close to what functional tests are the difference there's two functions tested really user and customer-focused do you want to make sure that they use the feature works for the customer and integration testing more technology-focused so that's the feature that has all of the different Services all different parts of my infrastructure do they work together correctly so that's why they often times they could even be done with the same technology so you might just use a selenium to trigger and to go through Metro that triggers all these kinds of services they have a little bit of a different approach night so that's definitely not mentioned that the the length of time it takes to run your tests can be inhibitory and and that will certainly be one of the driving guy use cases for code ship and we'll get into that
 later on but speaking a little more about testing in general there is a school of thought that people talk about called test-driven development and this school of thought I'd suggest that we should write our tests before we even begin writing are code to what degree do you agree that this is a good strategy so I think I think it's definitely good strategy and it's a good idea I think I was much stronger in the past on this then I might be now where I think if you're in a mindset already and if you're there that test-driven development and you start writing a test beforehand and you've been there and he's done it before it actually pays off I think it's specially on the more feature side like if you write tests and like right AAA Future Past the ticks on a specific link and then you expect this to be there and this to be there I think it helps with how you build the page how you build the feature to have something that already kicks through it
 and uses it kind of like and use it because it forces you to think as a user how would I click Through This World With The Flowbee how would I set this up the thing that really helps a lot and I think that's what test-driven development forcing you to sink in think a little bit outside of your development you send an outside of like how do I implement this more like okay what's the floor that that I should follow here I'm definitely helps there but it does I think especially if you do new features what what I typically to in development if I develop new features I quote them to a point where I feel comfortable that I can have a good feeling of what the flow will be like so generally like if it's a bigger one and and completely unexpected something between you and that we haven't implemented in the past reason just a tradition of something that we have just do some kind of exploratory development just like a kid put something there somewhere and just get a feeling of like how this whole thing actually feels like
 like what what would work and what does not start implementing the test at this point where you don't really have a good grasp of of the future itself you might Implement a test that you don't really need that is completely contrary to what actually should be there but it might just be a little bit of a waste but I think I'm getting to the point where you understand like okay have a good feeling like this is exactly what I want to go with it and then immediately stop and implement the test that's hard and I think that takes some experience but I think that's really valuable thing is and you work you work in an exploratory fashion as long as you need it but it's of you have kind of a process as soon as possible because when you know like this direction that I'm going with us you start adding a process that you can easily follow any trade to think that especially the future side is typically the workflow that I do if you just eat right on existing feature I think implementing the testing
 you have a pretty good grasp in a pretty good understanding of where you want to take this then implementing the test immediately makes a lot of sense because you can't you're saying you're saying there's maybe less of a reason to do you know tight tdd practices if you're kind of in a Greenfield environment and then maybe is you closer to where you have a better idea of what your product actually does then you can talk in more definitive terms about what you would want to test to do yeah I agree I think green face more but more on the features list on the whole Project's I think it's important that if you can come in the future even though it's a completely new project you really should start writing test early on but what I would do is I would write more on the feature sidebar high-level stuff early on because it will change a lot more than typically like your login workflow like you click the login button and then you feeling an email and a password and login
 even if the user interface changes that's probably going to be there for quite a while and like these basic kind of work Frozen these payday see kind of things a tiny piece are probably going to be there for a bit and it's easier to write tests that we can change the UI but the the tested works so I think that's something that that at least I found to be really helpful I haven't found unit test or really low level testing to be very useful in it very early stages of the project project I think they're more helpful once you have a certain understanding of where you take this and what the future will be like all the times the problem is that I see if you don't start writing your unit test early on as well you have this kind of problem that that you don't write them at all because there's too much stuff to do the thing getting a good balance were okay you know this part of the code is is in a good shape and like we also know how we want to feel this and then start building your test there I think that's me pays off and at the same way that you.
 your test for your user interface because you want to think as a user and going to Think Through the flow the same applies to unit-testing work as soon like riding a test for a piece of quarter you call the really shows you would like this is comfortable to call does this make sense is the naming really right or is the naming really hard to understand it in my opinion makes me pretty hard to see like while you're riding the class if the class is really usable I'm at the coldest reusable it's much easier to write a test for it because that you think about the user experience of of that specific piece of course that's in my experience has been really pretty helpful of the continuous deployment practice is often this important of small services are microservices why does building small Services lead to a more efficient continuous deployment pipeline
 yeah so typically especially if you wanted release often you want to keep the surface that you touch with every change small if your application like if any change if you have like this huge monolith and every change that you do touch the whole monolith then you have to rerun a lot more tests because you have to make sure that everything in them on the list Works everything is a smaller piece of code that can be deployed independently then that department and the process becomes a lot faster because the tests are faster the code that you need to understand and how it can infect everything in the physical is much easier to understand so that's typically why especially once you want to move to Consumers delivery you want to have those kind of smaller Services one problem with a small Services though is the process of how you release them to different schools of thought basically that that that I've seen so far is that if you have this kind of micro service-oriented architecture you deployed
 every service independently so that you can deploy anything anytime the disadvantage there is that during the time that you deploy something you might need to support different ways or did you change an API but you need to support the old way and then you wait until all the other services that called that particular service are updated as well to get zero downtime department so that attract some kind of complexity to how to each and every service and how I can before each and every service but often times like the interface is between most services are typically relatively stable Inn in the implementation and the features that they support you add a lot of stuff you made it affect a lot of stuff but the interfaces don't change that much in fact from functions and pretty eyes that are kind of stable and have been stable for a while so I think they are generally think that the independent Department approach is a better
 how much work is if you can just move a lot faster without specific approach but that's what you want to say I want to deploy my whole infrastructure ones in those different Services I want to I want to integration test is completed together that would really good feeling and understanding that I can release this together and it works don't sit there of course is it's a lot slower because you have to release everything together you can just push like 5 different services at the same time you have to run a lot more test cross everything because you tested everything works together really well because you only release it together that removes that burden kind of remove that burden of the zero downtime deployment how to handle that with with a quick releases and you don't have to support everything all the time because you push everything together
 but yeah but it has about 10 of being slow and I think things through is just really really hard on most companies
 I love being a software engineer because of how easy it is to build side projects and I built countless side projects I build a Social Gambling application a dating website back in the head zero users stock trading music rhythm application for Android and I think every developer should have side projects so when I have a web app that I wanted to play and share I want to show my friends my most recent project that nobody will care about I use digitalocean to quickly spin up a server and host my projects and who knows if one day one of my apps takes off and goes viral and people actually do care I can easily scale using digital oceans flexible pricing plan companies like taskrabbit that have grown rapidly have used digitalocean for this very reason but until this happens I will happily stick with the $5 a month plan sign up with promo code SE daily to get a free $10 credit is a listener of our show
 and start building your apps we would love to see what listeners build so send us an email showing us your project I've also interviewed noisy oretsky who is the co-founder of digitalocean and he mentioned that the ease of use and the flexibility is why they built the service in the first place that digitalocean in interview is one of my favorite episode noisy talk about believing in a Datacenter he says you don't know how hard it is to do a cloud hosting service on until you bleed in a Datacenter it's really interesting that was speaking which let's get on with this episode of software engineering daily
 Okay so we've talked to your about separate aspects of a continuous delivery infrastructure test staying microservices and there's also the importance of having a deployment Pipeline and this different stages in a deployment pipeline soap for listen to have no idea what this is can you talk about what a continuous deployment pipeline is and why it's so important so basically captures all the steps that are necessary to require specific piece of code to a specific environment so that could be staging pipeline for example to deploy to staging that could be a production pipeline but it basically captures everything in the automated fashion so that the deployment happens without typically without any developer having to interact with that process
 call the automated as much as possible sometimes we seem teams that have some manual step in there but the important part as well as if that manual step is somehow in that it needs to be very well-documented and follow it konsulent and constantly so you you want to make sure that through your deployment I've been through that automation you don't really have to think about the planet anymore so that's where we try and and that's how we try to help our customers is that department is something that just happens when you merge from one branch to another and you don't really think about it like you merge code and then you just go over and back to some other work and work on the next paycheck and at some point like you just got a notification distinguished applied and the deployment work fine or the deployment didn't happen correctly but I think it's really sad we call that repository driven infrastructure so basically as a developer in my day-to-day work I just think about moving code from one branch to another
 and everything else just gets triggered and and driven from there and all my changes that get the tide are driven from the rent as a band you set up different department pipelines for different branches were you want to maybe you want to be Play Future Branch to create application automatically you want to reply you are Master Branch to staging up at war production app or you could also which some people want to do is that they don't want to keep on master all the time they have a specific production branch and only that one gets deployed out of the production so you can manually trigger it by moving code around in your repo but again it's not complex because you just move code from one branch to another and then the deployment Pipeline and adult admission takes over and then deployed for you and yep that's a really powerful workflow write it it provides death latest layer of safety or insulation or strong definition about where
 environments is your code working properly and several shows about devops and the devops movement and I think this is kind of iconic of why people are adopting tools like code ship so how would you define devops and how does code ship fit into that model I think generally the idea that end in how I understood it so far is making sure that first about the developers have as much control as they need over the environment and that includes like how and which with which software their application is running and so for example with black writing Parker is a really good way for what they're not answering just because how you can run complex intersection with darker but that darker provides you this kind of really nice apartment for Mitt where you install everything as a developer yourself inside of the container
 and the operations team at the operations guys can just take that over and run it for you but they don't really care what's happening inside of it so on the one side giving developers more control over their environment but not just control but also responsibility like now that you control whatever is happening inside of this piece that you're giving me you also have to make sure that whatever is in there works and so that's the whole lot Mission Park I'm on top of that and then on the other side now that we have this kind of model where is control more and more of of the pieces to go running with services like it'll us the cloud and all the service if they're running on top of but also coach it and then gets up and all the automation that they allow devops really allows the development team to treat their infrastructure like software to automate the invitation like software and not have to think about long-running instances long-running Hardware or anything like that anymore it's just kind of classes at means
 only that in this case if I start an instance from a class it's just a set of somewhere and I think that model of bring it down to the level of softer and interacting with it on a kind of a softer left even though of course there's a lot more complexity underneath then how'd you manage the operating system but I think a lot of that is getting more and more hidden from the developers because Services because of things like elastic Beanstalk on Heroku were you really only care about your code anymore and everything else that you need to do you just automated top of it and I think that's a really powerful model for many teens because you can get the best of Skipper to build those amazing services for you like the day really really understand on a very deep level how to make that work how to automate that for many many customers and for many many teams and you as a developer can work on top of that you have your Define artifex how you get stuff into that interests
 and you can automate on top of that instinct and always stay in your comfort zone which is softer and so I think that's that's what what is for me to have UPS this separation back to your responsibilities on on the developer side
 is coach ship modeled after the after looking at the continuous deployment styles of where the devops styles of any particular companies or maybe you could give me a little bit of an idea of how you guys got the idea for Coach chip yeah sure that I was the person in all of the other teams I work before I'm a process person that was always the guy setting up like development processes introducing different build tools or like automating that moron and I was also typically the guy managing Jenkins and from managing Jenkins instances in several times I just got away with the idea that this can really not be the end of of of this and even though I like Jenkins and they did a wonderful job of introducing the concept of cin reading nailing it for many things many many years but at some point it just showed it sits Enterprise roots and
 authentic complexity of just managing that underline the structure and especially manager and managing the infrastructure for like different teams like if you have in one company different teams that use the same kind of testing for structure that just becomes a huge headache because somebody will inevitably go in and update the post reservation and then like because they use the latest postgres and you use another version of post Crest and then chest your test fail and it's just miserable and and and I was really the most were guitar band and it'll yes took off so that was in late 2010 and more we're already taking off for a bit and so then we decided like okay that's something's missing their like everybody's working on gets up everybody's 2.8 earliest and then everybody runs their own test of us like that didn't make any sense so we we just basically built it or do something about it and yes
 what we started and that's also how the ideas and then working with many customers came along and then how we mourn more saw that it's not just about the test but it's really about making sure the people can release easily continuous delivery and General Lee car lot more traction over those years and and so that's that's how we got started there and that's how we always thought about that how can we automatic more how can we take more burdens away from the developers how can we make sure that they can be more focused on their coat and their product instead of the other things that they need to take care of but don't you want to take care of because it's not really a productive way to spend their time and so that's texted you
 okay so let's start moving towards a conversation around that when a company wants to on board with code ship for the first time what does that company need to do and you just physically sign up on our website you log in through either get up or sign up with your email but then you connect your kids up or if it bucket account create a new project and then you just get presented with a list of your repositories you select the repository and then you can start running up your space again and then it depends we have two different into structures I'm the one that was running and running for quite a while where can manage everything through the website and set up your built with a wet dry and we also have a nudography system that we've been working on for a while and they are you just basically have configuration files like a Docker compose file and a workflow and file that you just put in your repo we just read those and and take it from there but physically yeah you just call
 backyard repository reset up the hooks and from there on we start running the bills for you
 so what kind of configuration do I have to do as the developer with with our system you basically just tell us which containers to use and how they should be linked together so the Creator a man container from Atoka file and we have a lot of that in the documentation of course that says okay here is this container has Ruby installs or start from this Ruby container I installed these other kind of tools and dependencies then I have a postgres and a redis and I link it to into this Ruby container so that my Ruby test process can actually talk to post stress and red is well and then you're basically all set there so you set up the bill infrastructure and which gives you a lot of control because you can really install anything but just a container so whatever you install in that container is it's totally up to you and then in the web profile is just a Yamaha side basically where you to find a graph so you just tell us use this container that we've just created and run this command inside of it and that could just be any
 test framework I'm for your specific language and script or whatever you want to run as part of the building that you can use obviously paralyzation and lots of different ways how to build really really complex graphs are you would say only around this field step on these branches or only on branches that match this Rex but that's that's the main idea you just put those to your muscles in their define environment and defining you are pure process and and then you go to go and we pick it up from there just code ship clone the entire database or do you just specify some kind of sample data base or how does that work so you have some kind of Effect 3 or something like that where where do you create and then populate the database obviously have customers that connecting to like long-running staging databases because they want to have they want to run up against the very specifically to set or even had customers or have customers that download like a gig
 data for the appeals to populated for specific branches or maybe on the master Branch you want to run against a specific data set so that's something that the customers too but I guess most people really use factories or any other kind of way to populate their database while or before running the test just to keep the data set controlled and small and particular to each test so that's what you typically find people do
 good shape has a feature called parallel see I knew you talked about this a little bit and makes your test run in parallel I'd like to get an idea what this feature does are you running all the tests on the same server or are you spending up separate servers for each test in order to increase parallelization that you're running on in our existing infrastructure we actually we have basically a big cluster and we are on Alexa campaign us there and then we just distribute the build we split it up into various departments and then we run it across the the infrastructure and it just gets picked up by whatever I'm field setup is just ready to pick it up basically and make sure that it's Katie is getting distributed across the whole infrastructure in the new system the back of his system it runs on the same host
 so the idea is that we don't because we can do a lot of control than a lot of power over the specific Docker containers that you're running even reaches like you talk to the doctor so I could directly that could introduce some security issues so from the beginning we decided okay we're not going to run this multi-tenant and because it's somebody's able to break out if there's ever a talker. And somebody be able to break out we don't want anybody to obviously leaks production or but that's kind of a no-go customer service powerful way to run their fields so Frost the best we was to just give you a hole in a message them and you run inside of the earliest instance when you paralyze you run in separate containers anti-semitic containers on the same host if somebody's ever able to break out of one of those containers there just then it'll be easy to host and and since we're not be using containers for other custom
 a reason for using a instances for other customers you can really do anything about it there so that that was really important terms of the security and and you can also selected for instance if you want to go with the smallest or a larger in size is is totally up to you and I got give you my part paralyzed Pacific
 what kinds of speed up do people get when they parallelize their tests so we we've seen teams and like the largest teams go with like 20 or 30 or even way more pipelines just think we will have teams are definitely go from like an hour and a half an hour and a half deals down to like 10 minutes 15 minutes or even lower than that so I think that's definitely the kind of speedups that that that we've seen in and it depends on the specific languages some languages words it's a little easier to paralyze than than in others Apso at a lot of speed that can be gained out of paralyzation and and a generator in in my opinion I think that the goal should really be for the built to finish in like 2 or 3 minutes because that's the time to be like if you develop something locally you committed to push it into the repository after 2 or 3 minutes like that the first
 where you think I like it still already finished or is it still running and at that point you want the bill to be finished because you might have to work on something else you can come at the next time you do something like that and then you one I got the feedback like did everything work or was that something that failed and if there's something if there's something that failed you want to go back immediately fix it push it in and then keep working so that to 3 minutes 5 minutes maybe but 5 minutes I think already on the Apple pounds of I consciously think about the bill and where and when I have to think about that. Just another loss of productivity like I don't even know yet I don't want to have to think about anything I just want this kind of information to just flow in my direction I'm exactly the time when I need it and so I think that that's the cool that we want to give people did the power and the ability to survive and I think that's the goal that we have for our test with and which were sometimes work is sometimes it's working out sometimes it's not
 cuz it's it's really hard to make your test sweet run fast if you have a lot of tests increase in speed type of software engineering bottleneck is often times overlooked it sits it can be so useful you know I did Show recently about some data science stop and you know the gas was talking about spark and basically how spark didn't bring anything new to the table in terms of the the application types of applications that use writing but the level of speed that it brought to the pre-existing operations that he was doing completely changed how he thought about his work and and I think the same is true for getting your inner your test infrastructure sped up or paralyzed it totally changes how you feel about the development process
 10% agree I think that's the correct time you just change how you build your product from everything from Marketing sales product development everything just gets changed if you can release any single second that you want to know talk about how a company can get started with continuous deployment on Coach chip for example let's talk about some of the companies that have been using coach chip for a while to get an idea of the product offering and how it how it improves companies so one example that I've seen his product hunt which is beside abused before and this is kind of like a news and information site that showcases lots of software and books and podcast and stuff it's built on Rails and book before you ship they were using rake tasks to deploy and they tested locally and if they had a feature branch that they wanted to deploy they had to test it locally before it was merged
 how old is a continuous delivery tool like code ship help with this type of situation. Just getting that feedback immediately if something works if as a developer you just work on a feature you ran the small test to like a two or three tests that impact that feature as soon as you've committed something instead of having to run the whole sweet locally and just getting a coffee or doing something else while your laptop is completely like taken out of with that the with it running all of the the test instead of you can. Just push it to go cheaper than the other after using and then keep working on the next thing and and that's already a speed increase while you don't really have to think about that at all anymore and then also because once you have this kind of information to Department fast as you can I run those manually and somebody in the teams run those answers you consciously
 don't push as hard and as fast all the time and that's definitely something that I'm sure they're the Predacons guys would agree on that you don't you you lower the speed yourself because you kind of feel uncomfortable deploying by hand and that's like once you know what the plan on happens like everybody is kind of okay now this happening like that just watch that everything works fine it's an uneasy feeling that you have if you don't feel that is fully automated and like it's just happening and without you having to think or interact with it at all I think those kinds of things are really
 driving the adoption of off of cin density in general and and services so they don't have to two managers on their own and that's definitely true for for the product hunt I open a trading very quickly and releasing stuff all the time and I'm very happy to to support them with that and make sure that they can can bring all the best new products tools to all of us another case study I saw of a customer using coachup was an organization called lending crowd which is a pure to business crowdlending service and they were using Jenkins prior to code ship how how have they migrated away from Jenkins and how has the continuous deployment process changed
 yeah so typically since the way the system works is is Bill just running shell commands as well so that's something were you can just copy over your configuration in large Parts very easily and the process itself gets get the onboarding process else gets gets really easy from there and and and also from the Department side I think that I'm if you remember their their specifics correctly I think
 Towing in this kind of whence you too many transactions Financial transactions and if that's a big part of your deployment story you also want to be very careful and conscious when you deploy and it which one you to planned and and if you do it automatically all the time for every marriage or only on specific occasions and want to have some more manual control over that end in chatting if I remember correctly like they have to hold the planning process fully automated but then I also have like this kind of manual step in between were you merge from one branch to another and that triggers the extra coupon for to production but other steps like merging into Master Branch deploys into a staging environment where you can actually your review and do a feature of you and and all that kind of stuff so being able to have these kind of staged WorkSource this kind of States each process where the whole team especially for some companies that that can trust
 a lot whenever they want to so we have customers that have contractual obligations that they do not release between 8 a.m. to 6 p.m. Eastern that's a contractual obligation and so they can't do anything there so but they at the same time they want to make sure that the application works do you want to reply to staging environment all the time so they automated that the automated the deployment to production they just don't trigger it I'm during the time where they can't unless it's up a specific pack release or something but that that they need to push up so these kinds of workflows what I think really important m444 those customers and that we have this kind of flexibility where is really nice I think it's a really helpful and really productive work clothes for many many teams
 but it's not something for everybody and especially not in terms of the timing some teams are really early with that sometimes things don't feel that their coats coverage in the test coverage is at a point where they feel comfortable releasing all the time and and and send the add some some layers there that are still fully automated but a little bit more on the control and tell teams where I think teens should be going is really like it's Friday night and you're basically out of the office on your way to meet with friends and you just match this thing and put it into production because you have that trust that the system will capture any kind of problems in any kind of issues I think getting to that level of comfortability is is really key because only then you can read it as you mentioned before change your whole process that change the way you think about building your pro
 impeding your software which just it it doesn't allow you to do that if you don't feel comfortable at any point in time and and anywhere have to deploy
 pictures that coach app is working on today so that the big thing is that from your our system so while switching in production release and we already have customers on there and and you can sign on to to get a demo and get it there were putting some of the finishing touches on some of the features they are and really making sure that that part of that you in picture this is there for all of our customers and I think on top of that the future coach it is really in making sure that the information of a build gets delivered to more than just your development team so we see coach if we should generally continuous delivery and and the process continues delivery to be important not just for the development team not just for like the head of development VP of engineering or something like that but it's really important for product team it's really important for marketing for sales for support because if your support person you get in a support request and something feels and you
 customer to get a good answer to get that resolved as quickly as possible that you talk to your engineering team they fix it they release it then 2 days later you get a notification that somehow you know that this was released and then you can tell the customer now there was a two-day delay maybe that where you didn't tell the customer that this is already been happening this is out there this is fixed and they would have a much much better experience with your service if you knew that that information if you know that the planet happened way earlier so doing things like that where we think continuous delivery has a pic technical Challenge and that's something that work finishing now basically I'm bored like finishing the next situation of that now
 but it also has a big communication challenge because once you are able to deliver at any point there's more people in your company that are interested by that and the same goes for sales and marketing of course making sure that this kind of information flows out of coaching and into the right people and the right place at the right time is really one of our next challenges to to really bring Christmas delivery to even more people in companies than than just the development flow thanks for coming out of software engineering daily it's been a great conversation and I'm happy to have Coach up as a sponsor of the podcast you guys are great you're probably super interesting and thanks again thanks for having me was a pleasure
