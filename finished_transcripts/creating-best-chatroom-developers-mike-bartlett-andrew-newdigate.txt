Transcription: software developers have been socializing in chat rooms for decades in the 90s we began using IRC and AOL instant messenger in the early 2000s return to Google Hangouts and Yammer today we are using modern apps like slack and hip chat on Today Show we take a deep dive into gitter the chat client specifically designed for developers are guests are Mike Bartlett and Andrew neudigate the creators of getter getter is a highly scalable real-time social application for developers to talk about writing their software this is a great episode that spans topics like front end development back in distributed systems how to compete with slack how to scale a chat room to tens of thousands of active users there is so much here if you're a fan of software engineering daily we want to know how to improve please take 5 minutes to fill out our listener survey there is a link to the survey in our new
Slater and on our website we would love to know what you think what you want to hear more of and equally important what do you want to hear it less of we read all of the feedback we get so please fill out the survey and help us build the best software podcast for you after a quick word from our sponsor we will get to this episode of software engineering daily
 your company has important projects that need to get done the IOS app needs to be Rewritten for Android the database needs to be migrated your continuous deployment system needs to be built the website need to complete redesign but you don't have enough software engineers and designers to get all this work done top towel is here to save you talk give you exclusive access to the top 3% of freelance Talent software engineers and designers from python to PHP top tail has the freelance Talent you need to get your project finished on time with top quality in the past we had to worry about flaky Freelancers with poor communication skills unreliable internet connections subpar technical skills show on top tile screens for these kinds of things and only works with seasoned professionals with tremendous problem solving skills personality and drive
 here's how it works top towels internal team of senior Engineers will work with you to understand your project scope and your talent needs and they will custom match you with just a few hand-picked candidates this means that whenever you need to add top-shelf talent for a critical project you can be connected with pre-screened Engineers were hand-picked for your needs and the results are impressive top top clients conduct just 1.7 interviews for every higher they make all you need is to come ready with some decent technical specifications of your project and top towels team of Engineers will take care of you from there if you are looking to add critical Talent fast and you need a source you can trust go to top tell.com se. You can also send me an email directly at software engineering daily at gmail.com and I will personally introduce you to the team at top towel so that you can learn more
 we live in unique times the nature of work is changing and more and more industry-leading companies from Airbnb to JPMorgan are realizing the benefits of scaling quick and staying flexible by working with Elite Freelancers so if you're short on resources for your projects check out top tile.com SE daily thanks to top tile for sponsoring the show now let's get on with this episode
 Mike Bartlett and Andrew neudigate are the creators of get her a chat client for developers Mike and Andrew welcome to software engineering daily is a network for developer communities to come and hang out and see if that's okay and if you go to the website I think it still says like a chat client for GitHub so it has that branding changing you no longer like a specific news no longer specifically Associated is related to get Hub it's specifically School built on top of get hurt you need to get out of identity to participate but we allowed people to create personalized the rooms or communities that doesn't necessarily need some apps directly to repository when
 first launch we created this just did simple way to take any repository on GitHub one click create a chat room and start talking with people and now you can kind of I guess Taylor you all your channels and what the topics on it doesn't have to Matt directly to a repo okay so this is basically like the identity platform with the most developers perhaps was the rationale a prior to get her what did people at collaborating on GitHub or just programmers in general what did they use to communicate about open source projects
 well obviously the number one suicide people use was Lassie and free node and a lot of people still to use that but obviously with I see there's a lot of clients and there's a certain amounts of complexity and setting that up and I'm getting involved enough to people just have a quick question and they don't have a ton of I see clients and so are we taking a lot of that you're a lot of people have just wanted it very quick repair that the old man that they want to set up and help them with that just to elaborate on that I obviously the technology born before the age of plowed in before the age of mobile and you know Sandra said you could have connected with a client at the time or the conversation never happened and so you know which would get ahold of the conversation is publicly available you don't even need to
 I need to see it it's stored forever it's indexed by Google it's such a bowl if you're on mobile you get push notifications when when stuff happens we both like a whole bunch of develop eccentric features we thought it wouldn't people were talking about code and you pay some code in well why doesn't that code look like how the code looks like in my hand so we you notice the text I lights and process or the or the text so people couldn't do that kind of stuff will they can embed code Snippets or like they can actually in bed and I will execute sand people can can see them so it we were Richmond vitamins I guess and what we feel is a slightly more modern approach to do to messaging
 it seems like there was a really really long time where IRC was still used as the de facto technologist communication tool for programming and yet it seems like this strange Antiquated thing like why are people still using iirc but it said it was so popular and so prevalent for so long
 now it does finally like a whole rash of technologies that are replacing IRC why did it take so long that's a good question I was convinced that people were necessary focused on this problem space I think if we look at our technology is tended to evolve that you'll get all these bright shining lights the people just flock to words and try to create solutions for a lot of that was funny in the the the social space in in the community consumers pay you know the whole soetomo with social location mobile yo someone better on a
 messaging outside of the consumer space in the in the business space and an Enterprise products in nose just a given much attention to and now it's obviously seeing a lot of attention and there's any tools you can use in Indian somewhere that's good but in some ways it's bad because his I guess what a fragmentation going on and maybe you've got like 9 messaging apps now on every day but I love you maybe C'est La Vie indeed so I'd love to get some more of the story like how you got compelled to start working on Gator
 I didn't get it was almost as if you have pivots and we started initially working on another product called troop and Troop was effectively abroad purpose messaging platform for for businesses before doing the setting I'd seen the rise of messaging in the took me in the consumer space and I've seen a lot of people using Skype for business purposes and the tools have a built for that to the execution was I guess that you know not no ideal for specific and night I wanted to do this for a while and Sandra and I got together and we started building off this this this too cold trip and write some funding for that and then pretty much half way through building
 Zac came out and it was exactly what we were trying to build and we looked at what we had a couple of differences with what we didn't want snack did and one of them was we had a a single open network so rather than these kind of silos of teens anyone could effectively talk to anyone and secondly is we we had these links that you could just stay with anyone and they could cook them in the adjoining to be talking and you know we had this week or like one-click chat and when we looked at those assets in something that was more open than team collaboration and software developers are cells weeks it'll turn into to looking at Community into building on top of GitHub gave us a massive advantage in and helping Stampy like that
 cuz it was the home of any open source projects or the home of old developing communities kind of existed inside get up early
 so slack is obviously the messaging elephant in the room but you know there's been a lot of discussion about the importance of the growing importance of messaging the the the phrase that I really like is Benedict Evans from Andreessen Horowitz he says messaging is the medium so it's more like you know I don't know is if you want to think about the space and in terms of how expansive it could potentially be it's just like you know it's a medium so there's plenty of different ways to slice it and in terms of like the interesting technological discussions that we could have especially around comparing get her to slack I think the notion of having a completely open rooms brings into some really interesting scalability discussions so let me just ask you a front like what is tell me about a crazy scalability
 problem that you've had you know I've heard we had to Quincy Larson from free code camp on the show and he was talking about how slack essentially could not scale to the size of rooms that that they wanted and so they switched to get her and I don't know I'm curious if if that's actually a really tough scalability problem I'm guessing it is or if it was like slack is built to not be able to scale beyond that and that's a feature rather than a bug
 so we pretty much a lot of our optimization that we've done around up product has been results of Quincy in the free code Camp rooms so we fit a lot of problems because of the size of their rooms and we can manage to get on top of all of them so just getting back to it Mike said about treat wood reboot treat we we never really envisioned a room with more than a hundred people yeah we thought we would be enough and then obviously we started building kits and you know we ended up with rooms with 20 30 40 thousand people in them and say anywhere in the code where it was sort of a man in squid's complexity problem in the college something you never notice when they were a hundred uses in a room or the side and when you got 40 thousand years in the room that becomes like a serious problem so we had to spend a lot of time profile and finding hotspots that you know you don't necessarily
 in a test room where you can load it up on your test uses but you do find when you're forty thousand has she is in that room it's around that is a lot that you had to do to fix that can stream on that setting and run things asynchronously you know cross mobile service so yeah they have dealt with a lot of things change the way that we even just or dates are in the architecture behind how we store it anytime you like that and you want to listen to all the members in the room and
 you know that was stored in I guess a single manga documents and every time that people will load in that room in requesting that resource you were going and putting like hundreds of K it's not me lyrics of just a can use the people in in this room right now out of the query and so you may we change some of the data structure be we changed some of the ways in which you load that because probably don't need to know about all of those people up front and you know this I guess a lot of both design decisions and Technology decisions that you need to make in parallel to be able to Kate's for communities that big
 okay so in order to have a more granular discussion about the scalability stuff could you give me an idea of what the front-end and back-end looks like so pretty much all the copyrights is Javascript on the Civil be running the Jas and then we we we share a lot of the card between the clients in the server and the client is is built on top of a pack and Marinette chairs back on and use a bio for a real time so we started to put the signpost A and then we ran out info for very long time and it just got better and further away from the original Library so we actually move to pass out I cancel spy you like me now Retreat published School Holly and it just it's just kind of most suited to the problems that we was seeing and I'm so what we needed out of out of it by you clients it's just a particle that it should have
 like a standard protocol for across the network so there's plans for Java and and iOS and you know that's what we really liked about it we could we could find a client with the Shelf full full comedy so it's like a the name of the Bayeux Tapestry it's basically like a protocol for doing like longboarding and websockets and sending messages between a client and server phase is kind of the most common with the most popular by you and I breathe out their website good and obviously we have
 thousands and thousands of people connected simultaneously and we need to just read messages out to them whether it's chat messages whether it's presents updates when people come in line and I get this is one of the areas where Andrews Spence huge amounts of time in other members of the team as well does optimizing are real-time stock because on the surface it's pretty simple to create something that sends a message from a laptop to a server to another laptop and you can probably go to any Auto Center real-time developer but there's a lot of issues a at scale dealing with that and be deal with the fact that you know there's some way there's a connection just dialing around and maybe the server thinks it's still open and there's a lot of space type of engineering
 make sure that it works as smoothly as possible and people are connected as often as possible without being disconnected we found some really nasty websocket bags when running behind the album strange bugs until it's pretty cold after an ELP that was just causing Chrome to to behave ready strangely at those kind of problems with you you know when you have something in 5 minutes get ready well but then off keeping you doing it for a few months if you pick up on a lot of really strange problems yeah this is It's always interesting when you can push the the limits of these of these Stacks that they haven't been pushed before I like if you can
 push Amazon in ways that you're discovering new bugs that certainly says something about the level of throughput that you're dealing with so I'm curious if there are subjective decisions that you have to make so like you know for example of your trading off between consistency and availability you know when you know if somebody closes their laptop and you know you're not sure whether you want to register a message in a certain situation maybe you could give me an idea of whether there are subjective decisions for how to how to deal with these scalability in distributed systems problems or if it's if it's less subjective if it's more like you can really come to a consensus easily one example is the way that we stole and relax him so I can see every user user is in we keep track of
 what they read and what they haven't read and so what would happen is is what does happen is if you're in the room with 40,000 people someone sends a message and that gets distributed to hold 40,000 people and then within the next few minutes some of those people will I read that message I know the market is red and so this is mass of SO2 in the database between unread messages being created in those messages being mocked is red and you can imagine it's really high transaction Devil's it keeps if you got one room with 40,000 people and instead of scaled at the cross you know many thousands of room sets it's a it's a it's a real scalability problem and so in that case we've kind of elected to go with us and we keep everything in red is Salva see that we don't have the same setup assistance that will get you know. Data base for example but would never be able to get that sort of scale for a database
 and so we keep everything in Readiness and we run lots of replicas and we done persisted this very often just because we find that we would have to have ridiculously Foster sixties and touch wood so far we haven't lost any of those messages because you keep a lot of we keep a lot of copies of the day it's a lot of rep replicas of later and we use sentinel to switch between renaissance's and manage that process but that's an example of where we had to go with you know performance of assistance in now in a data you know I guess since I took more than a hundred unread messages will just start tracking them and say rides like you got a lot to catch up on and we want to keep track on the run on an individual level that's the threshold of that seems reasonable
 the new infrastructure because you don't having to track as many across the whole network
 we decide how often does Snapshot your messages for replication from the what between the service between decline to the service I would it whichever is interesting so I mean with the Bayou with shade on the server people will basically either do websocket so long holding a window using long-polling they'll be about 500 many seconds that will wait for messages to cure before we send them to the client and when we using Atomic nervous that long might it might be 300 and then on when when the connection through websocket we are busy streaming does the messages instantaneously so as soon as soon as a message for the client we send it through to them and that's ready just a matter of cheating and spending a lot of time you know testing seeing you know what the best before
 plants versus the side performance websockets but there's always going to be a certain number of people who have got a bad connection so ready 30 inch brass proxies that are messing with that with websockets so you know they the ones I guess Promises by which we can configure some of these you know like the back off so we can I access all of these things and Sandra said it's being I guess I would have tried an area where will find shoe name and one of the things that we do quite heavily as we instrument the application in what it detailed ways all of the dates are enzymes affect timings and who's connected and you know how the service of Performing and everything is all getting sent back
 biostats D to date of dog and we put these pretty big dashboards and like lots of dashboards in datadog and weaken your test tomorrow we can test parameters on a subset of uses and have a look at how they performing and you're really be quite data-centric about how we do these types of things you know we can see very visibly when you make a a change how it actually will trickle down right the way through the system B we made the switch over between How We Do promises inside inside JavaScript from cute to Bluebird and on the subset of users on the subset of service sucks that we tested it also and we kind of immediately Soul memory usage on the memory pressure on application dropping by like
 I need it immediately went out okay right this is a good thing and we need to continue to do this in the card we need to continue to talk to other people so we make technology decisions and you can park decisions as well
 Engineers love Automation and well front automate your investing as a software engineer at there are certain processes do you want to execute no matter what like integration tests during a build you wouldn't execute integration tests manually you would use a continuous integration tool like code ship or Jenkins to automate your integration tests is a tool to automate investing just like a continuous integration tool runs your test automatically wealthfront can reinvest your dividends automatically and performance tax-loss harvesting automatically to get your first $15,000 managed by wealthfront for free go to wealthfront.com se daily and get started with wealthfront Slayer of automation on top of your portfolio wealthfront.com SE daily check it out it would support software engineering daily and you will get $15,000 in managed for free if you sign up
 automate your investing get back to the things that you can't on me like writing code
 show me about the clients that you built so you know people might look at Gator and say okay these guys have built a desktop app on Android app and IOS app it works in the browser how are they doing all this they say they do it all in JavaScript how do you convert JavaScript to to these different platforms is is web-based and we shipped basics of java script that runs inside the inside of with you but the left menu for example is is native and they are the safest is an HF but the check itself is is the wave is is Javascript and we actually that actually comes out of a man card base the same as that gets used to compile
 webcrims and we just use a different configuration two basic people that are named whenever we ship a new job a new iOS Android release we build a new version of that and that allows us to to kind of manager released from plants at the same time I'm the api-api as well which is public and we have two different desktop clients that so we have a lot of you have a very wide surface area and most of that was built when they were four of us in the team I'm so it's really important for us to be able to leverage a smoker pass and deployed to lots of different places and white package has been ready fantastic with that we also used to before we packages require Jazz buds ready once we go once we switched over to you too
 things became a lot easier. Basically gets compiled into different bundles for different environments that ready helps us move
 you have a chat app running in a web view does it feel like a highly responsive like fantastic experience that you would expect from a fully native app is that when we started building and I especially when you started building the troops IOS app many years ago like 3 years ago it ready faults pretty slow on a on an iPhone 3s and we did a lot to optimize around that and we we ready chopped out a lot of a lot of peaches just to kind of improve the speed recently we upgraded to the attitude WK with you which is the new iOS with you and that does jet compiling so it's the first time that you've been able to use chip compiling inside a custom application with with you and the speed difference is absolutely phenomenal
 and it's enabled us to get rid of the Lost remains of a Qdoba and and those kind of products does ready to talk between the the with you and the and the native card now so that's that's Redi-Med huge difference and I think now especially with them okay with you things are starting to feel pretty Snappy and muslo with you on an iPhone 4S still feels pretty slow but luckily we don't have too many uses on iPhone 4S is anymore we've lost it did it purely from Wheel resource-constrained right there were 4 people and we couldn't have like stuff and I'm trying to figure out if if if I would do it again and took me if your constrained in a small team and you're building something that has to be
 iOS Android desktop then I think it's a very good idea to do it if you just building something that's that's mobile first then maybe you want to go full night too if it's a very much my box application right we help people like talk about code and share code better and you know that's much more appropriate on on the desktop when we see you know the much smaller amounts of you some more about and maybe we're a little bit unique in that too I guess you the most consumed attack but even in the sense of being resource-constrained at four people I mean Facebook has been developing react-native essentially because they are doing the work in 3 places like over and over and over and over again they find themselves you know split up into Android iOS and web teams and they're not
 does constrain certainly but you know working in these terrible silos creates tons of problems so I mean with that in mind like you have you considered react-native he looked at that much we suddenly have and you know one of the things with react native is that your build any kind of custom components you still need to be building in NC what do Swift European just use the off-the-shelf Apple components fine or if you're just controlling some kind of application logic that's fine but I think if you if you wanting to build something that's of exceptional user interface quality you still going to need to go and you're investing in night in native code
 I'm at suddenly I can imagine from Full for Facebook even support someone at Facebook scale that is a lot of common code that's kind of application logic that's not necessary in the URL using something like react-native would be a very good idea to use
 there's a tweet from the Get Ur account on Twitter and it says that the native apps for tablet and mobile are not full native as we've discussed it also says quote never go full native I found this really interesting cuz I was like Wow literally never I'd like that a strong statement was that was that like I was a hyperbole or like just a Tropic Thunder reference joke more than anything else we just stay signs and go take a cell's overly seriously at all times they like to be too short for that so that's that's right away that was Robin X all I wrote that sweet by the way but I think there's a huge amount of time later than creating a beautiful Faust incredibly responsive experience
 is worth it for full of company like I cells I think we put a lot of value out of the hybrid approach
 tell me about building search on a product like getter
 so we use elasticsearch and at the moment we are stuck on elasticsearch 1. X and because we use a technology called a river plugging which should be deprecated and has been removed from elasticsearch to basically what that does is it runs inside elasticsearch in connect to Mongo which is a main back in and basically streams data out of Munger transforms it and puts it in elasticsearch answer that's a technology that we looking to get rid of pretty soon so we can approach S6 Edge to be happy with with elasticsearch we've got like a whole bunch of different analyzes for different languages you know we've got a whole bunch of Asian languages and it's really killing witches and some West languages as well so we try to serve pause chats in the in the native language that they were
 so we we did some language recognition and try to figure out where the person speaking Russian or Chinese or English and then when we put it into elasticsearch we were able to actually search using the native language of that chapter sense it we all search at the moment is is not across the whole side's attorney when you're in a particular room and that's obviously something we'd really like to do to prevent a lot of big plans around that invested in north in Search and I think I'll search consistently I think it's like V1 search right now and it's going back to the web socket analogy is you can build something pretty good pretty quickly with elastic and if you really want to get Brilliance at search like whip related websockets you go to invest a lot more time
 we want to do and towards the back off of this year already look to start improving such as we we going to be coming up with with with another capability in a in a few months that will add additional types of ways of communicating on on get her and in particular in creating more store content because one of the things that said that the checks not great at is search in general rights this you know there's no sir the question and answer you might find the answer to Something in amongst the whole picture of behold likes pictures of cats right and so which one is so interesting ways are cells that will make such a lot more important so it's something that we ready hope to improve on ourselves and to actually dedicate some more resource to because it is also a specialist type of subject
 it's not something that you can build the world's best search by by spending a few days with elastic search but it still has its warts I think searches is such a interesting hard problem and like search search in a chat room is not a very well-defined well explored problem so like best practices are not necessarily intuitive what users want or is not intuitive quite yet we're still early
 I'd love to talk about Integrations because you get her has lots of integration with things like Trello and Heroku and Jenkins bitbucket what are the challenges around having all these Integrations one of the decisions we made was to completely open-source that part of the application and so anyone can basically take off Services SDK on GitHub for kids building you integration with something send us a pull request and will put it back into the system and everyone benefits from from that work which is we think my cool I guess not spend two huge amount of time or sell
 building all of these Integrations and so that was beginning to go back to our resource I guess quite a good decision to do it that way and we we left it up to the community and with the API as well people able to integrate in another interesting ways I Free People of which we both know we don't have a Windows Phone app add someone else's Bill to Windows Phone app using alright the eyes and it's not somewhere where we have to go around making sure your documentation is great making sure your AP eyes are great and consistent and it's another area where I think we should be brutally honest with us we need to get a bit better at because I think we've got that quite a few ways that you can do things with the application and maybe we haven't published enough so the best practices
 accredited not content to help people build Integrations and great whites
 can you tell me some about building an effective API that developers want to use where they are actually compelled to write their own to gratian's because the API just makes it so easy
 well they try that we publishes is is the APR that we use us also so you know this one or two small lamp points that are out that are private but pretty much the getaway plan Jesus the Same API as as the one that we published That's Mike said probably its biggest failing is is actually documentation and and examples and best practices and in that respect I think we could do a lot to improve having said that people have built amazing things with that there's a lot of different parts that people go to the clients with different platforms and lots of really interesting projects that people have done with it develop in the way that's like product people think about consumers and it's that first time experience all of your API needs to be ridiculously simple we're beautiful
 I'm getting you log in and will give you all of the like example code will have cold ain't that you can basically even Justin HTP kind of think that you can copy and paste it into your browser you get results immediate on the API documentation and you have to get this and install that and going to generate and immediately in like one two clicks you got their attention I don't want to go look somewhere else for something easier so I think that's a number one really important site making sure your documentation and you're examples and that kind of stuff is really easy and
 is it all today and I like annoys me that we don't which is like stuff that you can use if you want to flip on Google image search I find like these low-res fuzzy versions like three versions of our logo logo with two different making sure that you like Street developers as like First. Citizens and make stuff easy for them as much as possible is really important to be hurt by that is why I like him one of my IP eyes for fishing historical messages they said of a right way and a wrong way to do it the right way to do it is like okay I thought the last hundred messages now give me the messages the next hundred messages before this ID and that's just the way that we like people to use it the wrong way to do it just to say
 give me a hundred messages I cannot skip a hundred messages and give me the next hundred and I'll skip the other messages but then if you give me like a million messages from the store while give me the next hundred messages skipping the first minion that will absolutely kill a mongodb service but if you just you just blinds right you don't have any idea that that's going to cut off service so we will just see CPU stand up and up and up of the day I will start investigating will find out someone's reaching this client that's just going back and fixing more mole and that's not their fault it's our fault for not saying please don't use that you can skip before you need to start using that IPI but you know that was all unfolds cuz we didn't make it kids people that this API is suboptimal
 so historically you through the 90s in the 2000 when people heard the word integration I think it just filled the entire room with Dread you think about Integrations back in the day this sounds terrible but now you know Integrations are everywhere and they're almost expect it you know if my mail client would wouldn't be able to integrate with Dropbox I would never use it so integration to become the norm and this is like just increasing how did this happen why maybe on the on the other end you know maybe not I obviously I can get hers and what makes it easy is the is exposing API what makes it so easy in terms of the entire ecosystem would you say a normal serving back to the early night or late nineties and I was like well you know we going to have this
 file and you can generate a client's and everything was very heavy weights and and you know people would like to publish the right the eyes is as he's big you email documents and I think the number one change is really being like the simplification and how lightweight 78 piazzano United States it's Jason over HTTP s and you know that that's completely confusing and you generate these horrible clients in Java that already difficult to use and I think just having like those lightweight api's has made such a big difference like you know these days we'll look at integration with the with the product and the guys are so simple and so easy to use 15 years ago 10 years ago
 that wasn't the case and you had all these really nice tip eyes with different xml-namespaces and I think that's made a huge difference
 that makes sense so I'm really curious about Focus because you guys are working on a lot of things at once in this product and there's a lot to keep in your head how do you identify what needs to be focused on what I think this is easy tractor many times you can fold into quite easily one is just playing this kind of listen to all the feedback and fix the axe and you know keep going and that's that is supposedly important but I think Equity internally you've got a whole bunch of stuff that you need to do just around internal code quality and making sure that all your service operating nicely and then also you might have these much larger
 to strategic capabilities that you want to build into the application or you no answering the question differently when all of your uses are asking for Faster Horses and actually you know you working on this car in the background is balance in Spanish these things in and around you no different but I guess we could call it so I get this to the five Dimensions with balance roadmap and like one is quality and I like to this that one first because if you don't have quality from the beginning you're going to run into problems and then you know secondly is Delight so making sure that you're always putting stuff into the product that the lights to use as whether it be something that they requested
 so animation strategic initiatives and then growth initiatives and then engagement initiatives and if you can almost imagine visualizing and try to measure for example you can tag your bugs and get up with these things Tigers using in and get up and if you do like a little bit of analysis when you get up his shoes and you making sure that okay well when we close last month we closed a hundred issues or tickets or whatever you want to call in a balanced across those kind of things or we actually be spending all of this mess up I'm over here just doing the lights and guess what qualities starting to slide in I think it's a little bit sometimes you get into the strap where in football
 analogy way if you watch a whole bunch of should have six year olds playing football and there's like 20 to get into that kind of motive working where you always chasing the the issue to Shore and try to get into this world we're okay we try and balance this of a quarter or a month where you know you start to look like a little bit more like a professional football team where this structure going through out the pitch and you know that just comes from making sure that every every Sprint or every couple of weeks you just reviewing what you've done making sure you know what's happening coming forward and making sure you're not getting pulled in all the directions and the other top thing about it is just saying no to unlocks I mean we must have you know hundreds and hundreds of feature request that I think
 infinite resource and we didn't compromise on the design of the product I'd love to do them all but we we just conference focus on the ones that give us the best of time
 how fast is Gator growing
 as a company like 300,000 people on Wonka and last year at the store last week I guess sex on you know the number of people on an FYI can I message volume five or six Production Services at the start of lost ya and now we've got like 20 25 30 instances across multiple availability zones have an internally as a team I guess we've just more than doubled in size there were 4 of us at the start of lost yet they're all 9 of us now
 so I guess if you look at the team and we increase the other metrics by like 5 or 6 times maybe we're doing something lights
 do you think you are like mazes shot that sounds like a dumb question but do you think you can is there a point where you get past the scalability problems and you just say okay we've got to the point and there's no difference between 300,000 users and 1.5 million users and the scalability problems are all salt from there or are there or is it just like a linear in their scale goalie problems along the entire way I think this certain points that you have to let you need to get over so we we've got to pinch a clean one of them at the moment which is how do we kind of get out websockets infrastructure and I real-time infrastructure to sort of scale infinitely and we've kind of been looking at ways to do that and we've actually come up with a nice an eye solution to that problem and they want to River that the next big one will be scheduling a monger
 and then I think all three Thunder is to everything will be I can't imagine what the next one is there will be another one but said send me those two big big turtles that you need to get over another one was like the free code Camp 50,000 people in a room issue but you know the technology that we use ready help us luck with that back we use radius and redis cluster out something we going to move towards and mongodb has kind of
 as we've needed new things from the product that luckily added new features that already helped us a lot
 but yeah I think I think hopefully once we've got once we're able to scale like the number of connected people on web socket set of infinitely then that'll be a big step towards just being able to order scale everything on on on Amazon at each color of order of magnitude of friction point where you going to have to change the architecture of something considerably in order to take it to the next one and obviously the later on that that happens and there's always get get larger and maybe the technology can problems become more complex but a little bit more time and also track recording experience of solving these problems even without sockets
 spirit store a cut it's like single point of failure in that in some ways and then but the pressure on that's going to be a deviated for a long time and then maybe in two or three years you going to have to return to it and do something slightly different based on how you seen people using the product better to GitHub recently that outline this list of desired features and the letter was signed by a bunch of major contributors to the open source community and then get Hub responded with an open apology and a promise to fix things that are on the way so I'm curious if you guys have any thoughts on the situation you're willing to share and how that impacts your thinking about a product that is spiritually somewhat similar to get hub
 that's a great question I think
 would wish we had a good relationship with GitHub from the beginning and you know we've never wanted to make sure that we were sipping on that times that's how I was and I seen this in you know the previous lives where he often happens that consumers of ati's get swallowed up by the producer of the API because that's never a business that they said they wanted to go in and so we make sure that we the week we established a good relationship with them early on and I think they took me to get it and they understand it and you know I think they went through. Where they were very focused on the Enterprise side of that business which we've seen from the from the product offerings and when the community talks loud, they were quick to pretty much said rights were aware of this and what will figure this out we think we can what we do brings a lot of value to the whole
 get up ecosystem and we were very focused on the community aspects of that and because GitHub have amazing idea wise and you know it in a credible based products with Incredible community and wealth of consent in Arkansas stuff for that we feel that we can just help make that Community message a lot better and you'll continue to work with that and to be able to do so and I'm really excited that they should have recognized this and I don't know exactly what they're going to do to fix it but you know when we know it's something that they feel that it's where they came from in the first place and I'm sure it's going to be something that they'll continue investing
 so the elephant in the room that we haven't discussed too much is kind of a comparison to slack I think so I'd love to get a I know we just too much on this earlier but how do you see Gator relative to slack both in the present and evolving into the future for me the fundamental difference with us and slack is what what we will put the purpose of the product exist for and show people use us for private messaging like in a competitive way to slap but it's not what we build for it's not what we best stats and people use slack for community and you know what something like slack in but it's again it's moderation capabilities don't really exist in that kind of environment was built in an environment where everyone in the in the in the team is part of
 company and you just kind of you know that's very different from okay well someone says just left the company so go to IIT and like removing from the room where when you put a community this 24/7 in the IT guy sleeping you know how can you control those types of behaviors will get people to like report abuse and so I think we will see a lot more of our road map coming out being much more focused on how communities work this is how we not spending a massive amount of time and proving that because I'm not necessarily heavily utilized by communities Community is more about the people and it's more about the contents and the discussions and it's about what you can plug it into a soccer cleat that's where it's going we don't we do things like just Discovery and we help people okay you participate in this kind of community Hero 5
 six other communities didn't even know existed that might be interesting for for you two to work it until we put a directory that you can browse and you can search and we suggest rooms to people and you like 15% of people joining communities come by to stop at me and that doesn't you don't even exist in in a slack well to be quite frankly it probably shouldn't their businesses to focus on pulling an amazing team communication products and discovering discoverability of another Community is probably not really appropriate for making a better team communication the way like moisture products look alike and kind of feel the same like that. But it's awful cold difference is the we feel around community and around openness that make up product more appropriate for that and I think the fact that you can you slap for this and yet
 3 week we sign up more uses than we did the week before and that continues to grow is just evidence that would doing something right and smacks probably even helping describe the awareness of how you can talk you can chat and different ways and then people are coming twice because they understand that it was built for communities first lot of sense so how much of the growth of glitter and I just chat applications in general
 how much of this is due to the increasing desire of development teams to work in a distributed fashion
 I mean in the private team slack space absolutely and our team is distributed we have for 9 people in like 6 different countries or something like that and I think that's definitely affecting teens work what that means is I think it starts to affect communities work as well because previously it seems pretty simple you had ordered community in London or San Francisco and you can have your meetups in your service like 89% of the community in that way and so now we seeing startup hubs happening all over Europe all over the world and involved in like start a pubs in in in Africa right schools in Africa who are using a gator for for that communities and you know what are the sudden you actually need to have those communities and give them tools to
 Pokemon stem cells but then connect with the global Community as well and that's one of the advantages with with having an open network like us where anyone can effectively talk to anyone you know you you're getting you getting benefit out of that but you know I think Stephanie business way we wanted people to be able to work from from anywhere and I was thinking how this famous for its and you know it as well and like this is this is how we can work this is for me the future especially is all kind of work lives of encroached into our personal lies ever since you have the Blackberry came out basically and you could start getting your work emails at the dinner table and you don't know I kind of muffin joke that you'll basically take a conference call at home
 and you'll do your shopping online from the office and get it delivered there and the roads are completely reversed between the workplace and between home and as long as technology can empower the best in people can how to push back a little bit spend X spend more time with that family but have to have massive long commutes you're one of our guys in Oakley wanted to move back positive it's family in Italy just had a baby on the way and with the company he was looking for that didn't have that policy where you could work remotely I know you could work a monkey for us and you still have I guess a great job and be involved in good technology but living in rural Tuscany which I think is awesome
 does it have to do I mean because I know Sam augment the Y combinator president is he's been pretty outspoken about kind of being Auntie distributed teams it seems so strange to me but my guess is that his his position is going to change in the near future cuz it just seems to be if there's something in the air and people are moving towards increasingly distributed teams
 it is it is it about the the newer technology tools the improved technology tools like theater and slack did they impose more accountability or more measurability or what is it about the newer technologies that make working in distributed teams easier
 why isn't one thing technology does is it kind of
 that's the solution to distance rides and the fact that you don't wear sitting here I mean it pretty much looks like you're in the room with us over Skype right and you're in the past even if you go back to you know to send a letter to each other that might have taken 3 months and that's no way to to collaborate to load a lot of scientific discovery Island and so I think it's less about like maybe accountability and responsibility and it's about you know the number one thing that helps any teams exceed what do you put them in the same room with you put them at the opposite ends of the Earth is communication rights like this is nothing more effective for a team 2
 feels great products than benefits of communication in if you've got these multiple modes of communication where like it's email or where it's video calling or whether it's messaging or whether it's like a credible the real time or where the red screen sharing or Envision or like all of these amazing tools have helped make the distance parts of remote working pretty irrelevant and made it real time and made it to the operative so that we can basically continue to have effective communication and for me that's that's what it's about it's about the communication plastic more than anything else I think having like a really driven bunch of people working for you who who ready want to do amazing things and are excited about what they doing and they get up in the morning and go to school today I'm going to be cutting gets her I think that's really really helps people after I need to manage like if if we had a team people that you really had to kind
 ask every 5 minutes hey what you doing in the morning on the phone you must have time I need this like you know any people in the kitchen Channel kind of feeling like this and I think having a team that's driven makes a huge difference to remote working if I cut back to when I was working in finance before where people are kind of just stay well not everyone but some people are there kind of job for life I think remote working would be much harder to get right cuz I know you like when when people work from home ever admit they're beating around the fool you know which side wrong but like everyone's delivering right stuff so yeah I don't even care if they trust and making sure that the T-Mobile buy in to watch
 I think it was a great example when Marissa my joint joining the Yahoo and she crazy this is not the way of the future but you know maybe they were people would be working there for a long time and you all would be under under I guess a lot of pressure and maybe they didn't feel that engaged with with the company and probably having those types of people working from home is not a great use of resources and that's a good point I was making sure that people ready by into what they do otherwise they they they shouldn't be working there too big. I'm so right now there's like chat and there's also the format of like the newsfeed that you see on LinkedIn or Facebook or Cora or whatever
 and I'm curious if you guys see these two types of platforms converging little bit because we spend a lot of time thinking about how we can add more structure to chats and death comes you know from something that's more Colorado stackoverflow ask and weeping the testing out of prototype around this since you know I know I guess we don't have so I had too much for this something that we are going to be building quite soon that will kind of do this so we we've been thinking a lot about it and you like this goes back to what I was saying earlier about it is some stuff that Chad is not really good at one of those things instead of structure and focus and you know it sometimes
 Ashima all the time so I can get those two subjects and this is the thing and I can forward it to the person and this is the thread if you like and Cora's good at it and stack Overflow is good at it and we've been looking at ways to chat Sapphire a real time of fight those things and bring them together so like absolutely yes we see that happening cuz we going to be doing it trying trying to do it but hopefully be well-received I think that's seems to be getting increasingly real-time and okay well that's I think that's a good place to close up on what you guys get back to your work building an actual product rather than me just reporting on stop thank you so much for coming on the show I am a big fan of get her I think it's awesome product and I look forward to seeing what you guys doing future
 thanks so much
