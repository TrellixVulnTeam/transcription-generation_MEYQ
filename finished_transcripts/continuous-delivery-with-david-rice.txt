Transcription: in order to move software updates for big development team to production companies do a variety of things some teams might email files to each other or use FTP or even floppy disks most companies today at least use Version Control Systems like get together with separate servers for development and production when code is ready to move to production a build that is on the development server gets copied over to the production servers and the production servers begin serving real users this process is known as deployment and over the last few decades companies have started deploying more rapidly even continuously leading to faster iterations and better feedback loops between the software development team and the users of the product a particularly effective version of this work flow is known as continuous delivery which is when the deployment speed propagates to the overall organization and you really get good feedback loops
organization and in today's episode we're going to be talking about continuous delivery with David Rice from thoughtworks he joins the show to give a short history of continuous delivery and how it actually looks in practice what are the things that you actually need to put in place to get continuous delivery working and of course what is continuous delivery what is continuous integration what is the twos deployment how do these things differ from one another I hope you enjoy this episode
 are you stuck in Ops on the path to devops discover new possibilities for optimizing developer workflows this November 13th thru 18th in Orlando Florida at the devops East Conference focus on lowering barriers between development and testing and security and operations in support of a rapid iterative development and deployment as an added bonus East is co-located with a child Dev and better software East conferences your one registration automatically gives you access to all three programs learn both foundational knowledge and do methodologies across the development life-cycle to develop skills supercharger knowledge and re-energize your career growth software engineering daily listeners can use code s e daily that's all one word s e daily to receive $200 off their conference registration fee you can learn more a devops East. Tech well, thank stack well for being a spa
 software engineering daily David welcome to South Range in Gaelic I having a beer so today we are going to be talking about continuous delivery we have done some shows about this topic but why don't you start off with what is the definition of continuous delivery is really just doing the work to make it possible to get the changes of any type in your software to from idea to production as fast as possible because the most people it's counterintuitive that if I'm just pushing my changes rapidly a production surely that's going to lead to disaster so continuous delivery is all all the things you put in place specifically at the point of deployment pipeline at the center of it to make sure the two to make it actually more enjoyable safer more reliable way to work
 and that includes not just feature changes but config changes experiments that you want to put into production and any type of system to not too simple systems complex system show when did people start doing containers delivered today we have so many examples in the marketplace of people who are poster companies for continuous delivery there's Amazon at Sea Netflix of course. Work has been talking about continuous delivery for a long time when did people start doing continuous delivery I would love to get kind of the picture for how this topic has evolved over time probably I think the answer to when people started doing it and then when people started talking about it and I'm taking an academic approach to figuring out how to get good at it those are probably two different answers I'm sure they
 companies that were doing this doing things in a continuous delivery style in the 90s or maybe even the 80s for all I know I mean continuous-integration started to be a thing in the late 90s and actually if you look back on original papers on continuous integration particularly the Martin Fowler article which is the defensive article it talks about pushing out installers to make you know self-service key way possible so they're at they're up there are bits in continuous integration was he was this something that people are actually did you were actually doing it for a for certain I mean back at it when we when we originally started talking about continuous integration it wasn't fire up Jenkins in a corner and audit and have a server running your test it was more of it as a way of working and it did you know and then eventually the cert you know the build servers to see I said was did become part of what you did if you were practicing CI and it was expect
 that you know you were generating an installer I'm in this is a 90 so that was he know kind of what people do to the generated in the installer so so there was talk of that NCI and I'm sure people were starting to get to sing realize oh well I can always have my software be Deployable I can always get it into a test environment maybe we should start pushing it into a production environment so I'm I guarantee they were companies that were doing this in the 90s but definitely mm is when people started talking about it more I can most definitely give you an answer from the saltworks perspective which is around 2006 some of our consultants in London percent of the dajjal 2006 it was in the paper called the deployment production line I think that was one of the first instances of people really talking about what are the what are the principles of continuous delivery people probably the younger people in the audience the only company that they work that have had continuous delivery or some
 that resembles continuous delivery but you know or even some companies today I'm sure there are probably are procedures like FTP king or like floppy disk using email as your Version Control history like I Was preparing for the show I listen back to the shop or engineering radio episode interview with jazz humble about to change delivery how she wrote wrote the book on continuous delivery and he was talking about how back in the day he'd work and some company where their delivery strategy basically involved FTP so what were the what were the band aids in people didn't think of them as Band-Aids back in the day but compared to what we have today what were the the janky processes that people are doing in contrast to continuous delivery most people worked
 pattern exactly you got me so I'm tired of working in the tools of it and I was a consultant for a decade if that works and then you know the classic is in a bank for releases a year retails even worse 3 releases year because you know when breakfast for Thanksgiving we freeze for 3 months so we don't lose the ability to make our money that was it was it was Gates it was about sign-offs and Gates and doing working in big patches because it you know obviously sending a bill to overtake you ain't getting their sign off and then all the all the painful cycles of fixies 12 dogs okay now it's still not ready not fix these bugs and then handing it off to an operations team to do performance testing in those sorts of reforms testing team actually out of encounter I'm so strange teams like performance testing teams that would that would exist in other so it was people use Gates as way to approve that it that it that's offer was good enough to that's what people did obviously that's what I was slow and painful very swollen painful out of work
 what is that change because some key technologies have been enabled there's more of just cultural chefs or Confluence of the two I figured the Confluence of the two there certainly much better tooling around automation of infrastructure in a particular one of the big problems back in the day with you know if you want even if you wanted to do CD setting up environment say for you know for Bank 4 Bank Retail Bank setting up an environment where you can actually run all the Middle where in sin either connect to test and the test regions on a Mainframe or ever see me like that it took weeks and a lot of hardware and a lot of money and that's cute a problem because one of the key parts of a really good deployment pipeline this your testers can say I want this build in this environment just push a button and make it happen and then make him go so that right there was one of the big problems
 some specific fundamental technology changes that makes it easier to do for the average can be like a cloud for example I think I think I think of AWS as having a shirt like this latent effect on a lot of things in software development that now we take for granted or maybe they have snuck up on us cuz it kind of happened in indirect way but iCloud seems pretty crucial to getting CD going where they're talking about like how easy it is to spend up replicative environments or or I don't know but you can just that I guess the compounding interest of cloud where you know somebody build a new technology with a W Ashton and somebody else use Leverage is that to build at some other new technology and then we just get a great developer tools as a result of that you're absolutely cloud-to-cloud is crucial and not just you know AWS it's eight of us is influence on what people now expect in their Enterprise data center as well and there's obviously all kinds of
 of new every week there's another cluster manager or something else to make it even easier to to move your ear that you literally moving single-function calls around 8 at flying around a $0.02 figure out the best possible place to run so clearly that's huge and it's not just the fact that I have elastic compute resources it's also all the tooling around saying I want 10 of these to look exactly like that and I want you to bring them up for me and being able to scrape that and automate that is clearly key because if you need a team to build an environment for you or if Hardware it if it's extremely difficult the revision hardware and then you can't paralyze your tests to make your pipeline run faster those sorts of things your pipeline is going to be slow and then you idiot you're going to struggle to get to I'm to the promised land that said while the technology is crucial and probably would have never happened with CD would have never happen without some of these advancements it's the cultural changes that I think are the bigger
 blowing up the silos getting everyone to feel responsible for a single goal in it that cultural change I think is a much bigger deal than the technology changes in terms of y c d has happened and you write about this a lot you write about even finer grind cultural changes then the high-level idea of breaking down silos what you're writing you writing articles about getting CD within a company working you do you write that you need can't really just pick up tools and then just expect everybody to adopt in this delivery is there are a number of cultural process is cultural norms practices that need to be in place first so what are those what are those cultural practices that need to be in place an order for CD to work and I think would probably be the speed everyone believing that is possible because I think that's the standard response to seed
 is oh my gosh I can't possibly work we can't possibly push every change into production so there's there's inherent fear sometimes it's you know sometimes it actually is fear of something going really bad in production other times it's fear of losing power because when you get to sign off on a build and say and bless it for production represents a lot of power and I think some people might be afraid to to let that go and then there's a lack of trust also between QA operations and Deb and I think the devops movement goes a long way towards addressing those issues I think that's a good approach to drive in the cultural changes is if you have some Champion C want to figure out how to bring a devops culture to your company and they are not the same thing if there's a lot in common neither is a subset of the other but in terms of addressing the fear that needs to be eliminated in order to get CD and place taking a look at the devops movement
 is what I would what I would recommend Beyond fear the cultural changes are really it gets into really how your team's work not making not making testing a sign off gear gating an activity developers really believing in self testing code which is primarily writing unit test but really hot different types of automated test it's getting your testers to not be afraid of test automation cuz actually I'll test automation means is your automating the repetitive it's the regression part of your test sweet and you're asking your testers you're telling your TouchWiz hey it's your brain that we value most we want you to do the exploratory testing we want you to think about how the system can break I'm just getting everyone Pastor fears about the devops movement relative to see. I think about
 devops or related topics are with sometimes it is with older companies and there's often times a devops evangelist or like a small team within that larger company that sang hey we need to move in this direction me to break down silos Etc in solving a difficult battle for them to establish these practices in an Enterprise that has things in place the Traditions that make it more slow-moving and now it is as important as ever since every company is becoming a software company really have no choice but to really look at these things and move in the direction of the software industry Unity think it's wrong or you think it's like a debatable to go towards devops you basically should go in that direction because the rest of the industry as in you're not going to able to hire people who have similar mentalities until I'm so I think a lot of people who who are listening to the show who
 who who who are interested in devops are a type of person that is at at that large Enterprise in there like the forward-thinking person Enterprise with some people that have been made it there for 10 or 12 years did have the all these old ancestral practices for that type of person that's listening and they're in the process of trying to revamp the Solar Company how can they begin to Institute practices for CD because CD sounds like his usual every sounds like something it's kind of hard to to get going what are the steps where the small steps to take to start to bootstrap the process and move in the continuous delivery Direction but you go to Champions are going to be I think you're going to need to find someone from QA find someone from operations find someone from development upper management
 upper management absolute it's funny I think I skipped this when I gave him my definition of seedy but one of the things about CD is that the whole point is to have your software in and always Deployable state so that the business can can say we need to deploy now it's that's a big difference from continuous deployment which is every change goes to provide continuous delivery is about giving quote on quote the business the power to deploy when they want want to and really that mean what builds trust more between 90 and in the business than that so yes upper management to I would say I'm so then once you have once you have your champions in place probably identify a team where you want to give it a try Greenfield is always going to be easier than Legacy but at the same time Greenfield might not be the most strategic thing and might not be important and is therefore never really going to get the energy that's going to make anything succeed so I wouldn't I wouldn't say avoid the hard hard stuff you know one of the one of the tenants as if
 Hertz do it as often as possible until the paint until it's not painful so I would say about Legacy but Greenfield certainly easier and you need to do a bit of assessment around rather your technical practices are actually ready for CD do you have everything in Source control seems like a no-brainer these days we still see places where it's not that's not reality are you practicing configuration management and which is a Step Beyond what most people think of putting everything in Source control its can you point to a specific reprovision of your entire production system infrastructure how your firewalls are configured how how your router probably not your most people don't take it to the router Zillow you could but you know maybe your application routers your code everything can you say I want this version in this environment and can you run a script in that happens so
 you need that and then do you just have a culture around automation do you have that in place are there repetitive tasks that humans are still doing if humans are doing them a repetitive task that's really problematic because a it's boring and you're not really utilizing what humans are good at and humans are mistake-prone and it's slow so start start across all those places and then once you're feeling good there then you can take start taking a look at actually instituting deployment Pipeline and really getting to a proper CD implementation around these conversations we also hear the word microservices a lot like these these older companies are often these types of Champions within an older Enterprise are often saying hey we need to move towards microservices this to this is going to let us be more decoupled is going to help us do the devops type of stuff but you know if you have this small team of Champions or
 one single evangelist they aren't you can't do everything so what is the sequencing if they're trying to get towards this organization that has CD and microservices in devops and stuff should be doing all these things that one should they migrate to microservices at the same time as they start implementing CD because I mean there is there is some like you know killing two birds with one stone there right like you know you you you say okay we're going to we're going to do something that's like super low risk like you know the job board we're going to move the job board to a microservice at the same time we're going to go then you've got your Greenfield you know you've you've you've identified your Greenfield and so you can throw it on a continuous continuous delivery Pipeline and and there you go you killed two birds with one stone and then you can show everybody hey I got the job board on continuous delivery it's really easy now you should start moving the add another credit card transaction processing system
 what's the strategy is going to be at depends depends a lot of your people I think in most circumstances trying to implement CD and bring my car services in and you know whatever else that sounds complicated to me I think the litmus test should be do I have the right people is it up sufficient important to the business that will get the resources we need and do I expect to see material change in a 2 to 3 months time frame I I wouldn't necessarily address it as Mi building out of continuous deployment pipeline am I bringing microservices into my company for the first time I've witnessed a look at it from from those perspective it's I think it's more about it is this reasonably important to the company that people care and will I see material change in how we are working in a two to three my time. And do it do I have the right people working on it so you mentioned the relationship between a CD system and version
 troll what what is it what is a relationship look like in more detail and practice you cuz you about trunk base deployment my trunk trunk based development more about what are the version control strategy so I will see you know you get every a get as much your code as possible in in Version Control has a place to start but once you get that like what does your branching strategy look like but you know playing companies have different branching strategies bits and continuous integration then continuous delivery but can I mean continuous integration is a proper subset of continuous delivery so so damn pack CD so one of the tenants of CIA actually buy their original definitions CIA and Trump base development are actually the exact same thing which is everyone is checking into trunk or Mass
 there or had or whatever you happen to call it on a daily basis ideally multiple times a day and there are no longer have branches and your code is self testing IE there are you in a test to validate a change after every merge running a server so by definition if you're not practicing trunk based development if you're not working in master you're not doing CI and obviously lots of teams particularly now that it has won lots of teams have branches and still say they're practicing continuous-integration this is really you have to decide how much you care about the original definition for asses are teams doing good work and getting the job done I struggle with it actually I look at teams with long leaves
 ashes and I know they're not really practicing CI because they have long the branches and you when you have long the branches you don't really know how those changes are going to work with each other you have no way to validate those that the changes in each of the individual branches actually will play well together when they're all in production yet there's clearly a lot of teams doing working that way and working well people who care about c i n c d are now saying short live feature branches are okay because that seems a reasonable way to work locally and then murdered in to master and you know recently recently quickly whether things will work or or not and the reason having those long the branches and not really knowing that those changes are going to work well together the reason that's a problem from a CD perspective is it if you build out a deployment pipeline one of the benefits as you know
 point of a deployment pipeline is actually to figure out why a change shouldn't go to production and you always the whole point of when your building at you to Planet pipeline is designed to fail as fast as possible so that you know as quickly as possible with his fast a feedback loop as possible that something isn't going to work in production and when you have long live ranches there's nothing fast about finding out the sun is broken it actually could take days or weeks or months to find out the stomach broken so it's actually counter to the principles of how you build a deployment pipeline from the ship from long leafy Daddy have a long the future branch that you eventually merge and you figure out how to get going why is that kind of like disjointed with
 continuous delivery are you saying why is it hard to convince people to do practice from police involvement or why is why is he didn't get branches counter to continuous delivery combination of this to think so you know you you mention that there are companies it they're like oh yeah we're doing can he was delivery or we want to be doing and you're still a very and yet the behavior of the developers that they have longer live feature branches so I guess like first of all why is that why that is an anti pattern and then why there are people who continue this despite being told it's Nancy pattern his Rhino Insanity pattern why is it hard for them to to to to to get them to do the trunk based development where they're interacting with the master more aggressive sure so I guess why I think it's an anti pattern is that you're delaying finding out whether your changes work with everyone else is changes and the whole point
 a CD is to find out as early as possible but I shouldn't say the whole point but as I said principle to design your deployment pipeline is finding out as soon as possible that something isn't going to work in prod so that you can fix it because the earlier you fixed you can fix a problem the cheaper it is to fix the faster you can fix it if you have long the future branches you're delaying finding out that something is broken for days weeks months and it's going to be a lot harder to sort out once you find out it's broken so that's why I think Long Live branches are highly problematic if you're trying to implement CD why people don't want to move towards working on master I think everyone's got different reasons and like I said I see people doing good work so I can't necessarily you know I don't want just preach I mostly to them and tell them what they're doing is wrong but I think there's several reasons one as well that's just the way it works right and get is successful and that's the way it works so we should so I should work that
 the other is people just mentally can't even comprehend how a team of twenty doves could all be working in master and not cause problems
 another is one of the core techniques to having everyone check in to master all the time is feature toggles which is basically everything to do with a particular feature is flag on or off so you can actually check in incomplete work into master and it it slack off and then people won't won't won't see it and I think people have had some bad experiences with feature toggles cuz even before they were way they were named feature toggles that the concept has been around and I think most people had an experience where they never get cleaned up in your system as hundreds of Flags driving behavior which is obviously ugly
 but if you're pregnant you're doing feature toggles well actually the most important thing about implementing future toggles is being very discreet about getting rid of them move the conversation implementing CD with this looks like at practice practice it should go there productive CD organization when I think of you deliver I think of it as the pipeline of of stages that a push a code goes through Norwich or change of any type you know if you're talking organizationally maybe you know the design team can also make some change and maybe it's not too sure that coat a code change I'll be able to venture to propagate stuco change but in any case I think of this pipeline of stages that a change has to go through in the pipeline is perhaps partly automated partly manual what are some of the stages of a CD pipeline what are some different
 patterns that people used to building their pipelines so the key pattern is failing fast so you wanted to your unit typical unit test your fastest feedback loop and that's information for the development team if you have a sophisticated to a teammate that they're probably interested in unit Test 2 cuz you know if you have a really solid testing they're willing to put a lot of your regrets and checks down into the unit level cuz they're much faster so typically the first stage is running your unit test sometimes you have to do some compilation beforehand or some packaging before hand before we can actually escape the tests ideally you don't have to that's the first unit test is typically first and then the next day to be on that you might get some longer running tests maybe some end-to-end test maybe some integration tests that take a little longer in the reason you break them into stages is if you have a if there's a problem with just the dev team you don't want to wait for your integration in your functional test
 running if you can get that feedback from the unit test so you just break it into stages and it and it fails faster and I know that sounds obvious but that wasn't how people were working prior to
 prior to Jazz and the farlands in and Chris Reed and Daniel talking about what a deployment pipeline might look like and then beyond your end-to-end test which is really in my opinion you shouldn't just have random into and test it should be identified as a regression Suite in my opinion you shouldn't you shouldn't be doing story level testing with an end-to-end test that should be a regression test then you get into your longer running stages which will be typically be performance testing maybe you have some automated security testing and and performance testing if to know there's a dozen flavors of performance testing whether it's response time for users under load rather would soak testing there's a there's many different flavors those typically take longer so if you're using a good tool you can actually model is called a fan out your pipeline actually goes white on you and you're running all those in parallel and then when they're all green Loaf and back into
 a configuration of your app that's green and and can be deployed into prod whenever you're ready and then is he moved to the right in your pipeline you're likely to get to Emmanuel state it could be multiple manual stages but the last one being you know deploy to prod which according to the pure definition of CDs must be manual cuz the business decides when to deploy in a continuous delivery setting I would be automatic
 are you lost in continuous delivery find Solutions and insights during the tutorials and sessions at devops East this November 13th thru 18th in Orlando Florida Explorer topics like continuous delivery potatoes delivery pipelines containers delivery of microservices using the cloud to enable continuous delivery one of these boxes with honors Walgren who was previously on software engineering daily you could check out that episode if you're interested in hearing more about otters as an added bonus devops East is co-located with a child Dev and better software East conferences so you're one registration automatically gives you access to all three of these programs this means you can choose from over 100 learning and network opportunities you can build a customized week of learning that fits you and your organization's specific needs you to explore this program at devops East duck Tech well. Com
 and you can also get a discount on your conference registration fee with using Code SE daily that's all one word SE daily if you go to the devops east. Tech well. Com website you can get this discount with promo code SE daily you register by October 14th and super early bird deadline for a combined Savings of up to $600 off the conference so check out devops east if you're interested in fixing your continuous delivery pipelines thanks to Tech well for being a sponsor software engineering daily
 well show any Sue's Emanuel approval staged to sell these these prior stages that are not manual basically the build hits the stage automated test run against that build if they all pass and move to the next stage and we get to Immanuel stage then maybe it runs through some integration tests and then you have to click a button to make it go to the next stage or maybe you are told hey at this stage you need to do these manual test and make sure nothing looks out of whack we want some human in the loop picture of the manual manual produced as possible cuz that's still kind of a gate but it's definitely it's okay you're on the journey if your if you got to the point where you have multiple automated-tests stages and it and then you do have a manual test age the right as long as that's not really the same old gate and sign-off process your on the journey is total
 find people do that for sure these tests that occur at different stages who is responsible for writing these tests and how do you you know how is this different than you know we've had we've had many years of of people encouraging like right and right just right test right different kinds of tests like test we had the test test urban development movement what's different now what is different about the types of tests they were riding and the person who is responsible for writing these tests so who's responsible is everyone that's always give you my answer to any question who is responsible to everyone but I mean operations obviously isn't responsible for writing writing writing unit test but I mean traditionally unit test belong to the developers that's does the code work as expected in isolation so not hooked up to other systems not generally not in the end and setting
 but testers can get involved in unit-testing because I mean if someone has written a selenium test that takes forever you know maybe they would be good maybe they've automated 20 edge cases through the UI and that obviously takes forever wouldn't it be better to just test the single UI interaction for an air once and then have all the edge cases you know the full set of 20 inch cases driven down into the unit testing layer and cover it there now that's going to happen if you're going to do it that way and you really want your testers to understand how the full regression works there going to need to get involved in unit test they're going to need to understand what's in unit tests that that's going to start requiring that your tester that some of your testers be more technical testing when you get into your end-to-end testing whether it's selenium or or or something similar and developers have to be involved it's programming and ideally you have testers who are technical enough to be involved and that's not to say your test
 just become automator than programmers you don't want that attached to his job is to figure out how your system can be better just like everyone else on the team and think think creatively about how to break it in order to make it better and do exploratory testing and understand when a new features coming in that the testers generally have best perspective on what the in fat the impact on the rest of the system is going to be so we still need that but the developers intestines need to spend a lot of time together if you're going to have a solid automated aggression sweet it's not it's not show the developers have to do that are all the testers have to do that they really need to be working together and you print out an article that the unit test Suite has to be fast and I agree with this what why it why is it important and if an organization has this barrage of unit test this super slow that takes a really long time
 it is there a straightforward way to speed up that process and should they like spend a bunch of time refactoring their test infrastructure if they have the super slow test process so that's a great question it's a question I still don't have a great answer for I think the most important thing if you're lucky enough to be in a green feel that you have to absolutely be a hardliner about fast unit test you had don't let it get me on a couple minutes at all costs if you're in a situation where you have slow running unit test it's actually very Channel if it if it's a legacy system of size it's actually very challenging to ever get that back down to a couple minutes it's it's almost impossible so you get into a situation where you need to throw Hardware at it and that's not that's not a great situation to be so then maybe you need to start digging into okay is it a monolith do I need to split it up into something smaller so that I can get more something more manageable in again
 actually a real tough situation because if you have to love running you to test it becomes really hard to figure out how to split up your monolith into smaller pieces because you're sitting there waiting for the test to complete every time yeah so most teams tend to throw Hardware at that problem and it is not great because you're free come it involves pushing your changes off somewhere in the cloud are your Datacenter while you're going to test her split across that doesn't machines and then you get your feedback so so maybe throw Hardware at it so you can get fast enough feedback while you're figuring out how to split things up split your monoliths up into smaller chunks where you can then get back to you fast running unit test I see too many teams willing to throw Hardware unit to say I just I can just throw more Hardware I don't need my unit has to be fasted it's just a really painful way to work and you're in your kind of meat do you eat you're losing out most of the benefit of unit tested it one of it if your coding one of the great things about fast
 Texas you can go in and experiment with any change to design architecture or or your model that you want and quickly find out whether it's going to work and you can really explore what you can do to improve your code base and if you have slow running unit test you really lose out on that so another angle that you talk about is this Relentless automation being an aspect of an organization that gets CD right I was a test automation is one thing what are the other fundamental things that we need to automate and what what are the types of perhaps manual I don't know if you want to use that word manual operations that prevent an organization from getting to CD infinite deploying to production
 that is a big one I think that's anyone has been in the industry more than 5 years has probably brought in sleeping bags for the weekend to babysit a deployment that should never happen the database is another place to look many many deployment processes involve a manual stuff for the dva's to step in and migrate data or at 8 or you know what your Ultra tables so that's another another obvious place to look for where you can automate and it's not trivial there's a great book on refactoring databases written by colleague of mine from a satellite so I'll get that is fantastic you really have to change how you think about how you change your database schema and how you migrate data if you want to automate it but those are the two places at
 the most obvious to start I think back to this I work at one company where we would do a lot of Integrations and don't exactly what type of degree say where but the integration for always similar but they weren't but it was hard to think of a way that will show generalizable that you could just write a script around it so a lot of times it was like the process of you know you've got script over here it's going to be over here and you got to run them and some sequins and you know the parameters change depending on which integration you're doing it and it burns I felt at that particular place where I was like you know It's tricky because I don't know how I would automate this in general fashion and yet I am every time we do this Integrations I'm wasting like one or two days doing this kind of like half automated half manual thing and it's I feel feels like such a drain on on the productivity of the organization
 imagine that occurs every where I think that's what I actually think that's one of the harder things to get right there when you have like something that is like somewhat automatable but also somewhat variable from case-to-case and also typically you're depending on third parties having against you know I mean the first the most obvious thing to do isn't it is his get your design patterns right isolate yourself from other people's nonsense and if and if you do have 10 integration that are basically the same thing, but the right after actions on your side so that it doesn't look like 10 different things and then when you talk about you know the design of your deployment pipeline know that's painful slow stuff so it should be further down the line by point about these feedback loops in a container delivery system what are the feedback loops exist in a
 typical continuous delivery pipeline in the reason I think so I think many people think of the difference between CIA and CD is at seed at CI is a build Loop and CD is a linear structure and see clearly is a deployment pipeline I should say is a linear structure in the deployment pipeline clearly as winner linear it's you know it's the visualization is always left to right from a commit to production environment yet along the way are all these little feedback loops in the whole point is you're getting feedback along you know all along the way to tell you that it's not going to work it's not going to work if I can work so unit test their feedback loop integration tests are feedback loop security automated security testing is a feedback loop getting feedback from your users because you can quickly deploy
 to any environment is an important feedback loop once you're really wants you really a CD down it's trivial to get new stuff in front of users before it's in production and get feedback and it doesn't even necessarily have to all be in line in your deployment pipeline the fact that the fact that you are practicing CD and you can push any version of the app to any environment you can then do your user testing different varieties of user-testing offline and it's in and get really good feedback loop and then you know get that get that back to the deaf teen it doesn't all have to be in line in your deployment pipeline the benefits of CD go beyond that and lastly I think something people don't necessarily think about it a lot of people talk about it specifically the company's you mentioned earlier after deployment there's more feedback loops to be had which is monitoring what's going on in fraud
 and that can be important to particularly when you're talking about microservices an explosion of Microsoft versus if there's a point where it's impossible to actually test all about all the combinations where people are doing something like and I've never seen it before I just thought of this but like maybe you do you have a change and you have a stage in your pipeline where the the build you know maybe gets deployed to be a baby it maybe it's a server that's running mock traffic or it's a server that's running 1% of user traffic and you have and basically just put it you just put it into this test bad and then you have the lot you have the Monitor and going and then if you have no anomalies you could have like an automated roll forward
 is it going to rain what is that Canary deployment oh that's okay I took over here about that like that's more of a manual thing yeah that's a good point right I saw you. I made it by say you know
 running your scraping your whatever whatever if you don't Sierra for this. Of time then roll it out I have no idea whether people are automating that but I'm guessing someone thought about it and someone is trying it so I've heard that these super productive organizations like a Netflix or somebody never rolls back at your experience yes I think that roll back I think the term rolling back and rolling forward or losing the relevance. But I mean back in the area of three or four deployments a year that's for rollback is is reality but once you once you have a deployment plan in place and everyone's on board and you can enter you have solid monitoring a production and you can get changes to play fast it's about meantime to recovery who cares if it's rolling forward to Rolling backward or whatever processes you need in place and I was able to talk about database migrations earlier.
 really complicates whether you're going to be rolling forward to Rolling backward it doesn't matter it's what are you doing to lower your meantime to recovery how fast can you recovery when there's production problem and are you learning from it are you conducting the post-mortems and figuring out how you can be better when you do have Dunta of potatoes delivery most of the wall lot of decisions that people making were what do we build type of decisions how are we or how are we deploying our own Jenkins server or something like that how are we rolling around confused delivery pipeline now there is a bunch of stuff you can buy and obviously you are working on your work and thought works and full disclosure Towers to sponsor of this show but you you work on I think you work on go CD and snap CI so it's continuous delivery
 Jason creation software and win-win Lego stock abstractly win-win developers looking at different systems integration systems can use deployment systems for their buying decisions of what are the accys that they should be evaluating when they are trying to find the best thing to take off the shelf in use so if you're really talking about CD and you really want a deployment pipeline you got to make sure that the tool actually provides you the right modeling tools for building a deployment Pipeline and I say that because I'm pretty much any problem with any tools with enough programming but if you if you're going to if you're serious about wanting to do the plumbing pipe lines your life will be much better if you pick a tool that actually provides you first
 border concepts for modeling your pipeline so I'd start there or in the club where you want to work in the cloud because different sets of tools there and obviously there's a lot of space in between which is I'm working in the cloud on AWS but it's basically a private data center so that means you really kind of need a non-friend solution that's friendly to Cloud Technologies versus I mean like Snap CI which is I don't want to own any servers anywhere I'm using a Roku I'm using AWS I'm using get out of that sort of stuff you need something like like Snap next is what are the Technologies I'm using and is the tool compatible with those Technologies some tools like OCD
 can run multiple platforms and and and our work with most any technology some tools are very specific to certain technology Technologies are certain Cloud platforms and so you need to make sure that your status is is reasonably supported now I'm at point I'll point out that if your text back of your CD tool and your text back is a big thing I take a I take a hard look at how you've actually implemented that your your deployment pipeline stages how you're approaching automation you should never be programming your CD server your CI server you should have scripts that to all your Automation in your Source repository that you can run from the command line and most of your bill stages should be just executing those scripts and not everyone sees it that way so technology compatibility shouldn't be a huge issue but it can be particularly if your wedding a lot of your automation into the CIA or the CD server
 hearing aid of our time what is coming down the pike in terms of continuous delivery how are the tools that were using going to change in the near future I think that the tools are just starting to figure out what to do with all of this Cloud technology and when I say cloud technology I mean cluster schedulers I mean doctoring basically you know fast provisioning of an arbitrary amount of Computer Resources anywhere in your ecosystem I think the tools are just starting to figure out what that means to CD so I don't know what I think the next set of problems to be addressed is then what is going to look like yeah yeah makes sense okay well David I want to think we're going to shows in a great conversation and I think the listeners are going to appreciate it a lot
 and I was just thank you for being part of the workers they want their software engineering daily I definitely appreciate that thanks a lot cool thanks I really appreciate you coming I enjoyed Salat okay great
 O'Reilly is hosting bot day a conference in San Francisco on October 19th 2016 that offers the Strategic and tactical inside the you need to start implementing a day I driven conversational interfaces they can talk to your customers make your employees more productive and streamline your business checkout bot day from O'Reilly coming October 19th 2016
