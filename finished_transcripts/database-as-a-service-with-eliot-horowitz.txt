Transcription: 8 years ago mongodb was an internal project at 10 Jen a company that was trying to build a platform as a service out of Open Source components the team at 10 Jen realize that the platform-as-a-service play would be too complex and too difficult to build since mongodb was the most valuable component of that project they narrowed they're focused this new document oriented database and change the name of the company to mongodb in today's episode mongodb CTO Elliott Horowitz describes the history of Mongo DB the open source project as well as the company which recently released a managed cloud service mongodb Atlas Elliott explains how the company has architected the mongodb atlas service on top of AWS and why developers often want a managed Service as their database database servers themselves this is a great episode if you yourself are building a managed cloud service
or if you are thinking about where to host a instance of a database should you host it on the cloud should you host it on a managed cloud service provider there are pros and cons to each of these approaches full disclosure manga DB is a sponsor of software engineering daily I hope you enjoy this episode
 The Insight data engineering program helps software Engineers level up their careers at The Cutting Edge of how we build software involves some of the most interesting open source and distributed Technologies such as Apache spark Kafka and no sequel databases Insight data engineering is free because they partner with top companies like Facebook Uber Capital One and slack you can learn about data engineering at Insight data engineering if you go to Insight data engineering.com SE daily you can apply listeners of this show will be Advanced straight to the coding challenge of the application process if you get accepted you get to learn how to build useful products in a self-directed program there are work spaces in New York and Palo Alto that you can utilize during the short 7-week data engineering training Pro
 just have access to free cloud computing resources and a network of over 600 data engineers and data scientist from over 100 companies in site provides the least support until you find a great day too engineering position at a top company apply now at Insight data engineering.com SE daily skip straight to the coding challenge is a special offer for software engineering daily listeners thanks to Insight data engineering and if you want to level up your career if you want to learn some new skills and change what you were working on in your work environment and perhaps get a job upgrade if you're looking for a different type of job or if you're between Academia and your career path and you want to build a little more skill before you jump on that career path learn about data engineering at Insight data engineering good Insight data engineering.com SE daily to apply and Skip straight to the
 coding Challenge and thanks again to Insight data engineering for being a new sponsor of software engineering daily you also check out the interview I did with Insight data engineering several months ago on software engineering daily let's get back to this episode Elliott Horowitz is the CTO of mongodb Elliott welcome to software engineering daily thanks great to be here so I would like our conversation today to focus on how a database company works and I want to touch on product development the engineering the business model we're talking about mongodb specifically because you are the CTO there but I think there will be lessons in this conversation will be applicable to any kind of infrastructure business certainly to database businesses so in order to build our conversation in that direction I want to start with the customer who in this case
 is it developer so when mongodb started to gain popularity 6 or 7 years ago why did people start using it what were those customers desires sure so really the main motivation for people trying them on the TV in adopting mongodb really came around from developers wanted to be more productive sew-in people look at mongodb developer is a 10 to look at two things one is the date of model are some only be used as documents instead of the relational data model and to is distributed systems components of AMA TV to the Dayton Mall from all of us documents and documents We Believe are a fundamentally fundamentally easier data structures for developers to work with they more naturally soothe the way programming languages can your documents not pretty but the objects they naturally map to the way people think you know no one thinks about him breaking up object into it you know tables the rows and columns what did you think about things that's
 Trish and three documents leaked a lot of efficiency on the Computing side and other big pieces of your systems so you know starting with simple things like I've had availability and then moving on to horizontal scaling and Geographic diversity it's a really those two concepts I was up Rocky put them on VB overall making it much easier to work with data to store data to work with data to query data value out of the day though those are absolutely true and I also think that mongodb gained popularity for similar reasons that ruby-on-rails gained popularity because these that document centricity where you can think about documents more easily means you can build prototypes with it more quickly you can evolve those prototypes more quickly and you could just makes ease-of-use a lot more straightforward I think it's also coincide with a you know where this at the beginning but I felt like there was a growth in
 new developers starting to program around that time where mongodb was getting popular as well also and Ruby on Rails getting a lot of popularity do you think it's an accurate depiction yeah I think that you saw it you know the growth of the you know the internet and web applications the growth of mobile applications which wizard of bringing a whole new breed of software Developers
 cloud computing starting to serve be a real thing was a big deal because it cost of infrastructure was so low you know when the eighties went out paperwork to playing applications or building applications you know the number is Reese's at 75% of the cost went to hardware and software in 25% went to developers and now that's flipped write in a 75 or some of the cost of developers in 25% of hardware and software developers cost-effective and very efficient is incredibly important and the time to Market of features is becoming Paramount and so I think that is where things like mongodb and all the languages you know whether it's Ruby or python are also making it pretty big difference around this time 2009 Air at there were show all these new developers they were joining they were not people that were fluent in Sequel so they were totally open to you know oh this is the way that we do databases like documents and it's just I could it could be tour
 organic for them and they're there lots of podcasts out there that have done comparisons between mongodb and sequel so I don't want to spend too much time on that area but maybe we should spend a little time for people who need a refresher or who are trying to do this explain some of the differences for the programming experience between document-oriented database like mango and the sequel database MySQL the fundamental differences how do you store the data so I know you're storing data and documents so document in Manga look very similar to Jason documents so their structure you can have a raise you can have nested elemancy countries of nested elements so for example if you're storing information about a person and you want to store a list of all of their addresses and previous addresses you would store document with an array call dad versus and you have a list of w list of documents and a document with a view of city state ZIP code of a field like current if you have other feels like that type so I can be like a home or school it was her put whatever you
 call Sarah it's the weather going to look at a person in the database it's just a single document when your map in that to code is a single dictionary or object or whatever sort of the idiom is in your language in a relational database a little different because then you're going to have a table for three or four York or user information and then a separate table for every address and then what you have to do is Ruth join those two tables together and for two tables it's not so bad but for a typical user profile to take application it's not two tables it's dozens of tables and that's what they can start to get pretty complicated what about the query language and she will have those different like we're leaving for Mongo or first of all the first key thing is that mango does have a query language in order things you tried very hard to do is keep the paradigms about relational databases and Footwear similar as possible when we when people move to mongodb so there is a query language there's a shall we can go type things in indexing in mongodb works exactly the same way it doesn't relational database
 the difference is that is a crazy language design for a document model so sequel is very much design for relations and a lot of people to try to sort of put Jason or higher key into Sequel and none of it seems to fit very well we also wanted to modernize in a number of ways to make him more programmatic to make it easier for Deanna developers to work with as opposed to the gym typing and sequel directly so we visit made a new query language from A lady called among to be acquire language and it's really just the same kinds of things you can do in the sequel but just done in a very document center now today there are many architectures that might have a combination of no Sequel and sequel databases and you also talked about this temperature and where sequel databases might try to build a document like in her face and then document based language is databases sometimes build a sequel like interface
 on top of it why are these different types of polyglot database architectures useful or are some of them not useful or maybe you could give me give me some light on this polyglot notion are useful today and some may not be useful in the future systems forever if for no other reason whether they're very large complex relational systems being used today where the migration cost from going from relational database to document databases in a way too costly to move so probably about going to be here is going to be around forever as to if you're busy and you up location I think that you know the biggest challenge with MattyB in through all the sudden new databases are there are there are still pretty new so there are features that long as we simply doesn't have yet and if you want one of those pictures or for using a tool that only speaks to relational database you're going to have to use a relational database no overtime I think we expect things I can only be able to handle more and more
 use cases in applications but it's really not a hundred percent ever and deathly not you know anywhere near that today so we'll get back to where databases are today but let's talk a little bit about the business out of business is evolved mongodb came out of 10 gen which was a company that wanted to have a platform-as-a-service that was based on open source tools that sounds like a very reasonable idea for a 2007 business Cloud was growing we've seen it grow exponentially since then so why did you end up happening to a database company 21st our attention right we're building a database which became mongodb and Anna for platform-as-a-service and the closest analogy to what we were building with a pension and this is before I go in without us and we run it so fully contained platform and we actually wrote Our Own JavaScript engine and the the server side
 sure that you would build a solid on the script and the idea I think was still was very good I think was pretty sound I think I have engine launched about a year after we started working on it and what happened in first launched people are sitting in front of excited about it and what you saw a pretty quickly after that was people like wow if I'm going to really buy into this platform it has to have every single feature I could ever want and that just doesn't didn't seem very reasonable and so we're looking at it we are at startup we had a few people and basically we said there's no way we could build everything you possibly need in order to really completely uses platform-as-a-service and if you can't use it for everything the utility starts to drop dramatically happens when I think it started out not very popular and still you know almost eight nine years later and now it's starting to get more and more features but it's still not have everything in it still suffering from the same kinds of problems
 and we look to the full platform and we got the database is the most interesting part of that sort of his really less of a pivot and more value in a slice of top half of top half of what we're doing off and just focus on the database which are the most interested in at that point so you've got a bacon delivery service and you need to notify your customers when they're bacon has arrived at their doorstep twilio helps you make sure your customers get the bacon while it's hot twilio's programmable API let you build SMS or voice alerts easily in the programming language of your choice all in under 5 minutes with only a few lines of code now your customers get a text or a call the instant their bacon is ready if your customers want to see the bacon frying on a hot pan twilio has v
 API and SD case for the platforms that you know and love learn more It Go. Twilio.com podcast and get an additional $10 when you sign up an upgrade your account that's go. Twilio.com podcast you will only pay for what you use and it cost less than a penny to send a text get started at go. Twilio.com podcast get your bacon delivery service cooking with twilio's API for Voice SMS and video
 the open-source Flywheel spinning maybe you could actually built out that whole platform was there was there some friction to getting open source heavily involved instead of saying like hey this is where we're going road map wise guy then you like lay out some kind of skeleton for all these different pieces that you would need you to ask us off and how the smaller companies that are having open core model try to leverage the community really thought about it I would say open source and he's hard to make that work I don't think there are very many there they're not very many Source it's pretty messy I would say not a huge number of successful things and building new kind of technology is out I only got through really Innovative rounds heard of
 new models and for some like that I don't think we really thought that was likely to be successful were there other document-oriented databases at the time so when we first published long will you be able to step in as a public open source database which is in February of 2009 the other document database out there was as couchdb I think it was really just the two of us okay but and show before tengen you were working at double click which was eventually acquired by Google and it was a really big business were there any lessons that you took away from double click of the word valuable in the early days of Mongo you have a preppy a lot of the things we wanted to solve with Molly Beaver problems we Face. Double click no double hip was hurting feelings of ads for day it was doing it around the globe the SLA is around the latency for serving ads with incredibly low and it doesn't have to be up 24-7 the business requirements for what the ad serving could do or changing constantly
 yeah I was answering service evolving very rapidly so frankly with me first and then after Double I started coming. Wiki and the Aftershock like he was when he started engine and frankly when we started thinking about mongodb it really was no let's build the database that we would want to use for every application whatever bills from now on and that was sort of the motivation and was very much a selfie shoot of I want a database that I want to use for everything let's make that happen and his happy Come the case is mongo the predominant database do you use internally at Mongo definitely you know something to put on the Davidsons I can't personally can't quite imagine using anything besides that at this point really are there any edge cases do you have to use other databases for internally what are you software that has to work with relational but otherwise yeah I know it's we are all wrong oh that's some serious dog food so
 the first product that the company offered was commercial support for mongodb what kinds of support did people need in the early days ago why do they need support for their database I think the answer is the same now as it was then I didn't get a bases are hard they're complicated and you don't want to make it easier and easier as applications get more more complicated the model that people are using is would have stateless application servers that are sort of disposable and simple and you tear them up there than down and all the supplies my database and that is hard right databases uniforms requirements factor in the AHA faster CPU is how many you have you know how many disks you have the latency of the discs what kind those are what kinds of transactions you're doing you know the ratio of Rights the rights to the complexity of running a database with high availability and making sure that the performance is exactly what you need it ain't always complicated and
 are you on the products I just make it as easy as possible and make a lot of tools and it says easy as possible but I think you know it is complicated and when there is downtime on a database it's very costly so that the motivation to make sure your database is running perfectly all the time is pretty high and if there is a problem you want to have that problem solved as fattening as fast as humanly possible I'm in that's what we can help in order to get the kind of introspection you need into a customer's deployment do you have to give them a special version of manga or do you have to have access to their systems somehow I almost never do customers amounted to be everything is permitted in the the main the man version definitely when we have access to their systems it's easier often but predominately for most of our clients we don't have access to their systems and we either go through log data or monitoring data or other things of that nature
 very rarely have actual access to their systems show I've done what shows recently about these systems for distribute orchestration like orchestration Docker containers or some other kind of containers like mace Oster kubernetes and there are companies that are building this model where they sell commercial version they store they sell basically support like ice melt they sell maybe a Dodo Patricia version but they have support for it and that's what you pay for and at what I always wonder about these companies is how you scale a commercial support team of Engineers Club product your building or the platform that you're supporting is often so new like kubernetes is very new how on Earth do you scale of a commercial support team so I would ask the same question about mongodb in the early days when you there weren't very many people that knew what Mom put in the new how long ago did we worked in terms of performance in what the gotchas are how did you scale the
 commercial support team in the beginning it for quite a while the main people answering anything remotely complex on the support side where the engineers building at have a new we first had our first commercial support client we had 9 people in the company and you're the first person to ever answered a commercial support take it with me so that would be very beginning is like that and then after that it really was just raining and we spent a lot of time training people running boot camps running War Games running sort of all the different things you can do you got a pretty complex shadowing program where people can rant but learn from their peers I was a really just comes out the training and it and then make sure the engineers are pretty heavily involved to use lives there ever was really working together and it's very collaborative can you talk more about the text back that you use to run and manage mongodb clusters do you mean the clients use or so okay well I guess I kind of jumped the gun because you're building this cloud service for running mongodb that will get into
 assume that the way that you like run and manage your mongodb stuff internally is somewhat similar to how you manage the cloud service until I want eventually getting the car serviced but we're talking about just a mongodb internals right now sure you have lots of data internally so I'm just wondering do you host your own mongodb clusters or do you use a cloud service provider and what is kind of instrumentation around your internal deployments we have a lot of mongodb internally on our own Hardware I said I could go somewhere we've got her own manga TV in the cloud on the numbers are on cloud providers and all that's running using Mommy to be management tools or running on the TV other three different variants that which we can get into and we actually is all very into that on purpose so we try to dog food every management cool that we offer we use for managing something so it's actually a little bit inconsistent internally just because you want a dog food
 what's up so much
 and then center for the infrastructure side we mostly mostly use
 the Bongo Tools in a bunch of there another tool again we try to test a lot of different configurations cuz it's more important for us a dog food at to make sure we know what's going to happen with our clients then to sort of have a very consistent internal infrastructure okay so what have you built internally for redundancy and availability and do you have like multi-cloud stuff going on he talk more about that yes so far you know how safe are mean and are most Mission critical infrastructure it's half in the cloud a half on-prem and we we make you do it we do it that way and we using a couple different physical data center is a couple different cloud data centers and have the data center the physical data centers Pier with a cloud and that works quite well first recorded High availability we move towards talking about the cloud service what have been the changes in developer preferences since the early days of month
 TV give me an hour and roll developers sorry jail for the future of specified developers more generally so like in contrast to what we talked about early on where you know okay developers want to model their system as documents rather than relational tables that's a transition and I feel like in the nine years since then there's been plenty of other changes in the broader populace of developers terms of what they prefer how they like to build things and so when you're thinking about practicality me what are those changes in developer preferences do you think about this Cloud when we first started building on the TV the cloud was another of Amazon for example is just starting and so now that is predominant answer to obviously a pretty big shift and it means that people are used to get infrastructure at you know very easily and very quickly they're used to things like Amazon already asked for spinning of clusters they want to like
 make it very easy. Sort of one big area the other really big area is Services serve third-party services and you can kind of micro services today applications tend to be built using you know a couple of internal microservices maybe more maybe less and a bunch of different third-party services so if you want to send text messages using for that image resizing service for that you know why did this a decade ago and we wanted to do a video conversion no access to download software to even want to go to upload videos then we converted them ourselves on our own Hardware on send them out and now you would never do that right now you're just going to use a service to do video conversion or image resizing or anything of that nature I think that is what is fundamentally changing the way applications are built and I got some pretty big Paradigm Shift otherwise in a developer's really just want the most effective tool for the job at the end of the day developers really want to be focusing on the 4th of what value they're adding and what their end-user is experiencing
 not so much a how to make it work and I think we know we just need to make sure we're always heard of doing the right thing for that what do you think is it the core of that preference for services so for example you know you mentioned text messaging why do people prefer twilio to standing up some AWS server somewhere with some kind of Open Source API for handling text messages why do people prefer Services choose her cost in Simplicity doing it yourself requires you to actually get a server learn how to run the software make it highly available to make it redundant handle issues to make him up you know it's a lot of work it's complicated if you're going to build a you know and you have anyone at a future the last thing you want to do is take a week to know a week off of your main focus to go and spend this thing up did you use a service like twilio for example you can go sign up in 10 minutes later you were sending text messages so it's just so much simpler you know and it again if it's all about focusing on actually building your application
 not doing everything else so really just comes out to you know how fast you can get things done how productive you are you don't again you know none of these services at some point maybe the services are on the most cost-effective solution but you got to go to a pretty high-end to get there and for most people these services are just buy for the most cost-effective way and time efficient way to get things done so that brings us to mongodb Atlas which is a cloud service that you released for running mongodb why did you release a cloud service yes I was pretty simple when we talked to her users almost every use a retard who's running in the cloud would love to hand off management of there closer to us didn't really want to manage themselves they just feel like they have to and if it's one less thing you have to worry about you no one less thing there to learn about when will send it to set up and rather than having to learn how to manage mongodb they can just let us do it for them it's sort of a no-brainer any good looking through the way of people using other databases in the cloud I think it's becoming more and more true
 are all databases not just Ramona TV and I think that any database it's going to be incredibly popular now or the future has to have a service like this or developers are not going to want to use it it's just so much this is so much easier for Developers for productivity and just makes a lot of sense what's the difference from the developers point of view between running a cloud service for a database vs. running and managing that database on a server for the cloud service provider so maybe I same rules and everything and that's one of the nice things about it it is exactly the same database running in exactly the same way? Operation standpoint. The set of time goes from you know learning downloading figuring out how you want to set it up so it may be hours or days 2 minutes and the maintenance goes almost away what do you want to resize when you've got a low cervix go from no small closer to a larger cluster you can have
 do it in a look at your buns in a URI or call and make an API call and then we do all the heavy lifting in the back end and not only are we doing it for you but it's also fully automated by our systems which are running nitrous your cost of a thousands of other clusters so you're actually getting the benefit of having thousands of clusters run by the same software so the reliability just goes way up also so it's a lot easier for you and a lot more reliable cuz we're doing it at a much larger scale and looking at all the edge cases and all the issues that could possibly ride his or her know how to handle them what kind of economies of scale do you at mongodb what do you get out of running this database-as-a-service to run for this really to me and takes wanted to the NSA don't people like being able to offload this work and they will pay for it on sodium atlases we believe the most cost-effective way for anyone to run long would you be so that's supposed to been there for us and for our clients another big benefit for us
 we also get to you know have the most experience running mongodb with lots of to make Hmong to be better for not just us but for everyone else and lastly the other really great thing about Atlas is that we think that users will be more successful with mongodb if we can handle a management for them and that's just it again that's good for everyone know we want you know at the end of the day we want everyone to be a successful with manga together possibly can no matter where they're running it but we believe that using one of the outlets will make you feel a successful as possible which is sort of you know good for everyone upper what are the benefits around scalability and availability redundancy what is kind of like how do you get the what advantages do you get out of these when you're using a service versus hosting your own sew in a fundamental of the technology level it's the same technology as you have the same high availability same sorting same distribute distribution so the core
 kisses on the same the difference is that when you're using as a service you have to configure it you don't just set it up if Hardware goes in and you do get the added benefit that lost so you got it and you got 3 nose in Orlando it's actually physically goes away well your clothes are still up and about how you do it but if you're using the service then we are responsible for setting up a new server thing for the day to get synchronize as soon as that we handle it supposed to be having a handle on the availability for that works on the scaling side if you want to go from like smaller nose a bigger nose we do that automatically for you and Wyoming hitting High availability if you want to schedule your charger cluster document 3 starts at 10 yards we should have managed the process for you it's a lot of it comes down to deter bees and reliability right you still got high ability to matter how you to play MattyB you still going to ask the question of how easy it is for you to get access to those things and how easy it is it and how reliable are the things going to work no all the time does the architecture of the mongodb
 bus service this experience is kind of like you're just like this endless pool of computers that he is giving you a database-as-a-service is that the same experience that developers within mongodb the company have is it did you replicate your own internal model for how people spend of databases know we never really had an internal service for this week show did what our clients did now all of our internal apps that use all the new internal apps that use mongodb pretty much use Atlas except that we deal still use if you have other management products just to make sure we test all of them and use all them internally but most of our new internal things are going on to Alice built its motion AWS right so right now you can only spend up Alex Auto Sales on 8 of us next year will be adding support for Azure and for Google cloud and we really want this to be cross
 Cloud wherever you want to deploy your application we want to have the service running their next year will also let you do cross Cloud clusters so you can have some notes in Amazon Sonos and Google some of the Microsoft take me to return to the Cross Cloud providers as well
 continuous integration gives you faster safer software delivery with A continuous integration tool like Snap CI from thoughtworks the members of your team can push changes independently of each other and they can all see their new build running against different phases of tests before those changes make their way into production the fastest moving companies that I've talked to on software engineering daily are all using continuous integration snap CI from thoughtworks is available to anyone and if you go to snap. Co / software engineering daily you can check it out for yourself and support software engineering daily with just a few clicks I had my own continuous-integration is set up for some projects that were just sitting in my GitHub account without continuous integration I got continuous integration up quite easily using snap CI if you want to be that Hero at your company that starts moving your organization towards deploying often
 confidently towards that devops dream start working with SNAP CI at snap. Co / software engineering daily your co-workers will see you were working with SNAP CI and they will fall in love with it themselves often times it takes somebody at a bigger company to go out on their own and say okay I'm going to roll out see I even though nobody else of the companies using it and maybe that Hero at the company is going to be you so check out snap. CI / software engineering daily and thanks to thought works for being a continuous sponsor software engineering daily it really means a lot
 are there Amazon manage services that you use or do avoid using them to avoid lock in and keep your car slow so we don't use too many Amazon services not for those reasons but mostly because we wanted to build something that would work across any Cloud so we want it you know the same solution we have on Amazon today if you want to have on Google and Microsoft do I really want to make sure that we use her to the lowest level teachers so that we can replicate on whatever clouds are clients want them we don't want to be we don't only want to offer service on Amazon and we have a lot of clients who are interested in both Eno Amazon address on Google services on AWS that have similar analogs on Google or as you're like an elastic load balancer for example I'm pretty sure that Google and Asher have some similar service center know for sure but when you
 TV show me like that immediate does that lower the barrier to to your desire of of using a man of service I think it would I think that you know one of the things that is different about Alice is Alice is actually a pretty low level function so we actually even the main thing we use an ec2 is with the hardware and the in the VPC is in security groups at the end of the day Alice is religious or running long will you be in till none of the tools that any of the Cross offer are going to let you manage a cluster or less or let you manage of Mongo cluster like you know doing rolling upgrades or scaling up and try to Cluster and so it's not because it's not sure of the complex wetsuit web service or anything like that the tools that we need from the cloud service providers frankly aren't all that complicated it's a red was hurt if you something that's pretty low level that's going to work everywhere why did you start with a w s simply cuz that you know we basically go with it our users tell if they want to go and that is definitely where most of our users would like us to be first so
 now why why is that because it seems like if they're just accessing the Mongo DB Atlas service it doesn't matter you know what the cloud service provider is Right today two reasons why you should have care one is latency or is it your application servers are sitting at Amazon it's nice if your databases are in Amazon also just cuz it's a little bit closer and then to on the security side so for example we can now he knows every Atlas cluster hurry Alex group gets their own Amazon VPC and now we can actually appear that your Atlas DPC with your application fee PCS so that you can keep things very secure so you do not have to get you know you did not just in your database traffic on to the public network at all so for those two reasons alone you should have interested in keeping things inside of one cloud and as usual architect in your urine system so it just makes it easier when you think of Anna. Using services like you know Amazon Lambda or even if your
 is being able to go through sore at the internal Amazon network not over the public network with the lowest possible latency is pretty of advantageous do the failure cases get more complex and cuz it's like we don't know it stresses but mongodb has a lot of redundancy and failure resilience built into this kind of how it works but does he get more complicated for you as the service provider like node failures on AWS does working around that become complicated or maybe you could just walk me through what happens during a note failure on AWS so it's kind of interesting right cuz it's worth more complicated because if they handle at a larger scale but because we have to handle it at a large-scale it's all fully automated so you know what goes down in your cluster we will just automatically know that and then replace it so we have to build that software we have to go or not to notice down transiently you're done permanently
 then we got to make a decision on what to do but because we should have to do it in an automatic fashion return to have already built all that logic and all the systems so on a day-to-day basis is actually very simple the only thing you know complicated things that might arise I'm actually built things to handle this is let's say you're an Amazon region we support many different regions in a region and its availability Zone goes down and how do you handle that and we've got her own Play books for that and we got system to detect it but you know again I've never experienced that I don't think it's happened in a couple of years but it's those kinds of things are there could be more complicated I would just haven't even seen yet so one of my favorite infrastructure episodes that I did was this episode about Dropbox moving off of the cloud is just like they moved off of a w Ashton took them like 2 years to read architect their infrastructure and build essentially their own version of Amazon S3 software for their data centers
 play epic but the lesson that took away from that is if if you're an infrastructure company its it can be erased I mean is not even an infrastructure I mean it's kind of an infrastructure company but it's more like a user you know user-level service anybody would could use it and it has this been year of a really nice user interface in yet they still had to do this migration in order to keep their margins hi dude do you think that's like a possibility of in the future like where you would want to move to your own hardware and in order to do to get get margins that would be higher than you would get on a cloud service provider the other who would ever move I think that people are going to want their infrastructure where they want it but I don't think it's impossible to imagine us having our own data centers where you might be able to get atlas at a different price point I don't think it's so I don't think it would be a wholesale movement
 some people just don't want the databases Amazon no matter what but it comes down to you maybe you can get your mom going to be customers elsewhere at a lower price wired tiger was a company that Monaco acquired not too long ago and they make a storage engine in his I understand that this acquisition was kind of important to the creation of Atlas so chocolate about that what is it database storage engine engine is simply how the database what's data on the desk house or is it on the desk and how it handles that serve durability and transaction ality of that so when you write to Mongo Mongo got to do a bunch of stuff it's got a book an index is an in what's valid in reference to the core mongeau and then or get something off of desk and that's what the store didn't involve
 I'm going to need to do that obviously very loudly and very quickly and very safely why are there different ways of doing that seems like that would be a kind of a very straightforward universally well-studied sort of thing what are the subjectivity in building storage engine so so very complicated so a number of things have changed a lot over the last you know couple of decades and I think that if you look at some of the best organism today versus 20 years ago I'm a lot of it looks the same but if you think about her to the hardware that's change and how much fat in a how fast computers are two things like ssds for spinning disks to think about like memory write you in 20 years ago the amount of memory you hadn't systems was very low compared to now so the nature of how these things have to work is very different the requirements are much more complicated and performance and so there's a number to sort out their investigative he said they're not hundreds
 yeah there's maybe a handful of really good store Dungeons & wired tiger the company was created by the same people who killed berkeley-db Reserve bendy predominately most popular stored into the last almost 30 years it took me to people who have done this before and it really building for the best modern historians in for sure that the new kind of kinds of requirements a kind of Hardware that people use so what did wired tiger do that you didn't have with your own storage engine so weird how your lettuce the end of the day the main thing I brought on was a much higher through but sort of soda can currency in wire tiger the overall performance of latency of wire tiger was a lot better than our previous tour dungeon and swim in parallel we were both working on her own store ignition out of plans I have to approve it and Raza looking at other alternatives to how we can go much faster and at the end of the day why did Tiger we both really like the product we really like the team and we thought I would not just you know let us all we need is you saw that Dave
 accelerator roadmap by a number of years and is that really made sense to us at the River Kwai the company the team the product and switched it out of her main store Denton empowered you to build this cloud service the mongodb atlas service for Alice I think that overall you know the two things one at means that we were able to do more things and how far you skisses from already be so think it over all impacted the overall business quite dramatically it says her to the secondary impact analysis are pretty large not really sure of a direct correlation where you know secondary correlation zoom out a little bit and talk about databases more broadly so there are these databases that call themselves new SQL these things like crate or Memphis equal or volt DB and I've done a number of shows about these what is driving the creation of these new
 databases was driving through the new sequel databases I think mostly that is around performance and around scalability I'm looking for trying to solve those problems in the relational world and I think that's the roof and the main motivation they're not being at one of them can you can you talk more about that like what are the performance and scalability requirements that these different databases are attacking was one of the challenges with a relational databases and go is that looks like a user profile example so if you got you not 50 tables that represent your user profile and for a given user you may have any of you may have hundreds of rows that represent that user if they're all fall in a 300 Rose are sitting on one physical server doing that join is costly but not insane and you're probably will cash it somewhere and then cash or something but you can do it and it sorta
 okay but now it's a those 300 Rose I spread across six different machines now that joint is not just about getting through the rose up from 6 different servers and putting it together and now it's that you want her to modify a user atomically when I've got to do a transaction that goes across 06 servers it's with mongodb that's on one document to a lot simpler but the relational World horizontal scaling has always been really hard and the solutions of wasn't very expensive and I think those companies are trying to solve that problem in a it cheaper more cost-effective way not that it hasn't been done before it's just that they like to do it any cheaper method and
 you know for all the Legacy applications that are on relational removing to mongodb might be you no more work than they can handle right now but they do want Azores I better more scalable Davis why is it that horizontal scaling is easier to handle in Mongo so it really comes down to the day tomorrow once again you know if you've got your user profile not sitting in one document the number of cases where you need to do joint across datatypes or documents or transactions cross documents it doesn't go 2-0 what a gross dramatically lower and if you don't have to join Zoar transactions across documents horizontal scaling becomes much easier because you don't have to do things like to face commits you know what to lose much data across the network and so it's just a a simpler problem to solve and also have more skill level so you can more easily have a scalable solution so one Trend that I've been doing some shows on is this trend of building these bigger
 in memory platforms are just too bad I guess this is a combination of needing to have faster access to large data sets as well as a decrease in cost in memory I think those are both trends that are true maybe I'm wrong but how do you see that impacting the database landscape like the near the rise of of systems that keep more stuff in memory so I think you want to think that you really tried very hard at mongodb to do is to let you configure mongodb such that you can handle different kinds of things and do different kinds of things are distributed architectures just do that very nicely so for example we have our wire tiger storage engine which is pretty traditional stores data on disk does sort of what you'd expect from a database to do and we also have a memory storage on TV
 chase you can run a single mongodb cluster with some nose in memory and some nodes persistent in as a regular database and then if you want to keep your dad in memory to have for the highest possible through 4 The Lost hospital and so you can do that but you can also have the date of persisted the desk so it's very safe so for a lot of applications at other throughput is too high for a non animated it is but it's really about handling spikes so let's say you're in the finance industry in from 9 a.m. to 4 p.m. your traffic is you know two orders of magnitude higher higher than it is out of the point today you know if you're looking at for the gaming thing you had a game launch time or you have these really crazy spikes it's me to go to handle those spikes but you're through the day isn't so crazy kind of music is written numbers really good or if you got a ton of data and you'd really fast aggregations so for us at mongodb it's all about letting you do different kinds of things inside the same date of his cluster so assertive
 developer standpoint you have to think about it so much but then when you go you need to optimize that you got the right knob so you can do things pretty quickly defrost with the in memory Trend into this large did friends were pretty nicely but I think for databases I can't do those kinds of things in the same cluster very easily and I may have trouble the listeners have let me know that they like episodes about management so you are at the CTO of mongodb to the unique opportunity to ask you about management because most of the shows I do are about pretend to be like web application companies in I guess Mago TV is kind of becoming one with Atlas but you start out as a database company and I'm wondering what are the unique aspects of management within a database company like how do you think about features and support and new products and just how do you organize your
 okay or is it no different than any other software company you've worked at and I think the biggest change with mongodb from a lot of the companies if I talk to his two things one is that you know most people use mongodb to download it and play it through this ship software right it's not a services on a web application if there's a Bug & Weed you just a bug it's going to live at we have to deal with it for years then we release a version of only be running him for some money from years ago and we should have we have to support that we have to make that works us to have one big change but should have changed a lot of what you to do on the product side and the other big thing is that you know we can't break the database sorry we can't add features that add instability are addressed in the database has to work all the time has to be the most reliable piece of your sack and to that and but but at the same time you know we are new database companies we do need to evolve need to add we do need to add a lot of features we need to sort of continue to innovate that's one of the big challenges that we have is how do you
 go to innovate add features quickly in an incredibly safe and reliable way and I think that is one of these are pretty unique challenges that did his companies have which made it even more complicated because we also ship software as you know predominantly those are pretty challenging and let me know a lot of it comes down to just you know incredibly strong process around you know user design wish you know the date of aside it's not about to keep you eyes it's been about about using an API design and choir language is on and making sure that we spent a lot of time fixing of those things cuz if you did make me and we do something you to live with it for years around you a huge amount of effort on tested an automated testing you know we built our own continuous integration system because the testing infrastructure required from only to be assertive pretty fast and we need someone that could do that in a very effectively and very efficiently across thousands of machines to a lot of stuff in a lot of working automated testing a lot of work on some of that really good processor
 bullfighting issues finding bugs eat the design and so just a really a pretty rigorous Engineering Process that we've been developing over the last seven eight years graichen system how do you build a continuous integration system for a database so if you think about it there's two big challenges that we have one of your test across a lot of different systems so you know we test automatically on I don't exactly like a bunch of different Linux versions and we test on different versions of Mac OS windows we support Solaris we should Port the IBM Z platforms for the IBM power PC platform we support arm to support a number to Harbor Park homes in forms analyzer conversion the process by forms so I think it's about someone in the 30 to 40 different Hardware O S Grant's John's number one number two is that ignorant or a suitcase that run from
 all day is for the basic unit and functional test for mongodb to run on a single box on a single ass would take about I believe it in the current numbers are on a 40 hours so that's obviously in as a 40 hours times 30 to 40 variance is a lot of time and what we found over the number of years is that the the longer it takes to run that test you the odds of bugs getting into ServiceMaster or conflicts happening goes up and shows and clothing for the drive that down to the lowest possible so we have it we're working for the Nestle I have about an hour from you being from a chemically into having a fully tested for long would you binary so that means we need to start a paralyzed across the in each one each operating system variant around 40 ways so I just did the math on 1600 servers we also have systems for doing performance testing and every commit so that's at the other more resources to that and we also went to Bella purse or developing on whatever operated
 develop on to be able to move very quickly in a matter of minutes push a change that to the sea ice system and test it not just on one operating system but a number of systems with whatever test they want to test and at the end of the day there was nothing that we could find that serve did that end in an efficient way to do it in a cost-effective way as well so we have a real Hardware that's what time do this we use the cloud for this repeat on easy to spot instances so it's a pretty complex systems are to make all this work I both reliably and I was performing side you wanted to be sure predictable so it's pretty complex system interesting what you say about just really not being able to make breaking changes because you're a database and I don't mean to pick on Docker but like I hear people talking about Docker recently and just saying the faith
 the product has kind of been shaking because there are breaking changes on a regular basis and people just want a boring way to run containers so yeah I guess that's a maybe an important lesson for for any for any infrastructure company we spend an inordinate amount of time working around things so that users don't have to get impacted not even on minor things when we make when we making up when we make an upgrade accidentally harder than it should be it's a huge deal and so we spend a huge amount of time making sure upgrades require as little work as humanly possible from any of our users on its own of a huge Ruckus of ours otherwise it people just do an upgrade and I use the old version of forever they don't look at these new features the new benefits of sort of better systems us we spend a huge amount of time on that business opportunities or product opportunities in the Mongo space or maybe even just in the database
 space that you wish somebody would build a business around so I think um you know if you ignore the ones that we are in or potentially going in you know I think that you know one of the interesting things that's going to and that's happening right image in this before is around services and I think that one of the interesting challenges that someone's going to stop at some point is how do you do an analytics across all these services and mongodb we use dozens of different services to keep track of data to do client things you know whatever it is going to website analytics and doing analysis across that is hard so we do I think what a lot of people do not have to take a lot of the data and analyze it and that that works but it's not doesn't feel right to me at least then I read your thing there's going to be some solution over the next couple of years that's developed don't let you do things like analyze data across all your services without having to it you know put it all in one place let it actually cost us
 we can do that pretty easily now cuz you know what yes I know what databases we know a lot about her moved it around we help arthritis of the time but it's not a fundamentally easy or Pleasant thing to do and I think it would come out there should be better system to doing that especially as more more applications are built using lots of Human Services I think is going to be a bigger and bigger challenge that's something every that I'm personally pretty interested in someone else trying to solve absolutely yeah these services are certainly making life a lot easier as a developer I remember writing programs 10 not 10 years ago but maybe 8 years ago 6 or 6 or 7 or 8 years ago and just the amount upfront work yet to do relative today was copious but anyway Elliott I want to thank you for coming on the show it's been great talking to you and I'm really happy to have mongodb is a sponsor of software engineering daily so
 thanks again for going on the show. Thank you Jeff
 thanks to sinfonico for sponsoring software engineering daily symphonica is a custom engineering shop where senior Engineers tackled big Tech challenges while learning from each other check it out its symphony.com SE daily that's s y m p h o n o, s e daily thanks again Stefano
