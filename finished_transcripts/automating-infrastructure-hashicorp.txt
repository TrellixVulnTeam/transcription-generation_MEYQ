Transcription: application delivery has become more complex as software architectures have moved into the cloud data center infrastructure has turned into code to be manipulated and software engineering teams are adjusting their strategies hashicorp is a company that builds open source software for modern application development and deployment Mitchell Hashimoto is the founder of hashicorp and he joins us to discuss a modern approach to application delivery and the tools hashicorp is developing your fan of software engineering daily we really want to know how to improve please take 5 minutes to fill out a survey there's a link to the survey in our newsletter and on our website we would love to know what you think and we know that only a fraction of the listeners have filled out the survey we really want to know what all of you think of as many as we can possibly get. Hammering on the survey before too much longer but please fill out the survey and let us know because it will benefit you we reads like literally every single piece of cod
feedback that we get so so please fill out the survey and after a quick word from our sponsor we will get to this awesome episode of Mitchell Hashimoto talking about hashicorp and his open source software for application development and deployment
 Engineers love Automation and well front automate your investing as a software engineer at there are certain processes do you want to execute no matter what like integration tests during a build you wouldn't execute integration tests manually you would use a continuous integration tool like code ship or Jenkins to automate your integration tests well front is a tool to automate investing just like a continuous integration tool runs your test automatically wealthfront can reinvest your dividends automatically and performance tax-loss harvesting automatically to get your first $15,000 managed by wealthfront for free go to wealthfront.com se daily and get started with wealthfront Slayer of automation on top of your portfolio wealthfront.com SE daily check it out it would support software engineering daily and you will get $15,000 in managed for free if you sign up
 automate your investing get back to the things that you can't on me like writing code
 hashicorp builds software for application development and deployment Mitchell Hashimoto is the founder of hashicorp Mitchell welcome to software engineering daily thanks for having me
 so let's start from a high-level what are the types of problems that hashicorp is trying to solve
 oh well it's at their highest level for trying to sell this basically speeding up or making more efficient at the playing in maintaining applications currently what that means in current currently what that means is usually running in the cloud devops basically all a lot of automation our Focus was differentiates us from others is that will wear very old school friend let you know what we work with physical data center as we work with a lot of older Benders and and use that as an opportunity to try to give you the same tools you need in the cloud so whether you want to move there or not we want to make sure we give you the tools that could take you there which is different from a lot of other companies in in the itm structured about space that which is in a lot of focus on something like container is a lot of focus. And we're trying to say like that the transitions really really painful
 I'm at these Paradigm Shift happens so let's try to give you software that will take you through each one the Paradigm shifts are painful and let's talk about this paradigm shift so in the past our data centers have gone from single servers to virtualize servers two containers now and as we have evolved to having a war complex infrastructure automation has become important at least that is it that is a tenet of hashicorp explain why automation becomes more important as infrastructure becomes more complex
 sure I saw the main reason in in infrastructure is that the numbers are working within the speeds working at are getting to a rate that isn't it isn't feasible either physically or financially for humans to do so like physically there is we're trying to deploy at millisecond scale basically and scale in a scale on demand and things like that in and there's no physical way for a person to really watch like real time traffic grass and and lots of server quick enough to handle that sort of loads so if you have a person you inherently sort of limit the granularity what you could react to things a lot differently and then there's just a scale of it so I had to finances of it which is that due to the scale of it you know you can't if you ever 100000 servers which is not that many but just use an example of a 10x increase if you go from a hundred to a thousand you don't you can't really afford to hire 10 more people that matter Sarah ten ten times more people to matter
 where is it that the per server Revenue you're getting usually isn't enough justify that much increase of people so instead we need to do is is you probably do need to hire more but you need to also increase the density of which I can manage think so they need to be able to Manitou go from being able to manage 50 servings per person to 500 Silver Spur person again I'm just using using fake numbers as examples you really good actually matters a lot more complexity increases automation becomes more important and another Trend that you've discussed is that we're seeing a proliferation of services in the cloud that developers are using so we might use a database-as-a-service might use services for other things how does this change the way that we build and deploy software and and is this another one of these Paradigm shifts that you know some software developers are experiencing pain in adjusting to
 yeah I think I think it's the I talked about this before and I think that sass whether we want it or not you know it in Enterprise technology or in our data center is coming so even for the perspective of eight of us switching to and and even they provide database-as-a-service cash the service for the service things like that end and I very very rarely got into you know anybody from former small companies with Fortune 500 a very rarely got into a company where they are using she really only a V PC and easy to which would be just infrastructure they always using real bees are some as a service thing so the challenges this represents is mostly a management which is everything no longer is just a Cerberus everything's manage a little bit differently and everything is generally management API so if you're on a to B R Us at least one provider but also usually using multiple service writers
 you might just use database for the infrastructure services but you might use and I think it's like a date a dog or a liberato or something for metrics and things like that outside of eight of us so you need tools and and nausea courts case we have a tool called terraform which build your data center it's free and open source and one of the core features of it is is it can actually spin up and orchestrate multiple providers together in one configuration so you can actually spend up a data center in eight of us needs to get all those things and then hook in a database of Heroku metrics from liberato and all these things and pulling together
 I think in that conversation that you touched on another one of these these trends that you've discussed which is that everyone's dream is a homogeneous infrastructure but homogeneity is actually admit that's not possible to get out you can just be in your never entirely even if you're in AWS your number in tirely on AWS you're using these other things as a service and you know we recently did a show about openstack which is a data center operating system that can sit on top of a heterogeneous infrastructure so I think this is an interesting abstraction that works to add some degree of homogeneity a top heterogeneity do you see that as another Trend like can we use tools like openstack and the tools from hashicorp is this are these the compromises that we have to make or that we will choose to make to abstract away any of the problems that exist with the Head Road
 infrastructure
 yeah one of my sort of core like philosophy is that I mean it's totally entropy like as humans we're going to strive for homogeneity and we're going to strive for beautifier Datacenter one technology but we could fight that as hard as we can and then just like entropy will continue to grow I believe that I'm better than it is inevitable and so the way I look at it is that it sort of cyclical like you see you see a. Near homogeneous homogeneity so an example is virtualization like if you went full in on VMware ignoring the financial cost of you on full in on VMware then you probably saw. Where your data center was pretty homogeneous you saw you had just a lot of the ends in there it was pretty clean maybe you had a couple physical server is left over but that's sort of what I'm talking about is that you always sort of but there's this common saying which is sort of a joke which is that thing's never liked it you know things never go away
 new technology that comes out where does adding new technologies are not removing old one so even today like when people are making huge switches two containers of things like that I'm still seeing a lot of the ends I mean it's still really early but I acting use cases for being so I don't think her disappearing and I think that you describe things like openstack and things like that and I think that at the same time I think cyclically will get to a point where 95% of the data center is one thing but you're going to have the 5% which is a mishmash of other things and I think that makes magical actually just get worse so again it's one of the core things that we built into our tools which is being blocked handle this heterogeneity and that sort of part of the Bridging the Gap from the Legacy at the modernist as also part of supporting heterogeneity because if you do adopt a tool you do you would really like that tool to affect 100% of it is in a rather than 95 it makes a pretty big difference because that last five percent there still
 education bird and a maintenance bird in a support bird and then that sort of thing so you do want to be able to it's it's covered all
 now that we have discussed the macro perspective that you have and they you take into account when building tools at hashicorp let's talk about the application delivery process as you see it so you break down application delivery in 3 steps development deployment and maintenance and I'd like to talk a bit about each of these stages and the tools that hashicorp the cops to alleviate pains at these stages and the first is development so an ideal development process it in your eyes is consistent shareable readily available and has high production parody explain why these characteristics are important to development sure so you want to be easy so you you really want developers to get up and running very easily so when you hire someone they could start working big be impactful right away when you have an emergency need to transition resources
 to the new project they can start working right away on the emergency yeah you really want development to be as fortunate as possible and to make it stable you really want it to be as close to production as you can you want you want to be fairly confident that was your writing code is going to behave in the same way as production so I like to say that you know development needs to be mostly invisible thing and it's not right now but I think that that's that's where we need to get to is where your programmer really just wants to work in a net and save and I actually at the thing I actually always say about development is that the only people that got it right the people that got that all in perfect is the PHP Community like every technology language of a framework every process since then has been trying to emulate PHP whether they think it or not you basically want the workflow it doesn't get any better than you have an editor You Save You tab over and you see the changes like that's what he gets into PHP you would save you have over you were fresh
 I see the changes but that's really what you want for everything and it's going to take awhile to get there but that's that's what we need to get to just so that we could develop faster so the first step in making a disaster so we're obviously at the tooling layer but there's a lot of other important folks above us that are working on it off the framework layer and that sort of stuff so you also talk about the application deployment and maintenance process and in the deployment phase were concerned with starting and configuring servers and services as well as they actual deployment itself and then running our application and then once our application is deployed we want to maintain it and the maintenance process can involve updating the servers are changing features or do you monitoring what are the canonical problems that exist across the deployment and maintenance phases of application deliver
 yeah the deployment of maintenance is coming over so we break down application delivering these three steps and I would obviously I don't think it's wrong but I also think there's a lot of other right answers you can break it down further you get you know you can bring it down still like dozens probably but I think that I think that these three at a high-level also represent what you're doing and and because they're so high level though there's they're pretty big so it deployment in particular is a and maintenance I mean they're both huge huge category so so there's all these problems and that's why you seem like we have one one or two development tools depending how you look it up and then at the same time we have seven pools focusing on deployment maintenance just because it's a it's a much bigger problem there's many more many more problems Within These these fields are trying this all those
 okay and now that we have some holistic view of how you view application delivery I do want to talk some about the tools themselves they are working on a Hatchy corp corp and chill like the first the first tool that you work on those vagrant and there been a lot of shows about bigger to water podcast and we'll put some of those in the show notes I don't want to touch I am too much but just to briefly explain what is vagrant striving for that development model it's it's one command to get any development environment up and running for any technology so what any language container any platform sole next person to work on windows at the windows person court at Lenox apps or vice versa and then so it's just a development tool and a stack on its development Made Easy that's what I strive for
 developer made easy so how how does it epitomize those those characteristics of good development that you mentioned consistency share ability availability the high production parody so the address is it by ear ease of use to get it up and running as One commands for anything production parody it you're supposed to use the same automation that you're sending a production as you're saying but that environment and the way you achieve that is bigger needs is virtual machines so that you can mimic your production environment and then shareability so Victor has built-in features for basically showing your environments collaborating on your environments across the internet so it anywhere really actually contractors love to see each other both because they're able to show clients like their their work without having to deploy it just a friend of element they could just bigger and share get a URL and send it to their flying across the world and they could see it
 trying to do and just like anything else that one of the key points is that it's it's technology agnostic so bigger and it has huge huge sets of users in PHP and Ruby and JavaScript started to spread out all over
 okay so big rig does iconic of the development Solutions at hashicorp and we should talk more about the deployment and maintenance Solutions because there's such a more expensive tool set do you guys have built so talking about deployment and maintenance you you would you break that you break those down into four fundamental steps which is acquisition provisioning updating and destruction could you explain these four steps of the deployment and maintenance process in more detail so that's just for deployment you you need to acquire a resource we need to provision at which which is setting it up for running your application that's the pre that's the set of Faith there's the update which is and when we need one main instant background and we need to redeploy on we might need to update the thing on or if there's a there's a security vulnerabilities something we need to update the underlying you know Os or Library
 which is pretty straightforward there's some point or reach the end of life and you got to destroy it and and there's also a structure and if you follow me to infrastructure it's the same thing except you have the updates that you just sort of acquire provision destroy acquire provision destroy and immutable is all about making that fast so that's basically how we look at it
 deployment used to take a much longer time and today not only do we have faster deployment we have things like microservices we have a sharp increase in web traffic with more and more users different types of users you know there's box hammering our systems and we have highly distributed systems in their Auto scaling up and down how do these types of changes in in deployment and architecture how do they change our application delivery workflow from what we might have been used to you know a decade or two decades ago
 I think the primary where they change thing is just we have to be a lot more comfortable with the systems more than anything else you need before when you deploy things you would you would physically you know send the bits over flip it over watch it sort of switch it update and now you there has to be a lot more trust in you know what do you send your code to something which will eventually roll the boy or are change the server something but it's a lot less in control or there's a lot more distance between you and when it actually happens so even if you are hitting the big red button to make it happen there's a lot happening between that button pushing it actually happening and I think that's the biggest there's a lot of early adopters which love it there's a lot of early adopters so that I had a really bad time because the cooling was so young and you can't trust it but you know I think that every month you wait and not adopted it's getting better and better so even when I meet people at comp
 that are like I haven't had a chance to play with one of your tools like axe yet I'm always super happy and I was like no problem there's there's a lot of people using it but by the time you get to it it's going to be more stable then today so that's really not a problem and and so I think with the plant more than anything it's going to become more and more automated that and perhaps we'll touch and perhaps you want but I think a big example like schedulers like schedule or is it sound like auto-scaling I made a schedule is more or less is is you give you give something your application and it decides where to put it and when to put it there and how many to put there are more or less so that's that's the ultimate on the lack of control but also gives you the promise of the ultimate amount of scalability Andes
 yeah I know so I would love to talk about scheduling a little bit further on in the conversation I think we should talk to her about terraform so what is terraform so terraform is a tool for describing and configuration files your entire sort of data center apology and when I say data center that used to just mean like a physical brick-and-mortar building with with things that consume electricity in it but now when I talk about Datacenter I mean I mean I do mean servers I mean I mean I mean physical and VertuoLine containerized servers I mean DNS I mean all your sass database providers and N connecting it all together so basically the ultimate example I like to go there for him it's it's ultimate goal with your can do is you should be able from nothing from having nothing to hitting One commands and spitting up all the cloud resources you need then installing something like open like openstack on top of it then and then launching containers on top of it or been song
 schedule should go from nothing to everything in one command and and you can so we have you we have users that actually use their form for development because they could spend up in the entire production cloney's in the Saints versus production in one command in a few minutes see you then I think it's been up hundreds of cloud resources in a few minutes and they can destroy him just as easily so that's that's a goal is trying to take one more angle that I used to describe it as if you're familiar with configuration management which focused on like shopping puppet focused on setting up one server and selling packages and users and you're the one server using a set of configuration files from is just like that but instead of for one server it's for your entire day Center
 why would I want to spin up open stack on top of terraform could interact with sort of bare metal provider so this would just be as a way to get us a terraform isn't the thing that dispenses like a VM for you it's the thing that sets up the thing that has been studying for you so imagine you have a actual physical data center with a hundred servers with Dan and inventoried and something but they're not they can't do anything except you get like man you last stage them and do something if you wanted to but they're pretty manual how you could use terraform to actually connect to those things install openstack horny that across and then throw to return to you the addresses of it that's not a bad example advance but they was was how much time from Purdue in a single command
 alright so okay but speaking like in terms of cloud infrastructure providers I get a w s in Google cloud and Azure and terraform can be used to combine and manage the infrastructure that you can be across these different cloud service provider so does that or is that to say that it can it can it can lower the switching cost between them or is it more like you can it unifies all of these different Resources with a single API or explain exactly how it is you know I can I can manage all these different infrastructure providers just using terraform reasons people just use it at
 it it it's not a distraction so yeah it is a way to have dramatically lower switching costs but it's also not an abstraction of the cloud Rider So you you're not saying I need a generic server of some sort and then you say Target para targeted BSR Google so on you would need different configurations ready to be asking Google and you need to understand the cloud platform that's just the Attraction part I think it's interesting but it is not a problem but the big benefit is that you get to use the same workflow the same configuration syntax the same tooling across a different clouds so as an example like this is confirmation as your has Azure resource templates or something like that and Confirmation and Google compute also has their own sort of codified infrastructure Builder thing and the reason one of the reasons people just tear from about it how about all those is because it is not a walk in
 that one Cloud there's no way that cloud formation is ever going to spend Google temperature should never ever going to happen and also I mean that's one reason I'm in another reason is that because Tara from the open-source all those are we actually get a huge amount of community help so that example I like to give his fat eighth of an ounce the Gateway which is a very particular was was very popular is a big deal that people really want it so they really want it start using it right away and the time for all the support the NAT Gateway once they publicly announce it was 2 days and I the last I checked which was a couple weeks ago so I could show you a couple weeks but last I checked is confirmation solo support in December so it's been it's what mid-march does been like three or three and a half months and if you're using cloud formation to automate your infrastructure you're either not using at Gateway or you have to manually me to the Gateway which is
 Hair Forum by the time you voted out and you're ready to prove a concept that he was there for you you know so it's it's one of us that's another big reason that people choose the open-source I think says it's it's really hard for a company to keep up even as big as Amazon it's really hard for coming to keep up with the agility of sort of the the masses that are willing to contribute to open source project to terraform what exactly are you describing the Terror from Mike what how do you describe what configuration you want from AWS vs. Google cloud or Azure or digitalocean does it look the same between these different things or or is yeah just described that configuration process in more detail it looks similar but it's not the same look very similar that's everything and never looks really similar which is also one of the reasons people like it. So everything is here for I took its own configuration language so for operators like you don't need to be a
 grammar this isn't programming it's just really configuring your whole Data Center and so what it looks like is basically everything is here for his broken down in something other resource and an example of resources would be a nice Coincidence of elastic IP a DNS entry a database those are all resources and basically you just Define the resources in the set of configurations that resource and and you specify what you want snot how to do it so it's here comes all the clarinets he specify the end state of your data center and even if it's at a currency terraform will get you there and and to make it even say for their plans that so you can actually ask their form to plan the transition and it'll outputs of the clan that is going to do and then you can tell to execute that plan so you could be sure that you know the plan says that we're never ever going to change the IP of this one machine then you can be sure they would be executed it won't change the IP so this is really important because I'll pick on confirmation again just because
 what are the big elephant formation one of the big problems is that there certain things in a dress that require a destroyer and recreate like you can change the Ami of an easy without destroying it and recreating it and and so in cloud formation when you change the am I so desired State you tell it what you want me to get through there recently and you may not realize that the change you just did require that is trying to recreate I'm a name is obvious I mean for anyone that's obvious but that probably isn't obvious and there's a lot of things that even Advanced Tuesday to be us will find not obvious that require destroy create which means that you usually get down time when it happens so there's been some really big companies we've got and see where we showcase the plan feature and ignoring everything else they immediately say okay we're in for adopting this just for that because the problem is if you don't have something like a plan regardless of what other software used to be
 when I can plan the person that hits the final bun to apply has to effectively be a genius or are you doing at work will has a fully understand the system you're affecting and the changes that you have and how that'll affect that's as soon as a fully comprehend that end with something like terraform you could have someone very Junior very beginner make very scary infrastructure changes as long as it's gated by someone who's experienced old read the plan and make sure it's saying then you could just apply it it's a lot more of a trust model up I like to think of it a lot more is like when unit testing really blew up a lot more in this awkward at all like if we refer Advanced features of software as long as you know the CIA says it's green at some point just have to be like okay I think this is good to go but cuz you can't understand like the full scope of a change in the same way with data centers as they get more complicated because the model of not having a plan is just in my pin is not going to work
 Joey in that you mentioned your terraform is the way to you know you couldn't even tell you tell terraform what you need we don't describe what you like how the steps in order to get there so that sounds like the type of thing that you yeah you could you could delegate to a scheduler and I schedule or wood would figure out how to get the resources that you need and we have all these different schedulers like maid services Marathon kubernetes I think that's scheduler and then you know there's things like ECS I don't know if that's classified as a schedule or but yet it okay to describe describe how to terraform interacts with a scheduler and how you describe the interaction pattern so
 follow up real quick before I talk about how it interacts to schedule a you mentioned something important of the company you mentioned that the declarative I mean I mention that then you reiterate it so the declarative by the Penn State and then it gets you there and that a core part of sort of my belief in all the tools we build is that declared it is the only way to scale at a certain point because you stop being able to comprehend how to get there because the system become so complex so you know it's so interesting because we rise of popularity and it's becoming more popular on the front end with react and yeah I don't know declarative send text is really all the rage these days I think that I just think that it's the only way to scale I've had very very
 passionate arguments with people about this because it is a very I would say opinionated or religious even view for some people that imperatives better than declared or something like that and I I really truly believe the player does the way to go and and one of the first really magical moments for me for terraforming particular was when I was helping someone managed the pretty complicated infrastructure repair form this very early on so I was sort of hands on helping this company because Terra formers young and you want to make it work and they made a change and they ran the plan and I look to the planet that looks wrong like it wasn't how I would do it and then the way we always felt sorry for him would be it was the offer any complications what would a human do and try to get it do that and in this case the plan look like very weird I was like I don't know this doesn't seem right to me but then I thought about it and I realize that because Taylor Farms declarative terraform actually found a much faster way to get to the end state
 require no down time and it was creative but it worked and so when you rent hear from you got a zero downtime very quick muscle S8 much you were API calls sort of thing I worked on that was when they are really quick for me a lot more for terraform that I was like okay like this is this is another reason to clear it is crazy because when computers are you finding the route to get to your end State I don't find really weird things that a great example is like yeah we just saw the time of recording this I can just a few weeks ago alphago was a huge Google project that beat one of the world's best go players then and one of the things about computers learn how to play the game as they play the game what are the things that was touted as being really exciting is that the computer will teach people how to play the game better because the computer will come up with strategies that we've never thought of before and in the same way terraform sort of showed me show me a way to do this one infrastructure change that I would have never thought of which is kind of interesting so I think
 Baptist I think that as things get more complicated declarative will get more more interesting that way so okay so I think it's really cool so that's fer fer scheduler so The White Album interactive scheduler says in a way with with all our tools like there's a huge Spectrum I wish you could use tear for me so you can use their form for there's like it's a Swiss army knife that one thing particularly well but it's it's it's something that you know the hammer that you could choose the hammer a lot of things with and when you have a scheduler a lot of things there for me to do goes away and that's not a bad thing cuz got to go give you a lot of other things so if you have a schedule or their way usually works is Tara from spins up the underlying infrastructure about the scheduler and then a hands-off deployment and management of that infrastructure to the schedule or so at the time of this recording there's no there's no schedule or that actively managed the infrastructure they sort of
 stack the pool of resources to be fixed and they scheduled to them and a human or something else you like terraform underneath will grow and expand the full of resources as needed for the scheduler to sort of accept that as a fixed pool so at this point the way I would work I'll use our schedule as example Nomad is that you would spend 50 ec2 instances and then tell Nomad gear shift ec2 instances free to schedule to and then if you decide that you need more scale you use terraform to spend up to 55 and then update Nomad and say Here's your sign more servers for you schedule to so that's the interaction right now you can get more advanced then so interpreted actually kubernetes provider where you could you get to know the resources install kubernetes and then there's a provider and what that does is you can actually deploy applications on a karate so just in the same way that you could Bridge together a different sauces and clouds like I said you could actually request easy to install a scheduler and then use a resource to just send an application
 scheduler so the schedule is so responsible for the deploy but terraform is sending it to it and that that's usually just useful for bootstrap like if you have initial applications the scheduler needs to run the tear forms a good way to get that going
 why did you choose to build your own schedule or rather than using one of the other ones that are publicly available as that's a great question also and I think that my answer and a little ways will sound arrogant and and that's unfortunate but when we look at a problem space we sort of look at what other tools are out there and if something is good enough we use it and so we're in a lot of areas like we have seven seven different things in deployment but there's I would I would say there's like 50 problems so I mean to wait we only saw the fraction of them NBA that's because a lot of them like we haven't touched logging we haven't touch monitoring had a really really important piece of your data center it's it it's the backbone of of everything I think terraform is one part of the backbone is really important in terms of
 appointments not in terms of soda maintenance and so we looked at schedule as in and we needed to pick one basically to align ourselves with to be really in a great heavily with because we do believe schedulers of the future and and we needed to make sure it works really well with one we wanted too closely integrate with one founder of hashicorp he built a scheduler before at Amazon you work for Amazon and built the scheduler internally it was a physical scheduler so he builds a scheduler that scheduled where shipments to the Amazon warehouses Wentz in the warehouse are so cute he has a really good eye for schedulers understands the very deeply this computer science theory behind that scheduler and schedule
 really good I always talk about that we looked and there are fine but we didn't we didn't sort of like the schedule didn't hit the design properties that we had a mess I'll just save it in scale and everything like that it just didn't you know it wasn't declarative enough it wasn't self-healing enough it didn't agree with service Discovery well enough to have these sort of things didn't happen end and when your face do something like this as a company as an individual sort of general like you have two choices which is either work with them and go through the politics in the red tape that exists in every project to try to get the integration happen in the future if you want happen then your agenda sort of pushed or even try to build your own and in the in the scheduler space building our own was sort of a last resort because schedules are very complicated and and so we didn't really want to get into that game on this we had to and answer to we felt weave
 I could do a much better job in many areas and so we decided to it
 totally and sew a bow so much to cover the interesting thing that it that you said there was I thought I should schedule a future and you know some people listen to this podcast may not even know what his schedule is like even after our conversation just now they might be like what like what is that cover that I could do appreciate the great could you could you explain what a scheduler is and why why is it the future why are why are these things so important a scheduler is is very well-defined it's it's something that Maps the set of work to a more limited set of resources usually more limited set of resources so that's the generic think so the reason the generic definition is important is because once you understand it you realize that scheduler surround you and your world they're everywhere so it let me give you some examples your CPU scheduler you're running out of apple
 oceans which is more than a set of CPU cores you have so there is more work than there are resources so you have a scheduler running right now on your computer on your phone and someone that's mapping applications to CPU core if you have an assistant then you have a human scheduler which mapping a set of meetings or a set of plans on to a limited set of time slots in your calendar that the schedule very very literal Elmo scheduler and then the store for computers then there's something called a cluster scheduler back up one level when you requested VM from ac2 or when you sign up for a shared hosting provider that's the schedule as well because they're scheduling a set of virtual machines or shared hosting resources on to a more limited set of service I'm so that also a schedule or so easy to itself or the scheduler all Cloud their schedule is all SAS providers are schedulers that's all sort of there but they are very specific schedulers
 generic scheduler are we built on the schedule the set of applications on the set of servers and it's a very generic service schedule it's sort of like cheers how much CPU I need here's how much memory and then here's a huge pool of it's fine this plot of fences correctly and so that's what his schedule is and the reason why they're the future and why they're so important is because as our number out so there's two things that are growing and then deployment right now there's the number of applications are growing because of a microservice even without Microsoft Office is just a number of things were deploying isn't it is growing number of servers we have is growing so before we would do as as devops people as developers anybody as we would launch a server and then put one application on that server and that works fine but when you have let us go extreme well socotra because extreme I might turn you away so if you have 50 applications which is
 extreme for a large Company applications because a lot of applications do nothing like they need to exist but they don't do anything on a full-time basis like there's there might be a service that handles like the cron jobs that do statistics Roll-Ups once a day or once a day that use a ton of CPU the rest of the day they do nothing so if you have the server and it's funny cuz the server name for every company I've ever gone through for some reason to the you till but if you have that like you tell server that has the Cron's that's running all the stuff that you till service costing you real money for doing nothing 23 hours a day so
 now if you can access problem then you were losing a lot of money and you have a lot of waste so I want to schedule her does is you tell the schedule the job so in the in the crime case you would actually tell no matter in this case this is a job that needs to run at 11 p.m. everyday this is this is what he needs to run in one ever needs to run this how many resources it needs the rest of the day it needs no resources so it doesn't use them it doesn't ass I ate a little reassign the resources to other things knowing safely that it can so if your if your web traffic during the day is very high for example it'll actually spawn more what applications in the same slots that and knows at 11 p.m. it's going to need for your roll up but also at 11 p.m. you probably have less traffic so I can spend those down I'm at the complicated problem but this is the promise the schedulers are going to give us and ends and schedulers are new at all obviously they've been surrounding us for decades but cluster schedule
 same thing or I think the new thing that's that's going to be the future but if you look at Comfort it like really high tech companies like Twitter Netflix Google they've been using skit cluster schedulers in production for over a decade so these are new technologies they're very proven but it's just that no one except the highest no top 1% scale has needed them until until what I'm arguing is now I think that's they have a lot of benefits now at this point you know if it's you improve a scheduler the the scale that we're at you see you will see such good economics out of those those improvements in the schedule should that's that's really where to the importance comes in if you'd ask expecially for big company the schedulers are also an anti locking mechanism so if you're if what you're deploying is it with scheduler then you can marry
 quickly switch from one mud Rider to another so it gives big companies a lot of Leverage in terms of being a price negotiation and things like that because there's no walking into their vendor
 totally okay I want to talk about another tool that hashicorp works on which is console and this is kind of a shift in the conversation so consoles job is to perform service Discovery configuration and orchestration and its were talking about these large-scale distributed systems microservices service Discovery is really important what is service Discovery things you need to talk to so as a web application where's my database is a load balancer area where is the applications that I'm load balancing to you know that those what that's the basic problem
 so it's like almost like service a needs to know that you are Ella service BBI me up here if your if you wanted to go to a search engine and you don't know google.com then you can find your search engine yeah or more specifically I'm in google.com is service Discovery for the actual machine IP of Google on so how do you find the actual IP address of Google use service coverage is DNS okay great so so when service a asks console a question like you know where is the database service to what's actually going on under the covers there how to service a know where to find console and and you know how does console know where to find the service that service a is looking for so did The Innovation the thing that makes Council interesting is the distributive nature of it and the self discovery nature of it so what do you launch a machine you install console and everything so you ask the local machine
 something else about how you get rid of the worst console problem kind of that console thing obviously needs to find the rest of them but that so the way that works without going into detail is is a is a gossip protocol that basically you tell you tell that console where one other couple is and it'll find the rest automatically so you need to sell one chicken in a problem but there is a lot of well-documented ways to solve that one problem but the moment you saw that one problem you get service Discovery for every single service in your data center or in the Wind Mobile Data Centers actually and then and then we actually use DNS so you actually do use that we we take the. Console top level domain and and you actually would do database. Service. Council to find the database or or redis that service at consol pyrite us and so on and we use Dennis that you touched on earlier which is that you know we're using external services for an increasing number of things and
 console can access external Services it doesn't it doesn't just you know access internal services so what are some of the challenges to external service Discovery I mean I imagine if you can't install console on those extra external Services maybe that inhibits you from the from the same model you discussed earlier where you install console on everything actually the Big Town directional Services is to me is is you want them to behave like their internal services do you want the fact that it's going across the internet or something to mostly be invisible to you on it when you use a database-as-a-service you would you like to pretend that the database is right there in your data center and so what's really disruptive is a lot of these external Services they give you these really complex weird your else to access them and and for a lot of reasons there's some security through obscurity there in terms of not be able to catch them they need to generate them
 Emily Fiber customer things like that but but as your application is that it's kind of a burden because now you need to configure every application that these weird you or else and so what console does is you're actually able to configure external Services Siri able to say that when somebody looks for the database is actually at this weird URL so every application still those database that service. Console but that's going to return a cname to them to the actual DNS entry so it'll actually write properly so you can act like everything internal end and this actually goes all the way back to the developments of why this is important so in development you might actually be running your database locally like on localhost so you are not using one of these weird your else is just Loca Louis but offer to help and you still just do database-as-a-service a console and it's going to be local there so have made it so you can figure some more of the databases like it's always at here or there and end if you're using console you can borrow last just part of code these DNS entries into your applications and
 and it's a ReliOn on Consular yes I'm system giving you the right response back
 console is full of interesting distributed systems problems and you also have a tool called surf which I'm guessing fulfills a lot of the responsibilities of these services so strong that console has a gaseous surface is is it open source project we have it is and used by some really interesting people but not when we talked about a lot because it's very band said doesn't is a building block like it's not a solution like you're going out then build something about a surf and and that's what it does for console is it solves the problem membership distributed membership so one of the core problems that you ever build is who is part of my cluster and are they still healthy or not and surf is sort of a library for us to Shin that into both both console and Nomad actually I just heard this assumes that live on top of surf for membership
 the surf displays zookeeper
 oh okay, complex key value storage that is in the same way as a zookeeper okay very interesting can you tell me any of your sister's prom save nanako things like leader election gossip Protocols are different kinds of consistency and I always find the subjective decisions in distributed systems to be pretty interesting are there any like can you tell me any interesting history systems challenges you had like it where you made a subjective decision that came down to no preference you have they give you a Define pretty well you're set of impossibilities so
 I had to set up speed on this resistance again our mom's the one with the heavier background Industrial Systems that's what he was studying at University and that's how he came in the industry so when we were working on July 1st this year at this time there was a lot of features that I was like I would be really cool if we could do this feature and and then Armand would think about it for a few seconds and be like it would but it's impossible so we can and that's the hardest part for me for General is it that's why I laugh whenever I see any project which is like we're single server for now will be distributed later it's like you can't you can do that in some ways but you'll have to remove features are disabled and because there's a lot of things that are impossible to make it or if you choose to like not support a feature you can actually make like the distributive guaranteed a lot stronger so with with console the sort of guarantees we make our is that the the underlying health checks are really highly available sit there and wonder what's considered an AP system they
 they are partition tolerance and an available always but the key value of the service Discovery all the state sort of on top of it is CP so it's consistent in the case of a Down time or or or or enter the network problem and is partition tolerance in that wall or the partition it will heal properly but it won't be available during a partition Sedalia partition you can actually write to certain parts of it
 so I guess we're wrapping towards the end of this conversation we've talked about some of the tools that hashicorp is working on but there are a bunch more that we haven't discussed but I would like to zoom out a little bit and get your macro perspective chocolate about the business to what is the core mission of hashicorp logicorp is just to try to make make application delivery better at and my motivations that personally the reason a lot of people laugh and it's like why I like really old said that yeah they asked like this sound doesn't sound like a very exciting thing like why aren't you making a chat after something and and the reason I got into this is because infrastructure ideas we when we decided to start a work together we didn't search for company idea but we we thought we would we talk about ideas all time in and there was some other ideas we had that we we thought about pursuing
 until like man at some point where I have to deploy this and deployment really sucks and so we actually went full backwards like what if we saw like deployment like what if it's it's weird because we built this company to make a deployment easy to make managing data centers easy so that if we ever did anything in the future we would never have to solve these problems again and protect Brasserie won't because we'll be doing this but the last of the motivation that everything so how's your course mission is to give you the Datacenter sort of the future while also giving you the bridge certificate there for me current your current view the days that are so wherever you are right now will paint you a beautiful future that you can get to on the wall so give you the tools to get you there there's a lot of other vendors out there that are going to paint you a really beautiful picture but then tell you to throw away everything or rewrite everything in order to get that future and and we recognize that is not being very pragmatic so we're trying to give you the
 you there speaking from your your personal desires your personal drives though I am curious like so like let's say you know the 90% 90% of the application delivery the way that you wanted and you get to the point where you have got the last ten percent is the last mile it's the hardest part of getting application delivery fix the way you want it but it's so close like I mean if you get to the point to where it's close enough will you just like saying you know what I think we want to just go build that chat app now because you know your history and you know you've done all these things related games and other projects and I can totally sense that you have other things boiling in your brain that you want to work on that are completely unrelated to the application delivery and low like me a low-level deployment stuff like just on a personal level. Could you see yourself ever getting that
 Creative Edge way or just like you know we've done enough of this I'm going to go build a chat app yeah I mean I think that the last miles always right and I think that more than a lot of companies I think the Hotspurs consistently shown that that hard problems that's Cara that that's not the thing that's ever going to drive us away I think that you know something so if if I'm bored with the scheduler so I could always go work on security we have we didn't talk about we don't need to but like we have we have a security pool that's that's one of the most prominent security tools in modern devops right now and add that I can work on security if I wanted to I actually Securities really stressful so that I can go work on terraform and I want to
 this is sort of my passion is I started I built I did do a lot of other things but I also started working on Datacenter Automation and things in college for fun like it's not something that I'm forcing and anyway it's always something of done so I think that on the on the probability of me getting bored of it and just leaving the industry because of that is quite low do you feel like you have competitors of hashicorp or like you guys have such a large scope and and you've also built so many interesting products but like
 do you feel like they're competitive or are they just like things that are pure value-add and people will get in addition to the two other Solutions or yeah I like how do you think about competition yeah I mean user hit the nail on the head what should we do a lot of different things and because you do a lot of things actually a lot of different and better so it's made Partnerships particularly interesting because they were really we might partner really well with someone because of terraform but are directly competitive because of no matter Vault or something and and so when we talk to other companies we we like to say that you know like think of it like where were much much smaller scale think of it like how Apple has part of a Samsung like Samsung their biggest phone competitor but they work really well. A really good financial and business relationship at the chip level so they they they turn a blind eye from their partnership expected to the phone so like if if we're partnering on terraforming
 Vault then we'll never publicly it together ever even like mentioned Vault exists obviously we're going to talk but we will highlight like achievements on Tara from the grass so we always have to be the best in one as a business to succeed so right now there's a business perspective of financial perspective the things doing the best wrestler terraforming ball and you know if if for example of console doesn't become the service Discovery solution out there something else sort of Beats it out to become like a bee best service cover solution from a business perspective not a big deal effective there's something still solving a problem so
 what heads are bats with a lot of other Technologies and so yeah
 alright well that seems like a good place to close off Mitchell thanks so much for coming onto software engineering daily and spending your time I'm very impressed with hashicorp and I look forward to seeing what you guys build in the future thank you thanks for adding me
