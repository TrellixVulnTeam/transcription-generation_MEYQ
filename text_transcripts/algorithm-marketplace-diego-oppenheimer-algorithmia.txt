Transcription: algorithmia is a Marketplace for algorithms a software engineer who write an algorithm for image processing or spam detection or tf-idf can turn that algorithm into a restful API to be consumed by other developers different algorithms can be composed together to build even higher level algorithm Diego Oppenheimer is the CEO of algorithmia and he joins the show today to explain how algorithmia works the company has developed its own container orchestration and Management Service and operates similarly to the serverless Computing Paradigm that we've discussed on recent episode software engineering daily Diego also talks about the marketplace dynamics of building a platform for developers to sell algorithms to each other before we get to Today show I want to quickly mention that software engineering daily is looking for sponsors there are around 10,000 11,000 on Sundays 12000 Engineers listening interested in reaching that audience you can send me an email at saw
cringing daily at gmail.com and if your listing of the show and you want to support software engineering daily don't worry about donating money through patreon or something I just want you to share your favorite episode on Twitter or Facebook tell your friends about the show at lunch I have considered the patreon model for support but I think that the advertising model is a more sustainable model I think it contributes to a potential growth opportunities more so I don't know if you have any ideas around that if you think the patron is a better model send me an e-mail I'd be happy to hear your thoughts but I do sincerely believe that other people would listen to the show if they knew about it so please share it and with that said let's get to this episodes very fascinating episode algorithmia with Diego Oppenheimer
software Engineers never stop learning if you were listening to software engineering daily right now you enjoy learning so much that you listen to a podcast about technical software topics itpro TV has videos for people like us people who never stop learning I'm using itpro TV right now to learn about Amazon web services and I found 10 hours of high-quality videos about ec2 elastic load balancers orchestration cost management if I ever decide to start my own tech company I will need to know how to manage the cost of my servers go to itpro. TV / SE daily to get started with a free 7-Day trial of videos you can then use the promo code SE daily and get a 30% discount and that discount is permanent watching these videos I have learned how to configure Auto scaling groups together with load balancers
configure a database that can scale up without inconsistencies if I wanted to test out of the Amazon sis Ops certification right now I could there also courses about Microsoft operating systems in networking VMware virtualization Cisco routing you can watch 70 hours about Cisco routing and switching and it is engaging an entertaining material if you listen to software engineering daily all the time this is the kind of material that you will love you could put it on in the background and you will find yourself just absorbing the information without even realizing it you can try it free for 7 days go to itpro. TV / SE daily use the promo code SE daily to get 30% off and after you try it free for 7 days I have no doubt that you will want to continue to invest in yourself and your future
thanks to itpro TV for sponsoring software engineering daily and for producing this top quality content
 Diego Oppenheimer is the CEO of algorithmia Diego welcome to software engineering daily Marketplace for algorithms describe how algorithmia works so they can publish their algorithm using either online ID or comes available to buy any client wide-range everything from web scrapers to video Splitters to machine learning models to natural language processing I'm really have a wide variety of algorithms for a lot of different
 what are the most popular ones image computer vision and natural language processing have been really crazy. I understand even though the complexity of the Albert of them is not easy for everybody to understand but you know that if you go to put an image in your going to get a tag for really excited when they can play with these kind of developers on algorithmia are writing algorithms and other developers are consuming them and building new algorithms out of the pre-existing ones describe the workflow and the motivations of the developers on either side of this Marketplace the development of writing algorithms in the ones that are consuming it to you know on the supply side right
 out there and the easiest most concealable for impossible think of it as you know you don't but you know I'd option of that really require somebody downloading it getting all the dependencies working setting up a service for it to adopt if you use algorithmia now you can kind of you know you put it into our system publish it we take care of all the operator operationalization and now you have a scalable running service that's going to be available for anybody to be able to use it on top of that you know if you're motivated by actually making money off of these then you have a possibility of also charging making available and in the marketplace and get the same way that an app developer would post something to think about that you know the iTunes store or the Google
 Play Store they can do the exact same thing with Advanced machine learning models or the other than inside out how to talk last week about kind of like free serverless Computing I have a lot of the advantages around that to think about this is an approach to working with Advanced interesting algorithms in that time frame work I now have access to potentially thousands of different algorithms that might not be in my air vents for cheese where I can now just call an API and use this and I don't have to worry about setting up servers easy to machines really you know what do you do at that point like you know that's a really hard process of scaling I will you take care of all that for you for the motivation is not only to find interesting algorithms that you might not not bite me in your wheelhouse or your
 standing but also that we take care of a kind of the operations part of a feeling of these has a lot of applications to this conversation but talk a little bit more about the fundamentals of algorithmia let's say I'm a developer I want to put an algorithm on algorithmia what is the back that I need to follow do I need to buy create a really well documented API or what exactly do I need to do to support something that we call and apply function what really that means is inside the supply function they can just read off of that apply function and make sure that we like that our system can actually automatically generate the
 who is really Define well the supply function terms of these are the inputs and then you know you in terms of documentation we provided essentially I gave us work from a bunch of different people you can't describe how things like that requires access to the building that our them so that they won't have access to the security feature really allowing people to work with
 let's say I want to use algorithmia to get better indexing and categorization of my podcast episode so I kind of want to go through like an example of how anybody could use algorithmia so I have all of these audio files of podcast episode all these episodes of done and let's I want to use some algorithms from algorithmia at to send the audio files through a labeling process I want to get to know I want I want all of the audio to be indexed and labeled and I want to understand which episodes mention apache-spark or react JS are Docker containers how could I use the algorithms on algorithmia to build that short a framework when all I have today is just these raw MP3 files
 I am so the idea here is the first thing that you would do is you would run the different all the different MP3 or speech-to-text different universities and they were depending on what the training for those album
 so this is where the park is really interesting now you can start applying different natural language processing methodology ization process example which in a lot of cases which is all the words mentioned in this text and tries to pick out what might be the actual topic of the text so this will automatically generate some labels for each one of your podcast by freak out computer typing. Cloud this is like one of the first pass you would do to be able to extract
 set of documents by a large set of documents and we analyzed all of them in the context of each other maybe because you're a software engineering podcast like the work computer so that's not really a topic right of your podcast like that's kind of like an overarching
 Hakeem of a lot of your pocket so it would be prioritize those and it would reprioritize other labels hire that would be might be more specific to your pocket or you could grab that and you might be able to write the back to the metadata of your actual podcast file so you can use them in some sort of filing system right next to the great for the situations that you can actually really until you do is categorization exactly like you
 so what is happening on algorithmia servers during each of these call so I can I can imagine my server the first letter F and I kick it to the album a server for the first which is the speech-to-text algorithm so I kick the MP3 file and then it kicks me back a text read out of the audio in the file and then the next thing in my workflow I can have the de text of that episode sent to algorithme a service in algorithmia kicks back some combination of I don't know that the tf-idf algorithm or the the labeling algorithm explained what's going on in algorithmia servers during each of these calls
 sending stuff up and down from your system like too many times so we usually do have a date so that you can configure your script or application you would push the first file to know the first audio file into algorithmia we would receive it we would put it inside the cabinet send it to the first hour that the way that works is as you hit are API we send the signal to a what we call a worker note to say hey this is it that's going to know it's being called by this client and they're going to be sending you data and we want you to start processing this in the problem what happens there is actually we create a container from scratch we upload you know the Powerball of the algorithm into that container deploy it to Route it to a worker note and routing is fairly complex because we wanted to be as close
 u.s. possible so think of it is kind of like a CDN in another repeat this process but now that we process the first year that the first file now we have a text you would have indicated that text to keep it in memory or to keep it inside the algorithm yet and I'm not into the next process we would have put the start processing that work and that's over and over and over again how the system works which allows you to really do be like in parallel
 very high-volume so that you know you have a lot of podcast you could do them and you would never want to do the serial you to take you forever how much would this cost for each call like how much would the financial cost be to in general the algorithm cost of depends on two things one is the computer I'm very similar to an AWS Lambda or you don't like Frameworks that you've heard of on there's a cost per computer the file that gets charged anytime they want to charge us a royalty or their algorithm and in general these are very very low very very low numbers
 be able to do this type of computing especially when you start looking at the time savings that it gives you by just being able to not have to build a structure around it and developer cats and the cost per second on the computer said that that we charge to paint a picture for how cheap these things are if I pay a dollar I can purchase 10000 algorithmia credits of the smallest unit of royalty I guess is is one one ten thousandth of a dollar show show let me know how much do these royalties typically cost like for an image processing out for the best for the best algorithm if I've got the best image processing algorithm for some specific thing does is there some sense of Monopoly pricing or do they competitively priced even in those instances while at the free market place and one of the beauties of a flea market places
 you know Dee. The other prices will get you no Push Up and Down based on the quality of the right to like this concept of developers want to make her work available and cost and really you're only paying for your second of compute on the flip side of that you know what the pricing ends up being really depends on what the volume is expected so let's think about an image processing Albert and like you mentioned in those particular cases the price per quart
 that you make it up in volume four more complex tasks let's say you know a recognition task on some sort of you know like that like prediction or something we had some security auditing algorithms that were you like in passing fineries or website that they do a security audit those can be up to be a lot lower 20 maybe run a couple hundred times a day or freeze in this world of paper call in and we help developers kind of by showing them examples of other similar out for them to them to help him with pricing it's very easy to search for pricing for all guns on our site and look at the pricing for each one
 you'll find that people will tend to go to the price and my impression is that developers do not have to open source these algorithms they can choose if they want to open source them crack to the main principle Define arrhythmia is that developers control their IP all the way through do you want to open sources great we have all the tools to support you open source do you want to keep it close or want to charge for it at the absolutely fine as well it really comes down to the developers have control of their work and they will always have control of their work
 algorithms on algorithmia can call each other how does the price compounded how expensive can algorithms get there anything unexpected about how they would work or do they just kind of compound natural like I called I called an algorithm I just get price based on that you can just explain that a compound that way so let's say you have a URL you know Oddity algorithm and what I mean by that is it maybe but it does is you give it a URL and then it crawls spell entire domain and then it'll you know and then for each page it will analyze what the text on that page is with a key words on that pages and summarize the text there so you can see how this is kind of like a new kind of like a tree of call that's going to be built under it so you know it's going to be
 read it that's going to be pretty expensive car if I send it on my personal blog it's going to be on our end so you can run an algorithm and as soon as you run it you're going to get a audit of the entire tree of the calls I made on your account page so you'll see the entry point all the algorithms that were called under it and then how long how much we charge for each one of those and you know in the case of them being four different algorithm developers the royalties go to the different depending on how there's work all so it's a very direct relationship or being called individually from your side as the person calling out of this big chain of our you get to see exactly
 and this is kind of like what the Costco's on running it on this process so now I understand how long this is going to take or how long or how much it's going to cost me
 have you ever had a situation where somebody creates an infinite Loop like an accent maybe taking all of the money from a customer that makes a call we can we have not done that week so we have a lot of stringent controls internally for this so we statistically analyze these and keep so we'll go back and look at it and so if the if there's any situation where something like that happened like we would go back to be really hard to do because to be able to get charged the process has to complete so you know we and then you know that's built into the system and show the combination of those two things you know allow us to go look at it
 and we're very fair company to developers and so anytime you see anything that shouldn't have happened we've gotten back do you think there might be some areas where somebody would write like some new way to process an image that the best way to process images for some specific thing and then since it's so good at that they also just put in a little code to find some Bitcoin and you know just to have the best image processing our room it happens to mines Bitcoin also the for them like would there be anything problematic about that show I mean in general you know
 it would depend on the way we do is we looked at a lot of these algorithms from a statistical perspective on like how long the running how much CPU time they take how much memory and we understand pretty well like what is normal what is volume in the quantity of perspective to detect these things and when we detect those these things as we go and correct it
 so what time it has some software Trends have affected algorithmia and Inspire day perhaps choke you mentioned that whenever a calls made to Naga read me an algorithm a container is spun up have you been running on containers since the beginning of algorithmia Tina Rising everything and it's kind of been like you know why one time I'm pretty sure we were probably one of the largest production users of of containers as the quantity is the Amazon ECS service for containers
 actually wrote a home Brown container service that's very specific to how are training them together like this very specific routing and resource management needs for our type of system so we actually have a home brew system that we've last name so when you look at that system versus how Docker has developed or maybe how core OS rocket or maybe there's another container technology these these other technologies have the advantage of the network effects and the hive mind of a giant open source Community working on them so how does that compare to working on your own home-brewed container solution
 oh I see so do we we are heavy heavy heavy users and have been since the first couple of versions are so you are at work right now I see cuz you were contrasting i c d c s u c s is kind of like the analog to kubernetes or doctor doctor swarm would have none of these at the time when we were filming about her at me I had the security requirements or the heterogeneous resource management requirements for the routing and scheduling requirements that they were being developed in a lot of them potentially would be a solution for us today and we're always at the Forefront of understanding every single version of these that comes out so that we can consider hey should we make that transition over into as you said you know we want to take apart of we not only want to take part of this community want to contribute to the community you know we develop some really interesting technology that we would like to contribute
 UNC open source because we use it so heavily and so we are weak weak weak you are so you know very aware of all the advancement and not only itself which is the environment that we working at ease and the different orchestration services but we would depend on any of the storm runs on multiple clouds were the point of inspiration you were looking to when you built that orchestration platform because my understanding is that these things are incredibly hard to build and that they take a lot of experience to build properly was there some said experiences you had that did gave you enough specialization in container orchestration or did you have somebody teamer tell me how that for castration development progressed
 I really was the work between the doctors of doctor at their previous jobs and so really just being aware of how the they were talking about you. What the future plans no understanding what the future plans for mental picture of how this needs to work what we're going to be the problems and
 really being dedicated to solve those one by one as we went allowed us to get to the point where we're at today
 Shopper Engineers are always looking to automate their work software automation let us get more done with the same number of resources investment automation works the same way wealthfront is an automated investment service that relies solely on software to acquire and manage client accounts traditional Investment Services have many humans in the loop advise clients and taking fees the problem with these older advisory Services is that the advice that the services are applying is often so systemic that a computer could give the same answer or an even better answer wealthfront takes a new approach with software-driven automated investment that provides better returns through software engineering go to wealthfront. Com SE daily to get a special offer for our listeners $15,000 managed for free when you open your account don't pay commissions and account fees maximum
 your games with wealthfront set-it-and-forget-it investment automation check out well front.com SE daily it would support software engineering daily and it would also introduce you to the world of automated Investments you can see if you like it or not wealthfront.com SE daily thanks to wealthfront for sponsoring the show you've been a loyal sponsor we really appreciate it now let's get on with the show
 so when you compare
 the platform that you built to kubernetes and Docker swarm and ECS what are the advantages that you see of these different platform since you sent you since you been accessing them do you have so much skin in the game here I mean I'm I'm always curious about any we've had we had several conversations on the show about these different container orchestration platforms is awesome Asus Revenue measure message how are these different things compared in your eyes what are the strengths and weaknesses of each platform so you know it was really about what was argues case right understanding where was it security really proper Security in Docker container Sanchez come out until like version 1.8 and before that it was really really
 mean for etcetera Etc in so that was kind of like part of what has driven us is like how can we guarantee Security in the second big one for us with Rowdy you have to think about whatever resources are available for us it's let's go back to the podcast you know actual example that you know we talked about earlier if we had to build that all into one Mega algorithm microservice right we need in your calling all these different need to grab those I'll go to them and Deportes to play them into available resources but we also have to put them in the closest place to your data we also have to probably put them all on the same machine or very close to each other because the algorithms are calling each other so there is a very
 Pacific use case in terms of routing and Ani orchestrating these things together that we needed I was just not available in the orchestration system into it was a lot more about you know what are particular use case was which is pretty unique right like this idea of me every single I wear them and then still having the system be smart enough to know put all those resources together in one place that we were just not seeing at the time in India other medications that said you know kubernetes is definitely getting there would be able to talk a lot more eloquently about exactly you know where they are you know today and because of that I know that we've been like the closely following then cuz it's getting there
 Clarity that was needed for our system is it's getting there on the Xfinity platform but do you think that the long-term view of these are construction systems is going to be a winner-take-all market like kubernetes is going to be the defect orchestration tool you use or is it going to be like where May shows is useful for some applications and kubernetes is more useful for others and you know I mean cuz you just described the fact that algorithmia has a very specific use case that we know what circumstances were such that these other platforms maybe don't we are not as good fit for you but any what do you think is the is the sector-wide trencher such thing as The Winner Takes all the software world
 it just doesn't happen right like there's always use cases that have a much larger market share but for the time but I don't think there's a winner of my you know that's all I play here I do think that you know there was going to come up is going to be better for one thing or the other and I see you than most companies like with any other software development different parts of the organization are going to use different Frame Works for one reason or another because it's either the experience that the team has a built-in that it's either because they have a general even if one is particularly better than the other it I'm just more well-versed in one frame work at the other than like I'm going to be more productive in that frame work and so
 in general don't feel like there's ever a Winner Takes it all in the world of software to the cloud service provider discussion too because a lot of people these days it seems like go go with AWS because they've experienced an AWS but these different service providers are building out extremely differentiated services in NN obviously you know like I think you should you decide without resume your multi-cloud I don't know maybe you want to talk about that some maybe you fell over from One Cloud platform to another so would like they're certainly not winner-take-all Dynamics their data is worthless without algorithms over there worthless without data right I don't think anybody would argue that one of the big design principles behind
 is actually really heavy and expensive to move around but computer is very light and cheap and so when you're working to bill you know a company or service I'll be getting our process large amounts of data it is not realistic to assume that the company's card companies whenever they're already made either. Be sure after my sequin cool computer or files in the sewer or whatever that is are going to be moving that to the cloud you know just to do one task back because that's an extremely expensive task to do on the other side of that it's very easy for a system like ours to deploy compute to any of these Cloud providers and data center as where your database is or where your data store is and see what happens is that now that whole concept of like why would I use
 direct me to work fast what do you do at latency well that discussion kinda goes out the window when you're in the same because he's going to be you know pretty relevant at that point in making these calls and so that's the general engineering principles
 this displeases to the server list discussion touch not a little bit earlier serverless Computing seems like it like at the perfect model for algorithmia a year for those who don't know circles Computing is sort of like you were correct me if I'm wrong on this explanation here but the gist of it is you no longer have to think about servers or containers as a developer you just think of functions and you make a function call and what happens on the backend typically today is some container get spun up for a transient amount of time the calls made to the server and then it's spins back down when you're done with it so maybe you could tell me if you think that definition is accurate or where you think serverless Computing is evolving to you and how it applies to your business use case
 whole ton of really positive things around this concept of circle is 2 feet what you think it's funny because obviously there's tons of servers involved but like I'm not managing the servers therefore it's kind of like the machine but that's fine too into the general idea here being yes like I think I think that's definition is good and there's a bunch of the servers which is an extremely expensive in a lot of cases when you're operating at scale something that requires a lot of software development a very specific item
 when I call it and like got to make my life easier because I can concentrate on doing like what my specialty is which is building this application building this were castration service whatever it is every call to an hour of them is a serverless Computing you know exactly what it is and you know there's there's a ton of advantages and in the terms of that not only on the operation side of things but what the level of utilization of ec2 machines for any machines in the cloud is for applications and let you know there's obviously examples of companies using you know who is the queen most machine shit they're getting paid for that you're paying per hour Amazon has a 20% utilization 90% of the day and then at some point it has a huge Spike
 but because you need to be there you want like like it's not good enough to just scale-out one that's by comes because now you you know you since we missed this but you're not going to be able to respond to that and so deep like what ends up happening that you pay for resources on a constant basis just to make sure that you can deal with it with the spikes in traffic or in the space of utilization in the server was Computing world you're only paying for what you're using so there's economic advantages of using well it was Amazon Idol machine but they're like what what do we do with it maybe we can rent it out I mean that's how it started and so you know you can see how they like even you know the kings of the class
 Pinkberry Nigeria like in the world of computing in where I think the future obviously of the cloud is going which is why am I paying for stuff you know where in the world economy as well so how long till we get to this dream of having a layer of the Show recently called the about the Service Spring working kind of the long-term view of the serverless framework is this framework that you could build your application with and you make calls to the type of function that you want and it will figure out which cloud provider has the cheapest computer resource at the given time and this is like the dream house
 Super Bowl are we ever going to have this thing actually funny that you mention that was exactly how it was intended to work which is to do Arbitrage on Computing right across multiple card for buyers to wherever it was cheapest differences between your Google yeah I'm just going to consider the three big ones because everybody else and their pricing is like terms of the Computing price is driven by electricity and if you look at what Amazon's doing it with Microsoft and doing and what you are doing is that they're buying
 pieces of land so that they can put data centers next to nuclear power plants next to Dan's next to so like where the cheapest kilowatt of electricity per hour they can find so the margin I'm Computing is really driven by the price of electricity and cooling right and so they have a natural Advantage I think there's a natural advantage to be 3 pick players because they have the ability to make a capital investment right to be just as it's a fun game to do which is going to Washington state with Google Earth go look at the where the power plants are and where the damn that's around what is inside them and what happens to be
 bear just searching for the cheapest kilowatt of electricity possible when you're looking at the damn man you hired her doing that that that that circle is Computing you know I think it's like you know we were looking at doing garbage out there so similar in price that like the amount of engineering that we were putting into doing like kind of the Arbitrage part which is not worth it because we found that just you we would just pick one which in our case most of our workload is made up you ask happens to be the most of our customers are native also going back down since you that's why I could pull for pricing of the different computer centers and wherever the cheapest unit of computer
 I just end up playing out to be the you know the most effective engineering wise for our system that's a pretty significant you know it was amazing it would be to like the startup also right so how old is I mean how does the construction of a server Arbitrage system compared to a I don't know options black-scholes Arbitrage thing or whatever you were doing at the automated trading start
 it was a really nasty VBA code in Excel hooked up to optionsxpress and executing I ordered resource allocation in so Kenny's you know work as part of his PhD as at USC how did marketplaces that did you automatic resource allocation for transportation units like taxis and buses and stuff like that and that methodology of looking for pricing differences but also considering things
 Ranch and it's going to be in in like are you going to beat the cleaning out there and how much time is going to take what he was designing then what I was doing and inspiration came from directly from that I can think of are GitHub and kaggle and GitHub is of a free bazaar of algorithms and kaggle is sort of like algorithm but it's more like a machine learning specific Marketplace when you look at these other kind of marketplaces or bazaars what do you think of how to set contrast with algorithmia in the marketplace Dynamics it algorithmia to put algorithms quicker
 right so we're about production applications and so this is where like that you're the big difference is going to come out so extensively by the way you know it's about you find a great resource for Community Building posting you know having feedback posting you know the life cycle of a code repository but at the end of the day if you want to get something working from GitHub you're still responsible for downloading the pineries Tendencies getting your machine working starting easy to servers or wherever you're putting them getting that up and running and the application so the time between production there's a whole bunch of operations that you need to do as a developer to make that happen and it could be a short.
 boy you hook it up at your application if you want to go into production 10 minutes later you get to go right that's one big difference I don't think there's no we don't see good habits competitor we see each other as very very complimentary you know you on the flip side of that solving problems in the data Science World the machine learning world show that you get better results and really bringing in a community of very very smart people who get to do you know it's not a production systems what's the result so you start a petition to solve some problem get a bunch of participants and now one of them is on it they get the best results
 fire the top team as consultants to go build that internally so again it's not a production environment it's not about getting things we want to really smart people so we're going across or knowledge of the world to solve this problem that you have but then once you actually but the next step you still have to go either put that machine learning models production or you need to hire the people who runs as consultants in up the cable again it's not about going from 0 to working
 instantly which is really what you know where it what were the kids will die out really as which is we want to make state-of-the-art accessible in discoverable by everyone and so your developer you find something you should be able to go to production as quickly as you can get your heat up your side of Fate working cuz we took care of the rest are the algorithms on algorithmia compounding on we talked about the fact that one algorithm can call another one so you can build and compose different algorithms together what is your sense of like how much these are compounding are they are they compounding on each other or is it more of a horizontal expansion know they're definitely compound in each other so you're getting higher and higher level the birth of these analysis microservices on the platform that have been really interesting
 Give an example as basic as I talk to you about it and you know it's just a bunch of different implementations of L V8 available to function that super basic as well which is a URL and it will return it will clean out imagine another function which is the URL to text and now grab that text and freeze it and tell Jay and not return Tax Service which is an own independent
 okay you give me a route and I'll return tax and so we see that compounding effect that results in those types of things are starting to be built on our platform easiest to compounded most importantly it doesn't matter what language somebody else could have done something in and Ruby and out completely independent party to come in and be like
 and create a new service based off of it and if that's when you do real contribution what is completely independent of language completely independent of one thing I'm interested in is the fact that we've talked about these different algrove is where you make a call you get a simple response very clearly defined response that the inputs and outputs are very clearly Define the most applications that we deal with on a day-to-day basis have some longer running sense of State like if I get in an Uber I've got this Uber application that is a long-running state flag location for the duration that I'm in the car so how does this type of I mean is there a vision for how that type of application could we build and manage using algorithme at work time since serverless Computing conversations but how does that fit into the algorithmia discussion sure so couple things here
 pretty long time outs so are you know our art the lifx it while you look at the most to release Computing Frameworks like the you know the most famous want to be there so I'll bring me a sign that it's 55 right now and we're expanding that even more so we already have the ability of doing like a pretty until your Uber example would be well covered and it because I don't think anybody stay over for over an hour and that is built into our system which allows you to store state of the different helper that stole like as your Computing think maybe have like 17 different our room at the same time and you're going to do something once all of them are done so we allow for a synchronous execution of logarithms on one side and the other one is
 even when we might have already you know spun down the hours and container and we started a new one you can store the state in between the different calls and so the combination of the longtime out the data API to maintain State and the synchronous called allows you to get to that situation where almost all applications could live in this time thank you so much for coming to show this is been a really interesting conversation and I am a big fan of algorithmia thank you so much for having me I love your show as well so I've been an honor to be
