Transcription: Amazon web services changed the economics of building an internet application instead of having to invest tens of thousands of dollars Upfront for Hardware developers can pay for services overtime as their applications scales Amazon web services has grown to be a gigantic platform the documentation and the articles about how to use cloud infrastructure has become insufficient as an answer to this Joshua Levy initiated the open guide to Amazon web services an open-source collection of resources available on GitHub Joshua has experience at a variety of companies including most recently the conversational interface that was recently acquired by Samsung so he's got lots of experience to share and in our conversation Josh brought his years of experience to the table to explain the risks and the benefits and the alternatives to Amazon web services
Josh has become a friend over the last year and if you get a chance to have a conversation with him I highly recommended he will be at the reinvent conference in Vegas which is the Amazon web services conference and if you are interested in talking to him about the eight of us open guide in late November at reinvent or virgin talking to him about anything else please reach out to him you can find his contact information on the Amazon web services open guide and I hope you'll enjoy this episode I think you will because Josh is a great conversationalist
this episode of software engineering daily is sponsored by Braintree payments mobile app development can be complex but integrating your payments no longer has to be complex with Braintree your business can accept nearly every type of payment from any device with just one integration learn more at Braintree payments. Com SE daily braintree's API supports Android iOS JavaScript and many other languages the documentation for Braintree is clear and elegant and if you're interpreting payments into your app for the first time you can call Braintree customer service and get assistance with your integration don't get frustrated when you're trying to integrate payments and monetization into your app go to Braintree payments.com SE daily and monetize your app today Braintree payments.com SE daily now let's get on with this episode of
offer engineering daily thanks for listening Joshua Levy is the creator of the open guide to Amazon web services Josh welcome to software engineering Daily Guide to Amazon web services but first let's start off with the question of what an open guide is because this is not a term that is commonly used what is that what is that term mean what is an open guide we use a kind of capture a couple ideas and and one is that that this is not a standard publication like a book where you are a block or one author writes their ideas down and then everyone else reads it this is really more akin to open source software where we assemble a lot of information or tips or tricks or or other things that we think are useful and
push it like open source but but encourage contributions from anyone and in a way you get to contribute based on the merits of your contribution much as with open source software it's a pretty simple idea in some ways because we are for used to it in the in the open-source world and many of us use GitHub many hours a day and then and contribute a lot of Open Source in small ways but I think that we often don't apply some of those same ideas to to sharing information you do see some examples of this now on GitHub but this is really short of an extension of that and answer this this guide arose from some frustrations around around meeting good actionable helpful information around 8 of us and show off that that's I've done a couple of these around other topics but but this one really aroused with myself and I thought of Boss goes another engineer
and we have just just basically plugged away and then got a lot of Engagement for my community to begin putting a guide like this together why is the place to host an open God it seems like there's plenty of publishing platforms or you could make a Wiki what's special about GitHub it it's actually get Hub is this is maybe a slight digression but I think I've been in software many years and I think many folks who have seen the trajectory of Open Source software would agree that get hubsan it an amazing shift in the way that we build software and it's not an obvious one it's
it it might seem that is just a slight Improvement in certain ways on you know a better user interface on get but of course it's not that actually the real fundamental changes that it's an entire community and it up and it's also a network of trust among Engineers cuz we all have I get her profile in an identity somewhat like Twitter sore or medium and that really is helpful for knowing who you're working with and working together and in a more collaborative way across the globe so this network not just not just the user interfaces what you really valuable and it helps us know who you're working with and getting some contact on what it is and building trust around what we're beating to some of the software that is really getting a lot of presti's day I mean Eddie identity identity is crucial to Air B&B is crucial to Uber
anything built around Facebook and 1/4 of course but you be you and I have both used Korra and Decor obviously the real identity was a real was a big differentiator in terms of the quality of answers that you got cuz people are accountable for their answers unless they write anonymously which probably has some penalties for how how much distribution their answers get so it was the identity aspect of Geto Boys that one of the big drivers in terms of what made it more appealing to use GitHub then something more face looks like Wikipedia yeah yeah that's part of it so definitely identity is really means to get to get a little more trust and I think what would I found it in this is true but I think for a lot of software engineering topics and more broadly on the internet you when you're looking at a piece of information that's really important to you like you're trying to solve a problem or you're implementing some distributed systems I'll get him for your company and millions of dollars are on the line
you might want to know that that the tips that you're getting is you know he is from a legit source and you want to know who's who's suggesting it and why and there's a lot of information on the internet for people are suggesting things because they might be making some ad revenue or some affiliate revenue or or they're doing content marketing for a product of their own so it's important to understand why and how information is is being given to you and I think we we take that sofa granted this like the air we breathe online but it's really important to just to to acknowledge that you want to see where information coming from and who is giving it to you but then that makes it very hard to just start a blog up randomly and build a lot of trust and so what we were thinking was that if we can build a community of of good experts people who really have you no good knowledge and eight of us in particular then having a community review
at it and work together on it kind of build a certain level of trust so they've got that's one piece and ennin another pieces that is GitHub has this mechanism where you can see what other people are looking at BS stars or forks and that really helps you understand that something has some value so I just like medium has Hearts GitHub has stars are these things are really helpful just to know that pay this is actually something useful I'm not wasting my time reading it and I think that that gives that that that that Network effectively really valuable absolutely so we talked in the abstract about what makes GitHub a good publishing platform what an open guide is what about AWS why is why do we need an AWS guide and what is insufficient does AWS has tons of documentation probably probably one of the significant differentiators between AWS and the other class
providers at 8 I think it was one of our first mover Advantage comes in as I can be your first mover Advantage your documentation is going to be better but what is insufficient about the official AWS documentation right it's it's a good question and I think if you actually talk to a lot of folks who use AWS tonight I should digress here for a second does a dominant infrastructure-as-a-service provider so there are a lot of Engineers who use AWS in small amounts or in large amounts depending on the jury to that company is engaged to this is a big a big a big Market in the and it's also very complex product so there's a lot of people with this pain around figure out how to use AWS or solving specific needs and it's not just beginners and it's not just experts really across-the-board cuz it's a complex product and fundamentally out again if that's kind of a line with what where the information is it is his health is helpful and where it where what it covers
so a lot I think if you talk to a lot of Engineers you'll realize that they often have certain pieces of knowledge they would only get by asking another engineer they really trust so trust is important and then go over to get him a beer or something like that they'd be like hey how did that work out when you migrated from your on-premises data center at 8 of us and they would tell stories about it now it might seem just like a beer but actually really really useful because they might say a lot I use this provider I use this tool and it really worked out poorly for us because of this reason for that reason. No one writes blogs and says that usually partly because they don't have time probably cuz they don't offend people in a lot of reasons but you do get that information over a beer and and that's really valuable in it so that's one category of things I really think it's like the beer test it's like imagining you have 30 minutes with an expert what do you ask them over a beer and you'll realize it's barely something you can Google for and and so we
play were thinking that the AWS in particular is isotopic where there's tons of God chose it's just a complicated system and there's so many end of the gods are often have high cost you might architect your system in a way where it's really hard to secure and then you have to pay a lot of engineering effort or time later to fix that or you may put it together in a way that is not highly available and you don't realize until something goes wrong and and if your head of devops or something like that you're you're you're next on the line or at least you feel that responsibility and show people are we have a real sense of wanting to build the best products they can but are often running into questions are roadblocks and then finally there's another category but I really think it's just for your stocking it's just like I'm sure there's like a few people in the world to know exactly the solution to the problem I'm having right now and I don't know how to find them or how to get that answer I think we've all seen that right so I can XKCD comic I think this
best about someone's like seeing a stack Overflow question with no answer and they're like what did you know like why why why I have exactly this problem I think it's if this is true in general and software complicated but the stakes are higher and the surface area of the products is much higher so there's a lot more details so is Amazon's best interest to provide the type of information that is in the open guide or is there some is there some point of incentive that is the difference between the open guide and the internal AWS documentation that leads to differences in the the material that is in the documentation the official documentation versus the open guide yeah so it again it really does depend on in Reno to the information that's on the web is on there because it's in someone's interest for it to be there and and Amazon really
does have an interest which is a Univera legitimate very helpful to make sure that we all understand how to use their products they are a little less incentive I have to tell you when you should use AWS vs. use another solution so if you look at a table your documentation they're really quite exhausted by giving you the details but they won't always tell you you know maybe you shouldn't be using this particular service you might want to use unopened star salvation cuz you'll have better control so if you're wanting to I'm just going to pick an example at random but if you're wanting to to use elasticsearch should you to play yourself or should you use Amazon's managed service or if you're wanting to use math predict mapreduce should you to play yourself or should you use EMR those choices are obviously Amazon would like you to use all their service is all the time so they have lots of blogs telling you why they're useful are accurate but they're not you can't they have their just never going to mention the situations where their products are not delivering and I think I think that
it really helps this again the beer test would be you would ask your ex boyfriend over a beer hey is there another solution to this or should I be doing it this way and that's really helpful so so we do try to cover not just eight of us details like how do you do x with eight of us we really try to cover an overview of like when should you use AWS what situations are there other products we even have a little service Matrix which I hope we keep expanding kind of saying what are the equivalent products and other services to AWS products and services so like if you're going to use the Mr what's the open source alternative and so on so we do try to cover those other things and I think that's part of the value are you seeing a lot of people build heterogeneous clouds you know where they'll have to use AWS for one thing that use Google for another thing to use digitalocean for third thing or or is it a big tax to have heterogeneity
among the cloud services do you use another really good question so another thing that this this whole Community is really been helpful for a subset of people using the cloud each in their own way and then sometimes aside from Consultants very few people get to talk with a lot of people know different categories so there's a category of people here in Silicon Valley you know I never thought of myself as many friends are sort of startup people so we walked in startups we're asking are you still having Scrappy small teams building things from scratch and then that sort of situation you off and want to pick something like a w a cystic nose eyes up in just apply with it completely you might consider another option like digitalocean or Heroku and you're getting started or in certain situations you might pick Microsoft Azure because you're interested in the Microsoft solution you might pay Google Cloud because they're all grown up and growing and you might have more familiarity with some of their systems but either way you pick Cloud first and just build it all yourself
that sad it's completely different scenario then someone who is coming into a large bank and realizes that their infrastructure isn't scaling and wants to think about putting some of it into the cloud that's complex some banks to put their names in public Cloud some don't if there's a lot of compliance and Regulatory concerns there's a lot of momentum and existing systems you have to take care of so it's completely different scenario Works 07 large dogs like like like existing on this is a move toward hybrid Cloud where you keep some things on premises and some things in the cloud within start upstairs. Tennessee just do it all in the cloud and not go old-school it all and then there's a bunch of things sort of in the Middle where companies have some existing infrastructure but might try to migrate fully to the cloud when they get the chance to I want to talk through some Amazon Services just because I think these can service discussion points for the typo
material that would be discussed in the open guide that might not be discussed in the Amazon documentation if I not be discussed on stack Overflow might not be discussed Encore basically I want to touch on some points that might give more exposure to why the open God is useful so the first example I'm thinking of is kinesis psych there's this Kinesis service this is kind of like a managed Kafka within AWS and Kinesis to me seems like the type of thing where I like Amazon will be very incentivized to tell you you're all the awesome benefits of Kinesis but they're not going to tell you here's how can use this compares to Kafka or here's how it compares to I don't know Confluence version of Kafka can you explain like what kinds of things might you read about Kinesis on the open guy that you might not find elsewhere
that that's not a good example I think I think I mentioned EMR versus to playing around who do clusters mother example to jump to the whole bunch of these and often they're not just a ba vs be kind of things they're off in like you know slightly different parents slightly different kinds of fruit where there is you know it's not quite apples and oranges but they're not they're not exactly two similar apples cuz they might be to solve a slightly different problems so we do have some coverage of that I actually hope we can get more soon we have a couple of new Kinesis experts in the group but but the answer to a question like that just isn't simple if it there may be a lot of situations where you just want to use the Amazon solution because you can scale it quickly and it's up meets your needs butt off and you'll end up hitting certain Corner cases or certain scale considerations where you might want to tweak things or just how they function in general and and then having your own say manage Kafka cluster where
you can Fork it like you know I can mention that the Confluence Park Row or are you can tweak or adjust parameters or you can hire experts who have a lot of ice cream you know who are in a cock-up emitters or something like that that can be really useful I guess there isn't a simple answer in the sense that there's no no one's going to tell you with a 10-second conversation what you're what what choice you should make but there are good reasons to pick Kinesis versus not and sometimes a hybrid maybe you want to use Kinesis for one that piece of your system and not for another and really was just a matter of summarizing a lot of those use cases so we do we do have some Basics about when to use Kinesis and then we also cover gotchas which item and I think that's one of those things supplies open source as well as to have eight of us but but I think that knowing what some of the gotchas and warnings are about a particular service are really helpful when you're making the consideration of what it what it to use it I'm personally not a camisa
places to tell you off the top of my head with our top got yours and Kinesis are but but you can check them out if you check out the guy and there's there's there's there's definitely there. They're still pissed at all let me know if there's two advantages to Conesus and disadvantages to cough Gunners advantage of other Solutions but but it's we're hoping that by again I get a few more Experts of our coverage of nieces will even approved we have we haven't we have some pretty deep covers on some of the services and I've noticed that as thick as it expands its start of the gotcha section and the kind of the tip section just will off and have really critical little details the kinds of things that you know might save you not just ours but maybe days or weeks of effort you know if you know them so I really love to see those those get added to the guy
show you've got a bacon delivery service and you need to notify your customers when their bacon has arrived at their doorstep twilio helps you make sure your customers get the bacon while it's hot twilio's programmable API let you build SMS or voice alert easily in the programming language of your choice all in under 5 minutes with only a few lines of code now your customers get a text or a call the instant their bacon is ready if your customers want to see the bacon frying on a hot pan twilio has video api's and SD case for the platforms that you know and love learn more It Go. Twilio.com podcast and get an additional $10 when you sign up an upgrade your account that's go. Twilio.com podcast you will only pay for what you use and it cost less than a penny to send a text get started at go
no. Twilio.com podcast get your bacon delivery service cooking with twilio's API for Voice SMS and video
 another area is the Amazon ECS the elastic container service which people on AWS might be using in place of something like kubernetes or something like meso swear I think it's interesting because ECS it's it's closed source so it's not going to have the same kind of aggressive Community adoption and evolution that you're going to see what something like kubernetes and at the same time it has lock in so if you if you if your system over time you know the evolution of kubernetes really outpaces ECS and then you're locked into this close or solution then you know you might start to lag behind other people who are
 running on kubernetes so I guess with with that is exactly the case is also an example of this
 what's the narrative what is the the true narrative around lock in for Amazon because I heard I heard a podcast where there was a an AWS executive who was talking about how they really don't try to create lock in like the walking at the creative with some Services is just coincidental with what they're building you think that's accurate yes I think you're really hitting on the question of lock in which is a really really important one in fact for some companies that can be like life or death almost so so it's not for all companies it really depends on the business but but but actually that is one of the areas in his phone is not working on this what we were really thinking a lot about how to structure and highlight pieces of the guy that I think that one of the things that's been pretty helpful this is having these specific types of tips highlighted and one of them is lock in because again you're not going to see
 this highlighted in loss blogs or most inseminate eight of us. But you you do sometimes have choices you make that are not going to lock you in too much for example EMR in this example yet again is is pretty compatible with to do so if you want to migrate your Hadoop jobs that you currently have running on EMR to your own cluster it's a very manageable task similarly if you're using an interview to plug your database to RDS and you're having Amazon manage your postgres database that's very manageable to just move it to your own server should you ever want to other services are not that way and in there they may be out in a lot of value in this doesn't mean you shouldn't use them but you should also know that you're making a choice where unwinding that choice will have engineering cost and that might be time or money or both so the width with a lot of these services and some of the ones that are more cutting-edge from Amazon and I would say
 super simple Lambda where there's a lot of adoption it's really helpful and its greatest value but you should also be aware that if you write all of your code in a way that's very tied to Londa then.. That is a certain amount of locking you're going to have to accept either accept or be willing to pay to undo in a in a pretty expensive wait later from Lambda come from cuz she's like you write your code and then it just executes on random server somewhere and that sounds like it's very convertible to Google Cloud functions or whatever it's called I think it's on the on this kind of Grey area is is Amazon Linux a lot of people do to fly with Amazon Linux on their deployment in Amazon and that really makes a lot of sense cuz Amazon support
 you a lot of confidence that Amazon is making sure it's going to work as opposed to refusing Ubuntu where are send toss it one of the other distributions so it seems like a great idea but then like slowly subtleties will start to be built it baked into your code based on dependencies are assumptions around Amazon Linux and similarly I think long does a little more than this so did it may it may be in principle that a lot of your logic is written in python or JavaScript and you're like well I can just move that to other functions but the entire cycle of how your building a system including the people the deployment the team the the way you do your stance integration the waiter testing once you take that it look and look at it holistically you'll see it's very shaped by the infrastructure you're using and for you to suddenly say oh I'll just pull that out and put it into a new a new framework it's not going to happen overnight and as soon as you start playing it on your mind you'll realize that means oh that's engineering cost in that is locked in so
 you might I don't want to be negative on that I'm using those Social Services because in some ways by saying hey I'm just going to play this with Lambada and move forward as fast as we can you may be able to move a lot faster and do things you never would have been able to do either in terms of scaling up fast or shipping something quickly so it's an amazing tools kit it's just that as engineers in as Architects or as URS we all have to think what are the ways we get to where we want to go and what are the risks of how we get locked into a particular path so often it's really just a complicated trade-off but I do think that often does choices get made without being mindful of them so your you just like hey Lama does the new coolest thing let's use it in that that's a good that that could be the right choice for you but it's good to think about it perhaps I think this this often applies more to larger companies to if your three guys in the startup in your life in a pinch you might be able to be right all your code from AWS to go
 louder to something else if you want to it's not really going to be a dominant factor for you but if you're if you have a thousand engineers and you're at a Fortune 500 company and you're making a big Choice around how to piece together some of your infrastructure those sorts of got that takes a lot of time to move that that big ship around so if you are making a choice like that you want to think through what the costs are and when you know what what the cost would be if you need to change that you have to admire the sophistication of the decision by Netflix to go so hard to accelerate so hard into AWS it just like for like full full force just adopted relentlessly and I don't think you see a lot of people other people do that cuz I mean Netflix and they just blog about it yet yeah we just use you know we just use this you know this Amazon
 Weather Service here and then we build our own thing here and I still don't have a great sense for how Netflix makes build vs. buy decisions I guess I mean do you have a sense for that in and I think that has some reflection on this conversation because it is you're saying like there are some copies for which AWS is life-or-death I think those those companies wear a w f a w streets of your margin that can be really important if you're commodity type of business but Netflix is less let necklace is so differentiated that arguably it's not a commodity if they needed to raise price is like really needed to raise prices they probably could so I mean thank your hundred percent right so the lock in consideration it's one of the many considerations when you're picking it out the infrastructure using but but the lock in consideration is fundamentally an economic consideration because it's really about saying I don't have the flexibility to change my infrastructure
 which means that I'm giving my infrastructure provider a lot of pricing power they can raise their price 10% and I can't use them 10% less I have time all in I can't change my mind and say all use a little bit of the other infrastructure instead so that means that there's a certain balance of power between you and your aunt and your vendor which is unifor cloud provider and that's true across all kinds of vendors if you're if you're in business and you're using relying on a solution that's kind of all the in like that and so if you're doing that then that if your margins are very you know it you know it incredibly high and I think if Netflix is in this category and you have a lot of business and you negotiate good rates which I think I'll need you know it's pretty obvious from the outside of Netflix is such a a flagship customer customer I'm sure they don't pay the same rates at some customers then then it can be really a great could be a great move for you because you're getting to move faster and out execute the competition which Netflix is doing they ain't they their product is you know just hadn't told us
 about the Alternatives in a lot of aspects right so that their variable to emphasize product and they don't have to be worrying about every penny they're spending on infrastructure a lot of companies are not in don't have that luxury or they might not have the luxury in the future and so that so it depending on how they're planning the scale so I think it's really you'll hear people debate Oak stake never use cloud are definitely anyone that doesn't use cloud in a public clouds like 8 of us are Google cloud is is an idiot I think it's far more subtle than that and it's really about a business decision and it and it depends on your business the open guide has a lot of material not just about the specific services but there's plenty of material about how do you manage an AWS deployment and how does support work on a native AWS deployment don't talk about those issues what are the biggest challenges of ongoing manage
 Kevin AWS deployment what are people talking about in the community where they say day today X is the most frustrating thing about running my ongoing AWS to Playmate perhaps agnostic of cost right right so I think there's different categories I do think cost for some companies is a big one but if you sent that one aside then I think first off a lot of people are thrilled and happy comparing their Solutions in AWS compared to you know old school solutions they may have had to struggle within the past so there's a lot of positive you know about flexibility from manager managing your infrastructure as code so you can scare you can scale and deploy things differently so so I think there's a lot of positive aspects the negative aspects I think it's an entirely different world and the echo system of the tools you use to manage your weight of us infrastructure is pretty fragmented so taking
 examples things like configuration management a lot of people are traditionally used chef and puppet to manage to stay down there servers not a lot of folks use ansible or saltstack as well and there's a few other smaller Solutions or things you can bake in a build your bake yourself at the choices around what way to apply those different tools is really hard to know you almost have a certain amount of lock in with those tools themselves and so you might go all in on Shepherd puppet and then realize that you have that you know there's some challenges that you wish you could you could work around but you not going to change at that point so I think that the tools around managing the infrastructure and how you scaling and everything from cost visibility to managing and slicing and dicing your cost so that that includes things like well which department to spending what an AWS to things like reviewing your controlling what deployments you have so far reliability or high availability or processes or compliance to
 to actually just enabling your software engineering team taxi you can build things as fast as possible all of those are dependent on the way your building and applying your code in the tool you're using support. And it if they're just sleeping a lot of options and every vendor will tell you how why they're the best in every open source package seems to have a great community of people telling you how awesome it is but it's a little hard to know what what should you do if your in a given situation and so I think we're just trying to cover a bit more of that interstitial information so they're saying well here's Big Picture you could choose for configuration management one of a few of these tools but here are your goals like yours how to help help you think through it and and I think it also again past your gift comes out of that getting a beer test you'll find that very often Engineers when they're like talking about these things over beer exchanging information around like hey what happened to let you know how did it go when you were using ansible
 and I'll say yeah you love ansible for configuration management but I've had trouble using it for provisioning because of X and Y a good piece of information right I think that the trying to share a little more of that information in a in an easy way is helpful obviously you can't cover everything that you would get over a beer like that and some things are very situation specific but but it it's been our attempt to be in putting a lot more of that I would call tribal knowledge down this might be a good time just to mention one little thing we've done since we launched this more formally ask him 2 weeks ago was on this month. Is we have a slack Channel as well and I think that often some of the things that are a little less codified a little less clear and not clear exactly how you would write them down maybe because not all of us are experts are we don't have the full experience is we just chat about it and then off and will then after a couple discussions with it you know a few people will have some ideas and be like well actually seems like we should summarize listen to
 this is important so does the does the knowledge from the slack Channel eventually get congealed and codified into something to eat put on the eight of us open God that's on GitHub yeah so it big picture I mean maybe this is a good time to kind of mention our supervision for this enough to be honest I've been kind of working on the guide but in some ways where we're building something that's more than just a text file right to an on GitHub is just a text document to Danny people might be just be like is that all there is is just this text document so but what really is the value is that we have a lot of readers we have a lot of contributors for over 70 computers now maybe 80 somewhere in that range we have folks who have expertise in specific areas have attitude a lot of these pieces and because of that really we have a lot of value just with the community and I and I think that in some ways it's our ability to share that knowledge and begin assembling it into the guy that's just as important as what the guy looks like right now just like
 open source to write the open-source this is a process in the no way you're making something better not just the piece of version of it the code you're using today and so we would love to see his is building up that that process right where we have the ability to chat informally about anything just like we would over a beer but then we are also capturing it in the guide with that mentality that this is useful that I'm having this problem maybe a thousand other Engineers around the world are having this exact same problem and maybe we should put that down in a way that we can law look up and search for turn it into more of a platform something that's more like a Wiki or it's actually very much already is this so so get humping away is a collaborative editing platform we already have it right there anyone can file a pull request and I invite any listener who's interested please do read it if you see an error if you see something that you think you can make better
 all requests are welcome everyone and then we can review it in so sure I review a lot of things we have editors who are topic experts on a bunch of topics so anytime someone comes up and they're like talking about VP season. I know that you know the guy who knows VP season death in pills give it a look and held you know he's he's one of our experts that similarly for a lot of topics like that so it gives us a way to review your contribution contribution come over and put something in and then secondly maybe you look at this but you're like I'm not sure about that but I'm not really sure what to change either that's when you talk about it and that's what the slack group is for you might also just have a question you're like I'm really stuck in the guy does not answering my problem I wondering how do you know get this this this load balancer problem I'm seeing you understand it and that and I simply don't understand why it's not working this way the doc say it should and it's not in the guy that could well be a gotcha that a lot of people are
 so you could ask them stack Overflow and you know if there's no harm in doing that but I think that you might find a lot more benefit by joining the slack Channel talking to a few of us is a lot of us are online all the time figure out whether that's a reusable tip and then we sold it into the guide so we're building a we're building this knowledge resource based on actual discussions and I think so you can see the slack is like that Community aspect of of the writing that we're doing consulting and support ecosystem around AWS is quite fascinating I mean if your if you have an AWS deployment and you can't you know you you've got the option of like if you're in a situation like I owe my appointments breaking or it's feels insecure something you've got the the choice of using the Amazon you can use Amazon support they have support that I'm not sure what the quality is like I imagine it's pretty good cuz it's the
 customer service on amazon.com it's pretty good at Magic somewhat similar or hopefully there's also like all of these third-party providers that you can go to and say hey help me out with my deployment like I bumped into a guy at the airport who worked for Rackspace we had a conversation and he said the much of rackspace's business involves actually helping companies work with AWS and I had no idea this was part of rackspace's business to consult about a different Cloud it's kind of a tough times have changed right so like Rackspace used to be the big provide their own but Amazon has so dominated the landscape of of of of infrastructure alert for Ford applying things that space now has a major strategy around around doing consulting and helping people use AWS which would have probably not not not not been there their initial plan a number of years back but but yeah absolutely
 I'm Consulting I think of that actually reflects some of what we said earlier which is it's a complex process and problem to deploy your your your infrastructure in your ear cyst your applications to the cloud and there's so many Corner cases in complexities that almost it's rare for large companies to have all the in-house expertise they need and that's where the Consultants come in and it Derby Consulting companies their partners of the whole episode of partners with Amazon and Amazon themselves of course give you support if you have questions or problems so there's a certain things you can get from help from Amazon with but for large efforts very often companies will rely on Amazon certified Consultants that's really a good aspect do I also think that it highlights the fact that you're off and paying for people's time when you because you can't find the information written down so what we would love to see is that the things that are easy but things that are repeated rather than pay for an hour of someone's time
 try to have that be written out that piece be written down and then even those Consultants rather than having to do the same thing over and over again this the easy things are written down and then the Consultants can work on the harder problems so it's kind of a mess this this documentation effort is really complementary which one Consultants doing it and we love to help from Consultants because I don't get to see the health problems repeat across different different companies in different applications and they're like all man everyone gets stuck by this problem and we have to go clean it up and then we'll I'm like well why don't you fix that initially so how about telling people about it but if you happen to go clean it up later
 the Insight data engineering program helps software Engineers level up their careers at The Cutting Edge of how we build software involves some of the most interesting open source and distributed Technologies such as Apache spark Kafka and no sequel databases Insight data engineering is free because they partner with top companies like Facebook Uber Capital One and slack you can learn about data engineering at Insight data engineering if you go to Insight data engineering.com s e e Dailey you can apply listeners of this show will be Advanced straight to the coding challenge of the application process if you get accepted you get to learn how to build useful products in a self-directed program there are work spaces in New York and Palo Alto that you can utilize during the short 7-week data engineering training process and you have access to
 free cloud computing resources and a network of over 600 data engineers and data scientist from over 100 companies in site provides the support until you find a great day the engineering position at a top company apply now at Insight data engineering.com SE daily skip straight to the coding challenge is a special offer for software engineering daily listeners thanks to Insight data engineering and if you want to level up your career if you want to learn some new skills and change what you are working on in your work environment and perhaps get a job upgrade if you're looking for a different type of job or if you're between Academia and your career path and you want to build a little more skill before you jump on that career path learn about data engineering at Insight data engineering good Insight data engineering.com SE daily to apply and Skip straight to that coding Challenge and thanks
 into Insight data engineering for being a new sponsor of software engineering daily he also check out the interview I did with Insight data engineering several months ago on software engineering daily let's get back to this episode
 I want it I want to dig that grass for bit and talk just about clouds more generally because she was not the first cloud and there were things like loudcloud that company that Ben Horowitz Mark Andreessen worked on there was slice host which is a company that was acquired by Rackspace what did AWS do differently cuz you've been around for a while I mean you probably have some perspective on this why why did AWS kind of become the company that just dominated market share I'm sure a lot of people if I wondered about that I can't really give my thoughts I wouldn't say I am on the world expert on this new people who may have deeper thoughts that I do but but I do feel that Amazon fundamentally was solving a problem that they themselves had which meant that they were building tools that they found useful so I think that I'm a fundamental perspective it's easier to build and meet at
 when you have you understand that need well and so Amazon already was deploying servers and you know has enlarged e-commerce site all the time and realized a lot of the challenges of managing that infrastructure so they were out of the gate solving real problems that we're pretty significant in Amazon's always had a pretty good policy of using their own tools which means thinking of this dog food in your new construction means that you're going to build things in a way that that you want them I think you can see as a result of that you look at Amazon Services they're often kind of complex and not especially the early days if they were they were more more things you could to Nana just you can full control over what operating system you were on Frontier am easy to for example you had full control of how you can figure it managed it but the learning curve was a lot higher but it meant you could kind of do anything you needed to do with enough effort and I think that that fundamentally matters with infrastructure is that
 that add you scale you start wanting to have control and ability to achieve everything you need an Amazon has them do anything for themselves and so they've been that gave him a real light up I think they also run it as a very reliable Enterprise product by doing that they also signal to everyone they were all in on making this work so for many years a lot of people did not so they might take they know that her Roku is going to work very hard to make their services work because their business depends on it that said her Roku is a much simpler service a lot of people did not find a good scale to wear clothes that are interested in a candidate in a smart more most part you know Javier small small deployments and so but when it came to Amazon they they were a large company signals of these complex products were going to be critical to their business for the future and so you have a little bit of confidence working on their on their systems and I think it took awhile for Google Cloud to reach that point as well because you
 as as someone who's picking me to picking these things within a company you're off in her you're saying well is this service going to be here what if easy to have been cancelled after 2 years right but Amazon was double down on that over and over and over on on on a kwsn people have a lot of confidence is key pieces of how the internet internet actually runs at this point Google cloud is getting to that point where but it took them awhile because honestly wasn't clear at least I'm not even looking at this and being my I'm not I don't personally have confidence that I change your VP at Google wouldn't mean that some of my services get cancer and that that upset that wasn't clear with Google cuz it wasn't clear was cord to Google's Mission but Amazon has a really good job of making a quart of their mission as well so so those are two reasons on a product they ship products very very fast across the many different kinds of services not all of them work well that's actually another thing another topic for the game the guide Casino not everything that Amazon ships is
 is grayed out of the gate at all but they just have a lot of credit for that in the sense that they are trying a lot of these services and then get to see what sticks so a lot of folks in the first alarm 2 or a little bit skeptical but it's been getting a lot of traction and you start seeing the real value there and it looks now like it'll be a very dominant force in the cloud coming up so it's I think those combination of factors have led to Amazon doing really well does Amazon deprecated Services eventually not rapidly which is good there are few things that happened up again like simple TV is probably not something I'm not sure they actually say on their website is deprecated but you look pretty much everyone knows and we mention it is that you probably shouldn't be building new things on top of simple TV that's an example there's also things that get kind of replaced its more common so maybe you're using my sequel in RDS but but increasingly you might want to be using Aurora for moisture
 Melanie at the cost of block block in as we discussed because of our is an Amazon only solution you mentioned Google toe to help illustrate the purpose of the Amazon open guide could you imagine a similar open guide being created for Google or is there something that is characteristically different about Google where you would necessarily need an open pipe wraps the incentives are different or I or do you think an open got to be equally useful for Google yeah absolutely I actually think the same principles apply across a wide range of technical problems for a queer people need to share knowledge a little better so absolutely the real bottle like is getting enough experts with enough time to put into it just like any open source project if anyone in your listeners is a Google Cloud expert and wants to talk to me about this I'd love to love to brainstorm on it and end in you know we definitely have had some some into
 and not then it's a it's a very similar and it's actually sort of symbiotic thing because a lot of the insights you have around Amazon web services do map over to Google cloud services through impact whole tables of service are equivalency between different services so many and a small subset of folks are experts in bulk so I absolutely need that competition between Google and Amazon shaping up in the future is it going to continue to be where they kind of develop parallel services and kind of have a copy one another or do you think there's going to be a die version a differentiation I don't know really developing an expert in managed machine learning like they're really betting a lot on manage tensorflow you can obviously see a potential for kubernetes on Google Cloud being a really big big
 best for them how do you think this will shape up yeah so you're trying to get me to be it on all this and why I so obviously all these things are hard to predict but they're really like business their business Productions I think Google on a lot of things is going for feature parody or or or slight plus UPS on you know so things like I buy some of those peanut basic server capabilities are pretty similar but things like and I shouldn't I should say I'm getting a lot of this from Google Cloud experts are there my friends I am not up hands on Google Cloud expert myself but but but but if there's a lot of services where we will also has second mover Advantage so you know you can look at
 some of the ways things are deployed like like RDS in Aurora and and and JLo week you will has to the chops to build you know big Clarion big table and things like this just scratching so they can they can build some of these things with different architectures that might scale or be more useful and so some of those those are some of the solutions may actually have bandages are Google can I get the correct some of the earnings from out from Amazon services and then finally there's a bunch like you mention which I think Withers Services based on actual data so like machine learned natural language model so there's a natural language service Google offers to speak service those are maybe not out of the gate blowing people away yet but they are there very credible and Google has historically an advantage on those areas and so they're going to be some Services where they're just going to probably be able to out execute Amazon I think when it comes to Enterprise support and reliable Services Google is a few
 behind like people just don't think of Google as an Enterprise company with Diane Diane Green taking the helm there I think it's that has really seems to be changing perception is there that those changing and and I think the information as a nice article on that from a few couple months ago work the talking about internal Google we are and how that has affected there at the Executioner but but it's really it it's really far more interesting now and I think Amazon is definitely getting going to have their build their dominant but they're going to have to work to maintain their dominance unlike a few years ago they look like they were the only game in town at the scale those services like the voice recognition service or the thick the image recognition service and those things are I think of this is like kind of higher-level API there's not really a I mean I don't think there's anything analogous on AWS in these things
 I'm like really exciting Primitives to build on but I think the costs for them are really owner is right now though like it's still quite expensive to to get an image recognized cuz I guess it's just still compare computer intensive right yeah I mean but if it's critical to your application you might pay that so it depends I think we have we don't know what the Apple system of Social Services looks like yet and so I'm sure Google is exploring what they can price there's there's some advantages to starting Hi and seeing who's going to pay it and then and then you before you go commodity depends on but I do think that little will depend on on Google pricing power thereof can they can they pry something that nobody else can build in which case they can probably can charge more for it where I was when it comes to things like just storage which you know you can get in so many places including Amazon it's a commodity more of a commodity that where there's there's real competition
 price yes I want to talk a little bit more about these open guides you also wrote the open guide to equity compensation and I thought this is really interesting cuz Equity compensation similar to AWS is something where is kind of like Insider knowledge is a lot of knowledge that probably has propagated over two people having a drink together but there was less of a place where it was all put into one I mean there's there's things like I guess Venture deals books like Venture deals that kind of had some of this information in it but what about the open guide idea what are the commonalities between equity compensation and AWS where these like what are the commonalities between these two types of knowledge bases that would cause you to write both of these guides another one that's been very popular it doesn't have the name has a different title called The Art of command line but it's another
 technical get a publication which is put on 2015 which is really quite popular and get out there it's up to about the thanks for up to 17 language translations on that one such pretty exciting just to see how people are interested in these sort of get Hub Publications there's a few of them but but the equity compensation one is interesting one cuz it's not an engineering Topic in your like I would have to come now at least I think there are common allergies so really it's around it is related to that beer test again right so what year did mulling over an offer from the latest startup or some interesting company Arduino for or or the random the random Fortune 500 company down the road down the road and you're like you're wondering if stick their offer in like how to do stock option things work or how did the IRS use work very few people know those things it's not entirely different from from technical decision making
 technical like engineering it's just no one tends to write down all the information and give you good tips and so that was an effort with a lawyer author and we he helped make sure that what we wrote down was was correct that actually from Eagle Point of View and tax point of view and and put but really it arose from the same kinds of things just like friends come to me and ask well how do I do actually why I need of us off and I have friends in the startup World asking me so is I'm getting 50,000 stock options is that good and I'm like back up a minute so you know you can there's a lot of things you need to know it for me to just answer that question and I don't know that I can answer that question for everyone so why don't we build start if I cashed knowledge base of that kind of information where people can get answers that are helpful and. It's a little more of a of a reusable resource instead of just the blog and so it it's very similar thinking a lot the compensation
 question because you want it intensifies your employees but of course you also want to keep your cost structure healthy and if you can convince your employees that a deal that kind of under pays them is a sufficient deal for them to put in enough work it kind of makes sense to you from a employer but it may end up having long-term resentment if your employer end up feeling undercompensated and we did we had a very interesting show a while ago with my friend has see who gave her the story where he just like negotiated negotiated really hard against Airbnb for a really big salary and he was just coming from a coding bootcamp and but he ended up getting a lot more salary than you would expect from somebody just going from a coding bootcamp and it just
 it rains a lot of questions about how much money are people leaving on the table so I think it's interesting be like that guy was was all about just you know what what what makes sense it from Equity compensation point of view but then you know if you if you have that knowledge going in you also decide to negotiate there's there's even more levels to considerations that you might want to have yeah that's this is a big topic of course I do think it's one of those topics where it's really critical both for employers and employees and especially in start-up startups are often the case where things can the more extreme things happen and you know that both in terms of overcompensation under compensation disasters or you know big payout but but it it really is a case where my belief is long-term it's in everyone in his interest to compensate you know employees fairly in stock end in Inn in equity ending in
 depending on what's up you know what's the situation is I think if you lowball people either side has Beauty out negotiates the other very often it is on the employer side where soak the employee has so little information they don't know that the offer is worth a lot or up to two little and so I think that sort of asymmetric information means that the person who was information usually gets taken advantage of on average and that also means that long term though I don't think that's in anyone's interest at startup can lowball all its employees for a little while but that comes in Burns to start up later when all those employees realize it and leave so it really is in everyone's interest to sort of have a trusted sense of will what is sort of fare for the situation and when you have that I think the market operates more effectively for for both sides it's not you know an employee versus employer thing it's like let's make sure that compensation is kind of makes sense
 stop me taking advantage of each other's ignorance okay so I want to wrap up just another note on the AWS open guide what is an example of something or maybe a few things that you've seen the community recently maybe in the slack Channel or recent additions to that open guide on GitHub you can go to get up and find the AWS open guide what are some recent things you've seen that surprised you things that would not have been discussed in a single place things that perhaps reminded you this is why the guide exist these are the great types of things that that people can use the AWS open guide is a repository for sure will I'm and I I routinely come back to the Gauchos I actually think God chose the sound a little negative some of the most important things to know you can go read about basic software and Google them and you can probably learn some of that the kind of easy to Middle horrible things by doing them but when it comes to God
 you can usually only learn them by having someone tell you or making a mistake yourself and so there's just been a long series of very focused PRS and these are some of my favorites in the ones we love to approve the fastest which is when someone says you know I've been burned by this one problem and I'll share it and they'll give a request and say you know you know what are thrown vpcs I'll just give an example of one that that that burns a lot of shots is really costly is when they're trying to connect to their office network with their Amazon Cloud and if the IP ranges happened to coincide you're basically just screwed in the whole bunch of bad ways so if the end it's really hard to switch it cuz you have to go through and change the IP addresses of all your devices now there's that's not like highlighted anywhere that I know of online but I've talked to a few Engineers was going to have contributed to the guy to have mentioned this problem and they all were work talking about how painful it was just because they happen to pick the wrong
 happy ranges on their office that's a terrible the technical little detail but it's really painful and it costs like large amounts of effort and by sharing that I mean if you have 10 people avoid that sort of problem that that's an amazing lot of times they were so those are things really really kind of make me think that this effort is is worth it is is that that kind of value you add it's it's helping avoid some of the negative things that we always start I'm on there are a bunch of others but I I do I do find the Gauchos and I are really helpful and I encourage books to keep you know submitting them and figure out which ones are really bad ones great alright well Josh that seems like a great place to stop thanks for going to show up to these couches or something as important towards a solution and and I would add just that that you know if you do find the guide please do join us some slack it's there's a slag Roofing
 share some of these or or pull up I really love contribution appreciate it thanks
 thanks to symphonic for sponsoring software engineering daily symphonica is a custom engineering shop where senior Engineers tackled big Tech challenges while learning from each other check it out its symphony.com SE daily that's s y m p h o n o, s e daily thanks again Stefano
